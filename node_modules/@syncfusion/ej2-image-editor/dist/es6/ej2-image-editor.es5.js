import { Browser, ChildProperty, Complex, Component, Event, EventHandler, L10n, NotifyPropertyChanges, Property, addClass, compile, detach, extend, getComponent, getInstance, getUniqueID, isNullOrUndefined, removeClass, select } from '@syncfusion/ej2-base';
import { Toolbar } from '@syncfusion/ej2-navigations';
import { DropDownButton } from '@syncfusion/ej2-splitbuttons';
import { ColorPicker, Slider, Uploader } from '@syncfusion/ej2-inputs';
import { createSpinner, hideSpinner, showSpinner } from '@syncfusion/ej2-popups';

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Interface for image finetune values.
 */
var FinetuneSettings = /** @__PURE__ @class */ (function (_super) {
    __extends(FinetuneSettings, _super);
    function FinetuneSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property(null)
    ], FinetuneSettings.prototype, "brightness", void 0);
    __decorate([
        Property(null)
    ], FinetuneSettings.prototype, "contrast", void 0);
    __decorate([
        Property(null)
    ], FinetuneSettings.prototype, "hue", void 0);
    __decorate([
        Property(null)
    ], FinetuneSettings.prototype, "saturation", void 0);
    __decorate([
        Property(null)
    ], FinetuneSettings.prototype, "exposure", void 0);
    __decorate([
        Property(null)
    ], FinetuneSettings.prototype, "opacity", void 0);
    __decorate([
        Property(null)
    ], FinetuneSettings.prototype, "blur", void 0);
    return FinetuneSettings;
}(ChildProperty));
/**
 * Image Editor is a graphical user interface that helps to edit an image by performing actions like selection,
 * cropping, rotating, inserting text and shapes (rectangles, ellipses, lines), and drawing free hand on top of an image.
 *
 ```html
 * <div id='imageeditor'></div>
 * ```
 * ```typescript
 * <script>
 * var imageObj = new ImageEditor({});
 * imageObj.appendTo("#imageeditor");
 * </script>
 * ```
 */
var ImageEditor = /** @__PURE__ @class */ (function (_super) {
    __extends(ImageEditor, _super);
    /**
     *
     * Constructor for creating the widget
     *
     * @param  {ImageEditorModel} options - Specifies the image editor model
     * @param  {string|HTMLDivElement} element - Specifies the target element
     */
    function ImageEditor(options, element) {
        var _this = _super.call(this, options, element) || this;
        _this.degree = 0; // current rotated state
        _this.isUndoRedo = false;
        _this.dragCanvas = false;
        _this.dragElement = '';
        _this.keyHistory = ''; // text history
        _this.tempKeyHistory = ''; // restore text history on cancel
        _this.mouseDownPoint = { x: 0, y: 0 };
        _this.previousPoint = { x: 0, y: 0 }; // updates prev x and y points in mouseMove
        _this.dragPoint = { startX: 0, startY: 0, endX: 0, endY: 0 }; // updates drag start and end points in mousedown and mousemove
        _this.diffPoint = { x: 0, y: 0 }; // updates resize points
        _this.oldPoint = {};
        _this.objColl = []; // shapes, text obj collection
        _this.undoRedoColl = [];
        _this.isImageLoaded = false; // collection of Image Data mainly used for reset state
        _this.strokeSettings = { strokeColor: '#fff', fillColor: '', strokeWidth: null };
        _this.tempStrokeSettings = { strokeColor: '#fff', fillColor: '', strokeWidth: null }; // restore stroke settings on cancel
        _this.textSettings = { text: 'Enter Text', fontFamily: 'Arial', fontSize: null, fontRatio: null, bold: false, italic: false, underline: false };
        _this.tempTextSettings = { text: 'Enter Text', fontFamily: 'Arial', fontSize: null, fontRatio: null, bold: false, italic: false, underline: false }; // restore text settings on cancel
        _this.toolbarHeight = 46;
        _this.togglePan = false; // toggle pan
        _this.disablePan = false; // auto enable / disable pan while zooming
        _this.currFlipState = ''; // current flipped state
        _this.touchEndPoint = {};
        _this.undoRedoStep = 0;
        _this.togglePen = false; // toggle free hand drawing
        _this.currentToolbar = 'main';
        _this.textStartPoints = { x: 0, y: 0 }; // restore text styles on cancel
        _this.fontSizeColl = []; // collection of font sizes
        _this.textRow = 1; // text area row count
        _this.activeObj = { activePoint: { startX: 0, startY: 0, endX: 0, endY: 0, width: 0, height: 0 },
            flipObjColl: [] };
        _this.tempActiveObj = { activePoint: { startX: 0, startY: 0, endX: 0, endY: 0, width: 0, height: 0 },
            flipObjColl: [] }; // for undo redo
        _this.currObjType = { shape: '', isDragging: false, isActiveObj: false, isText: false, isInitialText: false, isLine: false, isInitialLine: false,
            isCustomCrop: false, isZoomed: false, isUndoZoom: false, isUndoAction: false, isFiltered: false, isSave: false };
        _this.defToolbarItems = [];
        _this.isTimer = false; // mobile mode text area rendering on long touch
        _this.isFirstMove = false; // for pinch zoom
        _this.startTouches = []; // for pinch zoom
        _this.tempTouches = []; // for pinch zoom
        _this.adjustmentLevel = { brightness: 0, contrast: 0, hue: 0, opacity: 100, saturation: 0, blur: 0,
            exposure: 0, sharpen: false, bw: false }; // for toolbar slider value
        _this.tempAdjustmentLevel = { brightness: 0, contrast: 0, hue: 0, opacity: 100, saturation: 0, blur: 0,
            exposure: 0, sharpen: false, bw: false }; // for temp toolbar slider value
        _this.adjustmentValue = ''; // for internal slider value
        _this.initialAdjustmentValue = '';
        _this.tempAdjustmentValue = ''; // for temp internal slider value
        _this.currentFilter = ''; // current filter selected from toolbar
        _this.tempFilter = ''; // restore filter style on cancel
        _this.canvasFilter = 'brightness(' + 1 + ') ' + 'contrast(' + 100 + '%) ' + 'hue-rotate(' + 0 + 'deg) ' + // current filter style applied to lowerCanvas
            'saturate(' + 100 + '%) ' + 'opacity(' + 1 + ') ' + 'blur(' + 0 + 'px) ' + 'sepia(0%) ' + 'grayscale(0%) ' + 'invert(0%)';
        _this.tempUndoRedoColl = [];
        _this.tempUndoRedoStep = 0;
        // Revamp new properties
        _this.zoomFactor = 0; // Current zoom factor
        _this.tempZoomFactor = 0; // Restore zoom factor on cancel
        _this.destLeft = 0; // Current image left position
        _this.destTop = 0; // Current image top position
        _this.srcLeft = 0; // Original image left position
        _this.srcTop = 0; // Original image top position
        _this.cropDestPoints = { startX: 0, startY: 0, width: 0, height: 0 }; // To redraw old image when navigate to crop tab
        _this.flipColl = []; // To store flip order
        _this.isReverseRotate = false; // True when rotate method is called from iteration
        _this.isReverseFlip = false; // True when rotate method is called from iteration
        _this.isPreventDragging = false; // Shapes dragging is prevented when crop region is inside shape points
        _this.isRotateZoom = false; // To restore zoomed image on selection crop selection
        // eslint-disable-next-line
        _this.rotateFlipColl = []; // Transformation collection for redrawing image on rotate and flip
        _this.isCircleCrop = false; // Specifies whether circle crop is enabled or not
        _this.rotatedDestPoints = { startX: 0, startY: 0, width: 0, height: 0 };
        _this.croppedDegree = 0; // Specifies the degree when crop is performed
        _this.isFreehandDrawingPoint = false; // Specifies whether mouse cursor is on freehand drawing point or not
        _this.isFreehandDrawEditing = false; // Specifies whether freehand drawing is in editing mode or not
        _this.tempFreeHandDrawEditingStyles = { strokeColor: null, fillColor: null, strokeWidth: null }; // Restore freehand drawing styles on cancel
        _this.totalPannedInternalPoint = { x: 0, y: 0 }; // To store total panned point internally in rotated state
        _this.totalPannedClientPoint = { x: 0, y: 0 }; // To store total panned point in client coordinates in rotated state
        _this.totalPannedPoint = { x: 0, y: 0 }; // To store current panned point in non-rotated state
        _this.isCropTab = false; // Specifies whether crop tab is selected or not
        _this.cropZoomFactor = 0; // Specifies the zoom factor when crop selection is performed
        _this.defaultZoomFactor = 0; // Specifies the zoom factor when crop selection is not performed
        _this.fileName = ''; // Specifies the file name of the image on initial loading
        _this.isBrightnessAdjusted = false; // Specifies whether brightness is adjusted or not, to adjust opacity (combination)
        _this.isInitialLoading = false; // Specifies whether image is loaded for the first time or not (for applying initial filter)
        // For Free Hand Drawing
        _this.freehandDrawObj = { lastWidth: 0, lastVelocity: 0, time: 0, pointX: 0, pointY: 0 };
        _this.points = [];
        // eslint-disable-next-line
        _this.pointColl = {};
        _this.pointCounter = 0;
        _this.freehandCounter = 0;
        _this.isFreehandDrawing = false;
        _this.tempFreehandCounter = 0;
        _this.lastPan = { x: 0, y: 0 }; // To store last pan point
        _this.selectedFreehandColor = '#42a5f5';
        _this.isFreehandDrawCustomized = false;
        _this.isShapeInserted = false;
        _this.isAllowCropPan = false;
        _this.tempPannedPoint = { x: 0, y: 0 };
        _this.cropObj = { cropZoom: 0, defaultZoom: 0, totalPannedPoint: { x: 0, y: 0 }, totalPannedClientPoint: { x: 0, y: 0 },
            totalPannedInternalPoint: { x: 0, y: 0 }, tempFlipPanPoint: { x: 0, y: 0 }, activeObj: {}, rotateFlipColl: [],
            degree: 0, currFlipState: '', destPoints: { startX: 0, startY: 0, width: 0, height: 0 },
            srcPoints: { startX: 0, startY: 0, width: 0, height: 0 }, filter: '' };
        _this.afterCropActions = [];
        _this.isCancelAction = false;
        _this.isFreehandPointMoved = false;
        _this.isTouch = false;
        _this.freehandDownPoint = { x: 0, y: 0 };
        _this.tempFlipPanPoint = { x: 0, y: 0 };
        _this.currentFreehandDrawIndex = 0; // Specifies id for every freehand drawing - uses while deleting
        _this.tempCurrentFreehandDrawIndex = 0; // Specifies id for every freehand drawing - uses while cancelling
        _this.preventZoomBtn = false;
        _this.cancelObjColl = [];
        _this.cancelPointColl = [];
        _this.rotatedFlipCropSelection = false;
        return _this;
    }
    ImageEditor_1 = ImageEditor;
    ImageEditor.prototype.preRender = function () {
        // pre render code snippets
        this.element.id = this.element.id || getUniqueID('ej2-image-editor');
        if (Browser.isDevice) {
            this.element.classList.add('e-device');
        }
        this.themeColl = {
            Bootstrap5: { primaryColor: '#0d6efd', secondaryColor: '#fff' },
            Bootstrap5Dark: { primaryColor: '#0d6efd', secondaryColor: '#fff' },
            Tailwind: { primaryColor: '#4f46e5', secondaryColor: '#fff' },
            TailwindDark: { primaryColor: '#22d3ee', secondaryColor: '#fff' },
            Fluent: { primaryColor: '#0078d4', secondaryColor: '#fff' },
            FluentDark: { primaryColor: '#0078d4', secondaryColor: '#fff' },
            Bootstrap4: { primaryColor: '#007bff', secondaryColor: '#fff' },
            Bootstrap: { primaryColor: '#317ab9', secondaryColor: '#fff' },
            BootstrapDark: { primaryColor: '#317ab9', secondaryColor: '#fff' },
            Material: { primaryColor: '#e3165b', secondaryColor: '#fff' },
            MaterialDark: { primaryColor: '#00b0ff', secondaryColor: '#fff' },
            Fabric: { primaryColor: '#0078d6', secondaryColor: '#fff' },
            FabricDark: { primaryColor: '#0074cc', secondaryColor: '#fff' },
            Highcontrast: { primaryColor: '#000000', secondaryColor: '#fff' }
        };
        this.defaultLocale = {
            Crop: 'Crop',
            ZoomIn: 'Zoom In',
            ZoomOut: 'Zoom Out',
            Undo: 'Undo',
            Redo: 'Redo',
            Transform: 'Transform',
            Annotation: 'Annotation',
            Finetune: 'Finetune',
            Brightness: 'Brightness',
            Contrast: 'Contrast',
            Hue: 'Hue',
            Saturation: 'Saturation',
            Opacity: 'Opacity',
            Blur: 'Blur',
            Sharpen: 'Sharpen',
            Exposure: 'Exposure',
            Filter: 'Filter',
            Default: 'Default',
            Chrome: 'Chrome',
            Cold: 'Cold',
            Warm: 'Warm',
            Grayscale: 'Grayscale',
            BlackAndWhite: 'Black and White',
            Sepia: 'Sepia',
            Invert: 'Invert',
            Text: 'Add Text',
            Pen: 'Pen',
            Reset: 'Reset',
            Save: 'Save',
            Select: 'Select',
            RotateLeft: 'Rotate Left',
            RotateRight: 'Rotate Right',
            HorizontalFlip: 'Horizontal Flip',
            VerticalFlip: 'Vertical Flip',
            OK: 'OK',
            Cancel: 'Cancel',
            FillColor: 'Fill Color',
            StrokeColor: 'Stroke Color',
            StrokeWidth: 'Stroke Width',
            FontFamily: 'Font Family',
            FontStyle: 'Font Style',
            FontSize: 'Font Size',
            FontColor: 'Font Color',
            Pan: 'Pan',
            Move: 'Move',
            Load: 'Load',
            Custom: 'Custom',
            Square: 'Square',
            Circle: 'Circle',
            Ellipse: 'Ellipse',
            Rectangle: 'Rectangle',
            Line: 'Line',
            Bold: 'Bold',
            Italic: 'Italic',
            BoldItalic: 'Bold Italic',
            XSmall: 'X-Small',
            Small: 'Small',
            Medium: 'Medium',
            Large: 'Large',
            XLarge: 'X-Large',
            ABC: 'ABC',
            Browse: 'Browse'
        };
        this.l10n = new L10n('image-editor', this.defaultLocale, this.locale);
    };
    /**
     *
     * To Initialize the component rendering
     *
     * @private
     * @returns {void}
     */
    ImageEditor.prototype.render = function () {
        this.initialize();
    };
    /**
     * To get component name.
     *
     * @returns {string} - Module Name
     * @private
     */
    ImageEditor.prototype.getModuleName = function () {
        return 'image-editor';
    };
    /**
     *
     * To get the properties to be maintained in the persisted state.
     *
     * @returns {string} - Persist data
     * @private
     */
    ImageEditor.prototype.getPersistData = function () {
        return this.addOnPersist([]);
    };
    /**
     *
     * Called internally if any of the property value changed.
     *
     * @param  {ImageEditorModel} newProperties - Specifies new properties
     * @param  {ImageEditorModel} oldProperties - Specifies old properties
     * @returns {void}
     * @private
     */
    ImageEditor.prototype.onPropertyChanged = function (newProperties, oldProperties) {
        for (var _i = 0, _a = Object.keys(newProperties); _i < _a.length; _i++) {
            var prop = _a[_i];
            switch (prop) {
                case 'cssClass':
                    if (oldProperties.cssClass) {
                        removeClass([this.element], oldProperties.cssClass.replace(/\s+/g, ' ').trim().split(' '));
                    }
                    if (newProperties.cssClass) {
                        addClass([this.element], newProperties.cssClass.replace(/\s+/g, ' ').trim().split(' '));
                    }
                    break;
                case 'disabled':
                    if (newProperties.disabled) {
                        this.element.classList.add('e-disabled');
                        this.unwireEvent();
                    }
                    else {
                        this.element.classList.remove('e-disabled');
                        this.wireEvent();
                    }
                    break;
                case 'height':
                    this.element.style.height = newProperties.height;
                    break;
                case 'width':
                    this.element.style.width = newProperties.width;
                    break;
                case 'theme':
                    if (newProperties.theme) {
                        this.updateTheme();
                        this.upperContext.strokeStyle = this.themeColl[this.theme]['primaryColor'];
                        this.upperContext.fillStyle = this.themeColl[this.theme]['secondaryColor'];
                    }
                    break;
                case 'finetuneSettings':
                    if (newProperties.finetuneSettings) {
                        this.finetuneSettings = newProperties.finetuneSettings;
                        this.updateFinetunes();
                    }
                    break;
                case 'locale':
                    if (newProperties.locale) {
                        this.l10n.setLocale(newProperties.locale);
                        this.refreshToolbar('main');
                    }
                    break;
                case 'allowUndoRedo':
                    if (newProperties.allowUndoRedo) {
                        this.allowUndoRedo = true;
                    }
                    else {
                        this.allowUndoRedo = false;
                    }
                    this.refreshToolbar('main');
                    break;
                case 'toolbar':
                    break;
                case 'toolbarTemplate':
                    break;
            }
        }
    };
    ImageEditor.prototype.destroy = function () {
        var classList = [];
        this.element.removeAttribute('tabindex');
        if (this.cssClass) {
            classList = classList.concat(this.cssClass.replace(/\s+/g, ' ').trim().split(' '));
        }
        removeClass([this.element], classList);
        if (!this.element.getAttribute('class')) {
            this.element.removeAttribute('class');
        }
        this.destroySubComponents();
        this.unwireEvent();
        _super.prototype.destroy.call(this);
        this.element.innerHTML = '';
    };
    ImageEditor.prototype.initialize = function () {
        this.updateFinetunes();
        this.createToolbar();
        this.createContextualToolbar();
        this.createCanvas();
        this.wireEvent();
        this.lowerContext.filter = this.canvasFilter = this.initialAdjustmentValue = this.adjustmentValue = this.getDefaultFilter();
        if (this.cssClass) {
            addClass([this.element], this.cssClass.replace(/\s+/g, ' ').trim().split(' '));
        }
        if (this.element) {
            createSpinner({
                target: this.element
            });
        }
    };
    ImageEditor.prototype.getDefaultFilter = function () {
        return 'brightness(' + 1 + ') ' + 'contrast(' + 100 + '%) ' + 'hue-rotate(' + 0 + 'deg) ' +
            'saturate(' + 100 + '%) ' + 'opacity(' + 1 + ') ' + 'blur(' + 0 + 'px) ' + 'sepia(0%) ' + 'grayscale(0%) ' + 'invert(0%)';
    };
    ImageEditor.prototype.updateFinetunes = function () {
        if (this.finetuneSettings) {
            if (this.finetuneSettings.brightness) {
                this.adjustmentLevel.brightness = this.finetuneSettings.brightness.defaultValue;
                this.tempAdjustmentLevel.brightness = this.finetuneSettings.brightness.defaultValue;
            }
            if (this.finetuneSettings.contrast) {
                this.adjustmentLevel.contrast = this.finetuneSettings.contrast.defaultValue;
                this.tempAdjustmentLevel.contrast = this.finetuneSettings.contrast.defaultValue;
            }
            if (this.finetuneSettings.hue) {
                this.adjustmentLevel.hue = this.finetuneSettings.hue.defaultValue;
                this.tempAdjustmentLevel.hue = this.finetuneSettings.hue.defaultValue;
            }
            if (this.finetuneSettings.saturation) {
                this.adjustmentLevel.saturation = this.finetuneSettings.saturation.defaultValue;
                this.tempAdjustmentLevel.saturation = this.finetuneSettings.saturation.defaultValue;
            }
            if (this.finetuneSettings.exposure) {
                this.adjustmentLevel.exposure = this.finetuneSettings.exposure.defaultValue;
                this.tempAdjustmentLevel.exposure = this.finetuneSettings.exposure.defaultValue;
            }
            if (this.finetuneSettings.opacity) {
                this.adjustmentLevel.opacity = this.finetuneSettings.opacity.defaultValue;
                this.tempAdjustmentLevel.opacity = this.finetuneSettings.opacity.defaultValue;
            }
            if (this.finetuneSettings.blur) {
                this.adjustmentLevel.blur = this.finetuneSettings.blur.defaultValue;
                this.tempAdjustmentLevel.blur = this.finetuneSettings.blur.defaultValue;
            }
            this.isInitialLoading = true;
        }
    };
    ImageEditor.prototype.initializeFilter = function () {
        this.setBrightness(this.adjustmentLevel.brightness);
        this.setContrast(this.adjustmentLevel.contrast);
        this.setHue(this.adjustmentLevel.hue);
        this.setSaturation(this.adjustmentLevel.saturation);
        this.setExposure(this.adjustmentLevel.exposure);
        this.setOpacity(this.adjustmentLevel.opacity);
        this.setBlur(this.adjustmentLevel.blur);
    };
    /**
     *
     * This Method will add events to component (element, event, method, current reference)
     *
     * @returns {void}.
     */
    ImageEditor.prototype.wireEvent = function () {
        EventHandler.add(document, 'keydown', this.keyDownEventHandler, this);
        EventHandler.add(document, 'keypress', this.keyUpEventHandler, this);
        EventHandler.add(this.upperCanvas, 'mousedown', this.mouseDownEventHandler, this);
        EventHandler.add(this.upperCanvas, 'mousemove', this.mouseMoveEventHandler, this);
        EventHandler.add(this.upperCanvas, 'mouseup', this.mouseUpEventHandler, this);
        EventHandler.add(document, 'mouseup', this.mouseUpEventHandler, this);
        EventHandler.add(this.lowerCanvas, 'mousedown', this.canvasMouseDownHandler, this);
        EventHandler.add(this.lowerCanvas, 'mousemove', this.canvasMouseMoveHandler, this);
        EventHandler.add(this.lowerCanvas, 'mouseup', this.canvasMouseUpHandler, this);
        EventHandler.add(document, 'mouseup', this.canvasMouseUpHandler, this);
        EventHandler.add(this.upperCanvas, 'touchstart', this.touchStartHandler, this);
        EventHandler.add(this.lowerCanvas, 'touchstart', this.touchStartHandler, this);
        EventHandler.add(this.upperCanvas, 'dblclick', this.findTextPoint, this);
        EventHandler.add(this.textArea, 'mousedown', this.findTextPoint, this);
        EventHandler.add(this.lowerCanvas, 'mousewheel DOMMouseScroll', this.handleScroll, this);
        EventHandler.add(this.upperCanvas, 'mousewheel DOMMouseScroll', this.handleScroll, this);
        window.addEventListener('resize', this.windowResizeHandler.bind(this));
        if ((!Browser.isIos && Browser.info.name !== 'safari')) {
            screen.orientation.addEventListener('change', this.screenOrientation.bind(this));
        }
    };
    /**
     *
     * This Method will remove events from component
     *
     * @returns {void}.
     */
    ImageEditor.prototype.unwireEvent = function () {
        EventHandler.remove(document, 'keydown', this.keyDownEventHandler);
        EventHandler.remove(document, 'keypress', this.keyUpEventHandler);
        EventHandler.remove(this.upperCanvas, 'mousedown', this.mouseDownEventHandler);
        EventHandler.remove(this.upperCanvas, 'mousemove', this.mouseMoveEventHandler);
        EventHandler.remove(this.upperCanvas, 'mouseup', this.mouseUpEventHandler);
        EventHandler.remove(document, 'mouseup', this.mouseUpEventHandler);
        EventHandler.remove(this.lowerCanvas, 'mousedown', this.canvasMouseDownHandler);
        EventHandler.remove(this.lowerCanvas, 'mousemove', this.canvasMouseMoveHandler);
        EventHandler.remove(this.lowerCanvas, 'mouseup', this.canvasMouseUpHandler);
        EventHandler.remove(document, 'mouseup', this.canvasMouseUpHandler);
    };
    ImageEditor.prototype.destroySubComponents = function () {
        var inputElement = this.element.querySelectorAll('input.e-control');
        var btnElement = this.element.querySelectorAll('button.e-control');
        for (var i = 0, len = inputElement.length; i < len; i++) {
            if (inputElement[i].classList.contains('e-color-picker')) {
                getComponent(inputElement[i], 'color-picker').destroy();
                detach(select('input#' + inputElement[i].id, this.element));
            }
        }
        for (var i = 0, len = btnElement.length; i < len; i++) {
            if (btnElement[i].classList.contains('e-dropdown-btn')) {
                getComponent(btnElement[i], 'dropdown-btn').destroy();
                detach(select('button#' + btnElement[i].id, this.element));
            }
            else if (btnElement[i].classList.contains('e-btn')) {
                getComponent(btnElement[i], 'btn').destroy();
                detach(select('button#' + btnElement[i].id, this.element));
            }
        }
    };
    ImageEditor.prototype.updateTheme = function () {
        if (this.theme !== '') {
            this.theme = this.toPascalCase(this.theme);
        }
    };
    ImageEditor.prototype.toPascalCase = function (str) {
        var strArr = [];
        if (!isNullOrUndefined(str)) {
            strArr = str.toLowerCase().split('-');
        }
        for (var i = 0; i < strArr.length; i++) {
            strArr[i] = strArr[i].charAt(0).toUpperCase() + strArr[i].slice(1);
        }
        return strArr.join('');
    };
    ImageEditor.prototype.createCanvas = function () {
        this.element.style.boxSizing = 'border-box';
        var height = this.toolbarHeight;
        this.element.style.width = this.width;
        this.element.style.height = this.height;
        var canvasWrapper = this.element.appendChild(this.createElement('div', { id: this.element.id + '_canvasWrapper',
            className: 'e-canvas-wrapper', attrs: { style: 'height:' + (this.element.offsetHeight - height - 2) + 'px; width:' +
                    (this.element.offsetWidth - 2)
                    + 'px; position: relative; overflow: hidden; margin: 0 auto;' }
        }));
        this.lowerCanvas = canvasWrapper.appendChild(this.createElement('canvas', {
            id: this.element.id + '_lowerCanvas', attrs: { name: 'canvasImage' }
        }));
        this.upperCanvas = canvasWrapper.appendChild(this.createElement('canvas', {
            id: this.element.id + '_upperCanvas', attrs: { name: 'canvasImage' }
        }));
        this.inMemoryCanvas = this.createElement('canvas', {
            id: this.element.id + '_inMemoryCanvas', attrs: { name: 'canvasImage' }
        });
        this.textArea = canvasWrapper.appendChild(this.createElement('textarea', {
            id: this.element.id + '_textArea', className: 'e-textarea', attrs: { name: 'textArea' }
        }));
        this.textArea.setAttribute('spellcheck', 'false');
        this.lowerCanvas.style.width = this.upperCanvas.style.width = this.inMemoryCanvas.style.width = '100%';
        this.lowerCanvas.style.height = this.upperCanvas.style.height = this.inMemoryCanvas.style.height = '100%';
        this.upperCanvas.style.position = this.lowerCanvas.style.position = this.textArea.style.position = 'absolute';
        this.textArea.style.backgroundColor = 'transparent';
        this.textArea.style.display = 'none';
        this.textArea.style.resize = 'none';
        this.lowerContext = this.lowerCanvas.getContext('2d');
        this.baseImg = this.createElement('img', {
            id: this.element.id + '_orgImg', attrs: { name: 'Image', crossorigin: 'anonymous' }
        });
        this.upperCanvas.style.cursor = 'default';
        this.upperCanvas.style.display = 'none';
        this.upperContext = this.upperCanvas.getContext('2d');
        this.inMemoryContext = this.inMemoryCanvas.getContext('2d');
    };
    ImageEditor.prototype.createToolbar = function () {
        var _this = this;
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.length > 0)) {
            this.element.appendChild(this.createElement('div', {
                id: this.element.id + '_toolbarArea', className: 'e-toolbar-area'
            }));
            if (this.toolbarTemplate) {
                this.toolbarTemplateFn();
            }
            else {
                var toolbarItems = { cssClass: 'e-image-upload', align: 'Left', type: 'Input',
                    tooltipText: this.l10n.getConstant('Browse'), template: new Uploader({ allowedExtensions: '.jpg, .jpeg, .png,.svg' }) };
                if (isNullOrUndefined(this.defToolbarItems)) {
                    this.defToolbarItems = [];
                }
                this.defToolbarItems.push(toolbarItems);
                var toolbarArea = document.getElementById(this.element.id + '_toolbarArea');
                var toolbar_1 = this.createElement('div', {
                    id: this.element.id + '_toolbar'
                });
                toolbarArea.appendChild(toolbar_1);
                var uploadItems = [
                    {
                        cssClass: 'e-image-upload',
                        align: 'Left', type: 'Input',
                        tooltipText: this.l10n.getConstant('Browse'),
                        template: new Uploader({
                            allowedExtensions: '.jpg, .jpeg, .png,.svg',
                            selected: function () {
                                if (Browser.isDevice) {
                                    if (_this.defToolbarItems.length > 0 &&
                                        (!isNullOrUndefined(document.getElementById(_this.element.id + '_toolbar')))) {
                                        getComponent(document.getElementById(_this.element.id + '_toolbar'), 'toolbar').destroy();
                                    }
                                    if (!isNullOrUndefined(document.getElementById(_this.element.id + '_bottomToolbar'))) {
                                        getComponent(document.getElementById(_this.element.id + '_bottomToolbar'), 'toolbar').destroy();
                                    }
                                    _this.initToolbarItem(false, Browser.isDevice, null);
                                    _this.createBottomToolbar();
                                }
                                else {
                                    if (_this.defToolbarItems.length > 0 &&
                                        (!isNullOrUndefined(document.getElementById(_this.element.id + '_toolbar')))) {
                                        getComponent(document.getElementById(_this.element.id + '_toolbar'), 'toolbar').destroy();
                                    }
                                    _this.initToolbarItem(false, false, null);
                                }
                            }
                        })
                    }
                ];
                new Toolbar({ items: uploadItems, width: '100%',
                    created: function () {
                        _this.trigger('toolbarCreated', { toolbarType: 'main' });
                    },
                    clicked: this.defToolbarClicked.bind(this) }, '#' + this.element.id + '_toolbar');
                this.createLeftToolbarControls();
            }
            if (!isNullOrUndefined(document.getElementById(this.element.id + '_toolbar'))) {
                this.toolbarHeight = document.getElementById(this.element.id + '_toolbar').clientHeight;
            }
        }
        else {
            this.toolbarHeight = 0;
        }
    };
    ImageEditor.prototype.createContextualToolbar = function () {
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.length > 0)) {
            this.element.appendChild(this.createElement('div', { id: this.element.id + '_contextualToolbarArea',
                className: 'e-contextual-toolbar-wrapper e-hide', attrs: { style: 'position: absolute;' }
            }));
            var toolbarArea = document.getElementById(this.element.id + '_contextualToolbarArea');
            var toolbar_2 = this.createElement('div', { id: this.element.id + '_contextualToolbar' });
            toolbarArea.appendChild(toolbar_2);
        }
    };
    ImageEditor.prototype.updateContextualToolbar = function (type, cType) {
        if (this.toolbarTemplate) {
            this.toolbarTemplateFn();
        }
        else {
            var toolbarArea = this.element.querySelector('#' + this.element.id + '_toolbarArea');
            var contextualToolbarArea = this.element.querySelector('#' + this.element.id + '_contextualToolbarArea');
            contextualToolbarArea.classList.remove('e-hide');
            contextualToolbarArea.style.left = toolbarArea.offsetLeft + 'px';
            if (type === 'filter') {
                if (document.getElementById(this.element.id + '_toolbar') && this.defToolbarItems.length > 0) {
                    getComponent(document.getElementById(this.element.id + '_toolbar'), 'toolbar').destroy();
                }
                if (Browser.isDevice) {
                    this.initToolbarItem(false, true, true);
                }
                else {
                    this.initToolbarItem(true, null, null);
                }
                this.refreshSlider();
                this.initFilterToolbarItem();
            }
            else {
                if (document.querySelector('#' + this.element.id + '_contextualToolbar').classList.contains('e-control')) {
                    getComponent(document.getElementById(this.element.id + '_contextualToolbar'), 'toolbar').destroy();
                }
                this.refreshSlider();
                this.renderSlider(cType);
            }
            if (Browser.isDevice) {
                var cHt = contextualToolbarArea.offsetHeight;
                var ht = this.element.querySelector('#' + this.element.id + '_canvasWrapper').offsetHeight;
                contextualToolbarArea.style.top = this.toolbarHeight + ht - cHt + 'px';
            }
            else {
                contextualToolbarArea.style.top = this.toolbarHeight + 'px';
            }
        }
    };
    ImageEditor.prototype.createBottomToolbar = function () {
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.length > 0)) {
            this.element.appendChild(this.createElement('div', {
                id: this.element.id + '_bottomToolbarArea', className: 'e-bottom-toolbar'
            }));
            if (!this.toolbarTemplate) {
                document.getElementById(this.element.id + '_canvasWrapper').style.height = (this.element.offsetHeight
                    - this.toolbarHeight * 2) - 3 + 'px';
                var toolbarArea = document.getElementById(this.element.id + '_bottomToolbarArea');
                var toolbarElem = this.createElement('div', {
                    id: this.element.id + '_bottomToolbar'
                });
                toolbarArea.appendChild(toolbarElem);
            }
            this.initBottomToolbar();
        }
    };
    ImageEditor.prototype.initBottomToolbar = function () {
        var _this = this;
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.length > 0)) {
            if (this.toolbarTemplate) {
                this.toolbarTemplateFn();
            }
            else {
                var items = this.getMainToolbarItem();
                new Toolbar({ items: items, width: '100%',
                    created: function () {
                        _this.renderAnnotationBtn();
                        _this.renderCropBtn();
                        _this.renderTransformBtn();
                        _this.trigger('toolbarCreated', { toolbarType: 'main' });
                    },
                    clicked: this.defToolbarClicked.bind(this)
                }, '#' + this.element.id + '_bottomToolbar');
                if (this.defToolbarItems.length > 0 && (!isNullOrUndefined(document.getElementById(this.element.id + '_bottomToolbar')))) {
                    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                    var toolbar_3 = getComponent(this.element.id + '_bottomToolbar', 'toolbar');
                    toolbar_3.refreshOverflow();
                }
            }
        }
    };
    ImageEditor.prototype.toolbarTemplateFn = function () {
        var template;
        var templateID = this.element.id + '_toolbar';
        var toolbarArea = this.element.querySelector('#' + this.element.id + '_toolbarArea');
        if (this.toolbarTemplate) {
            this.toolbarFn = this.templateParser(this.toolbarTemplate);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            if (this.isReact) {
                template = this.toolbarFn({ type: 'toolbar' }, this, 'Template', templateID)[0];
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }
            else if (this.isAngular) {
                var templateColl = this.toolbarFn({ type: 'toolbar' }, this, 'Template', templateID);
                template = (templateColl[0].nodeType === 3) ? templateColl[1] : templateColl[0];
            }
            else {
                template = this.toolbarFn({ type: 'toolbar' }, this, 'Template', templateID)[0];
            }
            toolbarArea.appendChild(template);
            this.renderReactTemplates();
        }
    };
    ImageEditor.prototype.templateParser = function (template) {
        if (template) {
            try {
                if (document.querySelectorAll(template).length) {
                    return compile(document.querySelector(template).innerHTML.trim());
                }
                else {
                    return compile(template);
                }
            }
            catch (error) {
                return compile(template);
            }
        }
        return undefined;
    };
    ImageEditor.prototype.getLeftToolbarItem = function (isOkBtn) {
        var toolbarItems = [];
        if (!isOkBtn) {
            toolbarItems.push({ cssClass: 'e-image-upload', align: 'Left', type: 'Input', template: new Uploader({ allowedExtensions: '.jpg, .jpeg, .png,.svg' }) });
            toolbarItems.push({ visible: false, cssClass: 'e-image-position e-btn e-flat', tooltipText: this.l10n.getConstant('Browse'), align: 'Left' });
        }
        if (this.allowUndoRedo) {
            if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Undo') > -1)) {
                toolbarItems.push({ id: this.element.id + '_undo', prefixIcon: 'e-icons e-undo', cssClass: 'top-icon e-undo',
                    tooltipText: this.l10n.getConstant('Undo'), align: 'Left' });
            }
            if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Redo') > -1)) {
                toolbarItems.push({ id: this.element.id + '_redo', prefixIcon: 'e-icons e-redo', cssClass: 'top-icon e-redo',
                    tooltipText: this.l10n.getConstant('Redo'), align: 'Left' });
            }
        }
        if (!this.preventZoomBtn) {
            if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('ZoomOut') > -1)) {
                toolbarItems.push({ id: this.element.id + '_zoomOut', prefixIcon: 'e-icons e-zoom-out', cssClass: 'top-icon e-dec-zoom',
                    tooltipText: this.l10n.getConstant('ZoomOut'), align: 'Left' });
            }
            if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('ZoomIn') > -1)) {
                toolbarItems.push({ id: this.element.id + '_zoomIn', prefixIcon: 'e-icons e-zoom-in', cssClass: 'top-icon e-inc-zoom',
                    tooltipText: this.l10n.getConstant('ZoomIn'), align: 'Left' });
            }
        }
        var tempToolbarItems = this.processToolbar('left');
        for (var i = 0, len = tempToolbarItems.length; i < len; i++) {
            toolbarItems.push(tempToolbarItems[i]);
        }
        return toolbarItems;
    };
    ImageEditor.prototype.getRightToolbarItem = function (isOkBtn) {
        var toolbarItems = [];
        if (isOkBtn) {
            toolbarItems.push({ id: this.element.id + '_ok', prefixIcon: 'e-icons e-check', cssClass: 'top-icon e-tick',
                tooltipText: this.l10n.getConstant('OK'), align: 'Right' });
            toolbarItems.push({ id: this.element.id + '_cancel', prefixIcon: 'e-icons e-close', cssClass: 'top-icon e-save',
                tooltipText: this.l10n.getConstant('Cancel'), align: 'Right' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Reset') > -1)) {
            toolbarItems.push({ id: this.element.id + '_reset', prefixIcon: 'e-icons e-btn-reset', cssClass: 'top-icon e-img-reset',
                tooltipText: this.l10n.getConstant('Reset'), align: 'Right' });
        }
        if (!isOkBtn) {
            if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Save') > -1)) {
                toolbarItems.push({ id: this.element.id + '_save', prefixIcon: 'e-icons e-btn-save', cssClass: 'top-icon e-save',
                    tooltipText: this.l10n.getConstant('Save'), align: 'Right', template: '<button id="' + this.element.id + '_saveBtn"></button>' });
            }
        }
        var tempToolbarItems = this.processToolbar('right');
        for (var i = 0, len = tempToolbarItems.length; i < len; i++) {
            toolbarItems.push(tempToolbarItems[i]);
        }
        return toolbarItems;
    };
    ImageEditor.prototype.getMainToolbarItem = function (isApplyOption) {
        var toolbarItems = [];
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Crop') > -1)) {
            toolbarItems.push({ id: this.element.id + '_crop', tooltipText: this.l10n.getConstant('Crop'), align: 'Center',
                template: '<button id="' + this.element.id + '_cropBtn"></button>'
            });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Annotate') > -1)) {
            toolbarItems.push({ id: this.element.id + '_annotation', tooltipText: this.l10n.getConstant('Annotation'), align: 'Center',
                template: '<button id="' + this.element.id + '_annotationBtn"></button>' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Transform') > -1)) {
            toolbarItems.push({ id: this.element.id + '_transform', tooltipText: this.l10n.getConstant('Transform'), align: 'Center',
                template: '<button id="' + this.element.id + '_transformBtn"></button>'
            });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Finetune') > -1)) {
            toolbarItems.push({ id: this.element.id + '_adjustment', prefixIcon: 'e-icons e-adjustment', cssClass: 'top-icon e-adjustment',
                tooltipText: this.l10n.getConstant('Finetune'), align: 'Center' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Filter') > -1)) {
            toolbarItems.push({ id: this.element.id + '_filter', prefixIcon: 'e-icons e-filters', cssClass: 'top-icon e-filters',
                tooltipText: this.l10n.getConstant('Filter'), align: 'Center' });
        }
        var tempToolbarItems = this.processToolbar('center');
        for (var i = 0, len = tempToolbarItems.length; i < len; i++) {
            toolbarItems.push(tempToolbarItems[i]);
        }
        if (isApplyOption) {
            toolbarItems.push({ id: this.element.id + '_ok', prefixIcon: 'e-icons e-check', cssClass: 'top-icon e-tick',
                tooltipText: this.l10n.getConstant('OK'), align: 'Right' });
            toolbarItems.push({ id: this.element.id + '_cancel', prefixIcon: 'e-icons e-close', cssClass: 'top-icon e-save',
                tooltipText: this.l10n.getConstant('Cancel'), align: 'Right' });
        }
        return toolbarItems;
    };
    ImageEditor.prototype.getZoomToolbarItem = function () {
        var toolbarItems = [];
        return toolbarItems;
    };
    ImageEditor.prototype.processToolbar = function (position) {
        var toolbarItems = [];
        if (this.toolbar) {
            for (var i = 0, len = this.toolbar.length; i < len; i++) {
                if (typeof (this.toolbar[i]) === 'object') {
                    if (isNullOrUndefined(this.toolbar[i].align)) {
                        if (position === 'left') {
                            toolbarItems.push(this.toolbar[i]);
                        }
                    }
                    else if (this.toolbar[i].align.toLowerCase() === position) {
                        toolbarItems.push(this.toolbar[i]);
                    }
                }
            }
        }
        return toolbarItems;
    };
    ImageEditor.prototype.processSubToolbar = function (items) {
        var toolbarItems = [];
        if (items) {
            for (var i = 0, len = items.length; i < len; i++) {
                if (typeof (items[i]) === 'object') {
                    items[i].align = 'Center';
                    toolbarItems.push(items[i]);
                }
            }
        }
        return toolbarItems;
    };
    ImageEditor.prototype.isToolbar = function () {
        return (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.length > 0)
            || !isNullOrUndefined(this.toolbarTemplate));
    };
    ImageEditor.prototype.initToolbarItem = function (isApplyOption, isDevice, isOkBtn) {
        var _this = this;
        if (this.isToolbar()) {
            var leftItem = this.getLeftToolbarItem(isOkBtn);
            var rightItem = this.getRightToolbarItem(isOkBtn);
            var mainItem = this.getMainToolbarItem(isApplyOption);
            var zoomItem = this.getZoomToolbarItem();
            if (isDevice) {
                this.defToolbarItems = leftItem.concat(rightItem);
            }
            else {
                this.defToolbarItems = leftItem.concat(mainItem, rightItem, zoomItem);
            }
            new Toolbar({
                width: '100%',
                items: this.defToolbarItems,
                clicked: this.defToolbarClicked.bind(this),
                created: function () {
                    if (!isDevice) {
                        _this.renderAnnotationBtn();
                        _this.renderCropBtn();
                        _this.renderTransformBtn();
                    }
                    _this.renderSaveBtn();
                    _this.trigger('toolbarCreated', { toolbarType: 'main' });
                }
            }, '#' + this.element.id + '_toolbar');
            this.createLeftToolbarControls();
            this.enableDisableToolbarBtn();
            if (this.isToolbar() && (!isNullOrUndefined(document.getElementById(this.element.id + '_toolbar')))) {
                /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                var toolbar_4 = getComponent(this.element.id + '_toolbar', 'toolbar');
                toolbar_4.refreshOverflow();
            }
        }
    };
    ImageEditor.prototype.enableDisableToolbarBtn = function () {
        var undo = document.querySelector('#' + this.element.id + '_undo');
        if (!isNullOrUndefined(undo) && this.undoRedoStep === 0) {
            undo.classList.add('e-disabled');
            undo.parentElement.classList.add('e-overlay');
        }
        else if (!isNullOrUndefined(undo)) {
            undo.classList.remove('e-disabled');
            undo.parentElement.classList.remove('e-overlay');
        }
        var redo = document.querySelector('#' + this.element.id + '_redo');
        if (!isNullOrUndefined(redo) && (this.undoRedoStep === this.undoRedoColl.length)) {
            redo.classList.add('e-disabled');
            redo.parentElement.classList.add('e-overlay');
        }
        else if (!isNullOrUndefined(redo) && (this.undoRedoStep === 0 && this.undoRedoColl.length > 0)) {
            redo.classList.remove('e-disabled');
            redo.parentElement.classList.remove('e-overlay');
        }
        else if (!isNullOrUndefined(redo)) {
            redo.classList.remove('e-disabled');
            redo.parentElement.classList.remove('e-overlay');
        }
        var zoomIn = document.querySelector('#' + this.element.id + '_zoomIn');
        if (!isNullOrUndefined(zoomIn) && this.zoomFactor >= 2) {
            zoomIn.classList.add('e-disabled');
            zoomIn.parentElement.classList.add('e-overlay');
        }
        else if (!isNullOrUndefined(zoomIn)) {
            zoomIn.classList.remove('e-disabled');
            zoomIn.parentElement.classList.remove('e-overlay');
        }
        var zoomOut = document.querySelector('#' + this.element.id + '_zoomOut');
        if (!isNullOrUndefined(zoomOut) && this.zoomFactor === 0) {
            zoomOut.classList.add('e-disabled');
            zoomOut.parentElement.classList.add('e-overlay');
        }
        else if (!isNullOrUndefined(zoomOut)) {
            zoomOut.classList.remove('e-disabled');
            zoomOut.parentElement.classList.remove('e-overlay');
        }
        var pan = document.querySelector('#' + this.element.id + '_pan');
        if (!isNullOrUndefined(pan) && this.zoomFactor === 0) {
            pan.style.display = 'none';
        }
        else if (!isNullOrUndefined(pan)) {
            pan.style.display = 'block';
        }
    };
    ImageEditor.prototype.createLeftToolbarControls = function () {
        if (this.defToolbarItems !== undefined && this.defToolbarItems.length > 0 &&
            (!isNullOrUndefined(document.getElementById(this.element.id + '_toolbar')))) {
            var uploadDiv = document.getElementById(this.element.id + '_toolbar')
                .querySelector('.e-image-upload');
            if (uploadDiv) {
                var uploadElem = uploadDiv.getElementsByTagName('input')[0];
                var uploadBtnElem = uploadDiv.getElementsByTagName('button')[0];
                uploadBtnElem.className = 'e-tbar-btn e-tbtn-txt e-btn top-icon';
                uploadBtnElem.innerHTML = '';
                uploadBtnElem.appendChild(this.createElement('span', {
                    className: 'e-btn-icon e-icons e-upload-icon e-icon-left'
                }));
                uploadElem.onchange = this.fileSelect.bind(this, uploadElem);
            }
        }
    };
    ImageEditor.prototype.cropSelectedState = function () {
        if (!isNullOrUndefined(this.activeObj.shape) && this.activeObj.shape.split('-')[0] === 'crop') {
            this.okBtn();
        }
    };
    ImageEditor.prototype.renderAnnotationBtn = function () {
        var _this = this;
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var proxy = this;
        var items = [];
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Pen') > -1)) {
            items.push({ text: this.l10n.getConstant('Pen'), id: 'pen', iconCss: 'e-icons e-free-pen' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Line') > -1)) {
            items.push({ text: this.l10n.getConstant('Line'), id: 'line', iconCss: 'e-icons e-line' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Rectangle') > -1)) {
            items.push({ text: this.l10n.getConstant('Rectangle'), id: 'rectangle', iconCss: 'e-icons e-rectangle' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Ellipse') > -1)) {
            items.push({ text: this.l10n.getConstant('Ellipse'), id: 'ellipse', iconCss: 'e-icons e-circle' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Text') > -1)) {
            items.push({ text: this.l10n.getConstant('Text'), id: 'text', iconCss: 'e-icons e-add-text' });
        }
        var drpDownBtn = new DropDownButton({ items: items, iconCss: 'e-icons e-annotation',
            cssClass: 'e-image-popup',
            open: function (args) {
                if (_this.currObjType.isUndoAction) {
                    _this.refreshUndoRedoColl();
                }
                if (Browser.isDevice) {
                    args.element.parentElement.style.top = drpDownBtn.element.getBoundingClientRect().top -
                        args.element.parentElement.offsetHeight + 'px';
                }
            },
            select: function (args) {
                _this.cropSelectedState();
                var isCropSelection = false;
                var splitWords;
                if (_this.activeObj.shape !== undefined) {
                    splitWords = _this.activeObj.shape.split('-');
                }
                if (splitWords === undefined && _this.currObjType.isCustomCrop) {
                    isCropSelection = true;
                }
                else if (splitWords !== undefined && splitWords[0] === 'crop') {
                    isCropSelection = true;
                }
                _this.currObjType.isCustomCrop = false;
                if (isCropSelection || _this.togglePan) {
                    _this.refreshActiveObj();
                    _this.upperContext.clearRect(0, 0, _this.upperCanvas.width, _this.upperCanvas.height);
                    _this.refreshToolbar('main');
                }
                switch (args.item.id) {
                    case 'pen':
                        proxy.tempFreehandCounter = proxy.freehandCounter;
                        proxy.tempCurrentFreehandDrawIndex = proxy.currentFreehandDrawIndex;
                        proxy.currentToolbar = 'pen';
                        _this.freeHandDraw(true);
                        break;
                    case 'text':
                        proxy.currentToolbar = 'text';
                        _this.drawShapeText();
                        break;
                    default:
                        proxy.currentToolbar = 'shapes';
                        proxy.drawShape((args.item.id).toLowerCase());
                        break;
                }
                _this.updateToolbarItems();
            }
        });
        // Render initialized DropDownButton.
        drpDownBtn.appendTo('#' + this.element.id + '_annotationBtn');
    };
    ImageEditor.prototype.renderCropBtn = function () {
        var _this = this;
        var items = [];
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('CustomSelection') > -1)) {
            items.push({ text: this.l10n.getConstant('Custom'), id: 'custom', iconCss: 'e-icons e-custom' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('CircleSelection') > -1)) {
            items.push({ text: this.l10n.getConstant('Circle'), id: 'circle', iconCss: 'e-icons e-circle' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('SquareSelection') > -1)) {
            items.push({ text: this.l10n.getConstant('Square'), id: 'square', iconCss: 'e-icons e-square' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('RatioSelection') > -1)) {
            items.push({ text: '3:2', id: '3:2', iconCss: 'e-icons e-custom-a' });
            items.push({ text: '4:3', id: '4:3', iconCss: 'e-icons e-custom-b' });
            items.push({ text: '5:4', id: '5:4', iconCss: 'e-icons e-custom-c' });
            items.push({ text: '7:5', id: '7:5', iconCss: 'e-icons e-custom-d' });
            items.push({ text: '16:9', id: '16:9', iconCss: 'e-icons e-custom-e' });
        }
        var drpDownBtn = new DropDownButton({
            open: function (args) {
                if (_this.currObjType.isUndoAction) {
                    _this.refreshUndoRedoColl();
                }
                if (_this.togglePan) {
                    _this.cancelPan();
                }
                if (Browser.isDevice) {
                    args.element.parentElement.style.top = drpDownBtn.element.getBoundingClientRect().top -
                        args.element.parentElement.offsetHeight + 'px';
                }
                if (!isNullOrUndefined(_this.activeObj.shape) && _this.activeObj.shape.split('-').length > 1) {
                    document.getElementById(_this.activeObj.shape.split('-')[1]).classList.add('e-selected');
                }
            },
            items: items, select: this.cropSelect.bind(this),
            iconCss: 'e-icons e-select', cssClass: 'e-image-popup'
        });
        drpDownBtn.appendTo('#' + this.element.id + '_cropBtn');
    };
    ImageEditor.prototype.renderTransformBtn = function () {
        var _this = this;
        var items = [];
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('RotateLeft') > -1)) {
            items.push({ text: this.l10n.getConstant('RotateLeft'), id: 'rotateleft', iconCss: 'e-icons e-anti-clock-wise' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('RotateRight') > -1)) {
            items.push({ text: this.l10n.getConstant('RotateRight'), id: 'rotateright', iconCss: 'e-icons e-clock-wise' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('FlipHorizontal') > -1)) {
            items.push({ text: this.l10n.getConstant('HorizontalFlip'), id: 'horizontalflip', iconCss: 'e-icons e-horizontal-flip' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('FlipVertical') > -1)) {
            items.push({ text: this.l10n.getConstant('VerticalFlip'), id: 'verticalflip', iconCss: 'e-icons e-vertical-flip' });
        }
        var drpDownBtn = new DropDownButton({
            open: function (args) {
                if (_this.currObjType.isUndoAction) {
                    _this.refreshUndoRedoColl();
                }
                if (Browser.isDevice) {
                    var ht = args.element.parentElement.offsetHeight;
                    args.element.parentElement.style.display = 'none';
                    args.element.parentElement.style.top = drpDownBtn.element.getBoundingClientRect().top -
                        ht + 'px';
                    args.element.parentElement.style.display = 'block';
                }
            },
            items: items, select: this.transformSelect.bind(this),
            iconCss: 'e-icons e-transform', cssClass: 'e-image-popup'
        });
        drpDownBtn.appendTo('#' + this.element.id + '_transformBtn');
    };
    ImageEditor.prototype.renderSaveBtn = function () {
        var imageEditorObj = getInstance(document.getElementById(this.element.id), ImageEditor_1);
        var saveItems = [
            { text: 'JPEG', id: 'jpeg' },
            { text: 'PNG', id: 'png' },
            { text: 'SVG', id: 'svg' }
        ];
        var ddbElem = document.getElementById(this.element.id + '_saveBtn');
        if (ddbElem) {
            // Initialize the DropDownButton component.
            var saveDrpDownBtn = new DropDownButton({ items: saveItems, cssClass: 'e-caret-hide e-image-popup', iconCss: 'e-icons e-save',
                select: function (args) {
                    imageEditorObj.export(args.item.text);
                }
            });
            saveDrpDownBtn.appendTo('#' + this.element.id + '_saveBtn');
        }
    };
    ImageEditor.prototype.cropSelect = function (args) {
        this.isCropTab = true;
        this.zoomFactor = this.cropZoomFactor;
        var prevCropObj = extend({}, this.cropObj, {}, true);
        var previousObj = this.getCurrentObj();
        previousObj.objColl = extend([], this.objColl, [], true);
        previousObj.pointColl = extend([], this.pointColl, [], true);
        previousObj.afterCropActions = this.afterCropActions;
        var text = args.item.id;
        this.currentToolbar = 'crop';
        this.currSelectionPoint = null;
        this.select(text);
        this.refreshToolbar('main', true, true);
        this.refreshDropDownBtn(true);
        this.updateUndoRedoColl('selectionTransform', previousObj, previousObj.objColl, previousObj.pointColl, prevCropObj);
        this.enableDisableToolbarBtn();
    };
    ImageEditor.prototype.transformSelect = function (args) {
        this.cropSelectedState();
        this.currentSelectionPoint = null;
        this.performTransformation(args.item.id);
    };
    ImageEditor.prototype.performTransformation = function (text) {
        var tempZoomFactor = this.defaultZoomFactor;
        var isUndoRedo = this.isUndoRedo;
        var prevCropObj = extend({}, this.cropObj, {}, true);
        if (this.defaultZoomFactor !== 0) {
            this.transformCurrentObj = this.getCurrentObj();
            this.transformCurrentObj.objColl = extend([], this.objColl, null, true);
            this.transformCurrentObj.pointColl = extend({}, this.pointColl, null, true);
            this.transformCurrentObj.afterCropActions = extend([], this.afterCropActions, [], true);
            this.isUndoRedo = true;
            if (this.defaultZoomFactor > 0) {
                this.zoom(-this.defaultZoomFactor);
            }
            else {
                this.zoom(Math.abs(this.defaultZoomFactor));
            }
            this.isUndoRedo = isUndoRedo;
        }
        this.updateTransform(text);
        if (tempZoomFactor !== 0) {
            this.isUndoRedo = true;
            this.zoom(tempZoomFactor);
            this.isUndoRedo = isUndoRedo;
            var state = '';
            if (text === 'rotateleft' || text === 'rotateright') {
                state = 'rotate';
            }
            else if (text === 'horizontalflip' || text === 'verticalflip') {
                state = 'flip';
            }
            this.updateUndoRedoColl(state, this.transformCurrentObj, this.transformCurrentObj.objColl, this.transformCurrentObj.pointColl, prevCropObj);
            this.transformCurrentObj = null;
        }
    };
    ImageEditor.prototype.updateTransform = function (text) {
        switch (text.toLowerCase()) {
            case 'rotateleft':
                this.rotate(-90);
                break;
            case 'rotateright':
                this.rotate(90);
                break;
            case 'horizontalflip':
                this.flip('Horizontal');
                break;
            case 'verticalflip':
                this.flip('Vertical');
                break;
        }
    };
    ImageEditor.prototype.getShapesToolbarItem = function (items) {
        var toolbarItems = [];
        if (items.indexOf('fillColor') > -1) {
            toolbarItems.push({ prefixIcon: 'e-icons e-copy', id: this.element.id + '_fillcolor',
                cssClass: 'top-icon e-fill', tooltipText: this.l10n.getConstant('FillColor'), align: 'Center', type: 'Input',
                template: '<button id="' + this.element.id + '_fillColorBtn"></button>' });
        }
        if (items.indexOf('strokeColor') > -1) {
            toolbarItems.push({ prefixIcon: 'e-icons e-copy', id: this.element.id + '_strokecolor',
                cssClass: 'top-icon e-stroke', tooltipText: this.l10n.getConstant('StrokeColor'), align: 'Center', type: 'Input',
                template: '<button id="' + this.element.id + '_borderColorBtn"></button>' });
        }
        if (items.indexOf('strokeWidth') > -1) {
            toolbarItems.push({ id: this.element.id + '_strokeWidth', cssClass: 'top-icon e-size', tooltipText: 'Stroke Width', align: 'Center',
                type: 'Input', template: '<button id="' + this.element.id + '_borderWidthBtn"></button>' });
        }
        var tempToolbarItems = this.processSubToolbar(items);
        for (var i = 0, len = tempToolbarItems.length; i < len; i++) {
            toolbarItems.push(tempToolbarItems[i]);
        }
        if (!Browser.isDevice) {
            toolbarItems.push({ id: this.element.id + '_ok', prefixIcon: 'e-icons e-check', cssClass: 'top-icon e-tick',
                tooltipText: this.l10n.getConstant('OK'), align: 'Right' });
            toolbarItems.push({ id: this.element.id + '_cancel', prefixIcon: 'e-icons e-close', cssClass: 'top-icon e-save',
                tooltipText: this.l10n.getConstant('Cancel'), align: 'Right' });
        }
        return toolbarItems;
    };
    ImageEditor.prototype.initShapesToolbarItem = function (items) {
        var _this = this;
        var leftItem = this.getLeftToolbarItem();
        var rightItem = this.getRightToolbarItem();
        var mainItem = this.getShapesToolbarItem(items);
        var zoomItem = this.getZoomToolbarItem();
        if (Browser.isDevice) {
            this.defToolbarItems = mainItem;
        }
        else {
            this.defToolbarItems = leftItem.concat(zoomItem, mainItem, rightItem);
        }
        var toolbar = new Toolbar({
            width: '100%',
            items: this.defToolbarItems,
            clicked: this.defToolbarClicked.bind(this),
            created: function () {
                _this.createShapeColor(items);
                _this.createShapeBtn(items);
                if (!Browser.isDevice) {
                    _this.renderSaveBtn();
                }
                _this.trigger('toolbarCreated', { toolbarType: 'shapes' });
                if (Browser.isDevice) {
                    if (_this.defToolbarItems.length > 0 && (!isNullOrUndefined(document.getElementById(_this.element.id + '_bottomToolbar')))) {
                        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                        toolbar.refreshOverflow();
                    }
                }
                else {
                    _this.createLeftToolbarControls();
                    if (_this.defToolbarItems.length > 0 && (!isNullOrUndefined(document.getElementById(_this.element.id + '_toolbar')))) {
                        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                        toolbar.refreshOverflow();
                    }
                }
            }
        });
        if (Browser.isDevice) {
            toolbar.appendTo('#' + this.element.id + '_bottomToolbar');
        }
        else {
            toolbar.appendTo('#' + this.element.id + '_toolbar');
        }
        this.enableDisableToolbarBtn();
    };
    ImageEditor.prototype.createShapeColor = function (items) {
        var _this = this;
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var proxy = this;
        if (items.indexOf('fillColor') > -1) {
            this.element.querySelector('.e-template.e-fill').appendChild(this.createElement('input', {
                id: this.element.id + '_shape_fill'
            }));
            var fillColor = new ColorPicker({
                modeSwitcher: false, noColor: true, value: '',
                showButtons: false, mode: 'Palette', cssClass: 'e-shape-fill-color',
                change: function (args) {
                    _this.pushActItemIntoObj();
                    var prevCropObj = extend({}, _this.cropObj, {}, true);
                    var prevObj = _this.getCurrentObj();
                    prevObj.objColl = extend([], _this.objColl, [], true);
                    prevObj.pointColl = extend([], _this.pointColl, [], true);
                    prevObj.afterCropActions = extend([], _this.afterCropActions, [], true);
                    _this.objColl.pop();
                    proxy.activeObj.strokeSettings.fillColor = args.currentValue.hex;
                    proxy.strokeSettings.fillColor = proxy.activeObj.strokeSettings.fillColor;
                    _this.objColl.push(_this.activeObj);
                    _this.updateUndoRedoColl('shapeTransform', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
                    proxy.redrawShape(proxy.objColl[proxy.objColl.length - 1]);
                    if (args.currentValue.rgba === '') {
                        fillDDB_1.element.children[0].classList.add('e-nocolor-item');
                    }
                    else {
                        fillDDB_1.element.children[0].classList.remove('e-nocolor-item');
                        fillDDB_1.element.children[0].style.backgroundColor = args.currentValue.rgba;
                    }
                    fillDDB_1.toggle();
                }
            }, '#' + this.element.id + '_shape_fill');
            var fillDDB_1 = new DropDownButton({
                open: function (args) {
                    if (Browser.isDevice) {
                        args.element.parentElement.style.top = fillDDB_1.element.getBoundingClientRect().top -
                            args.element.parentElement.offsetHeight + 'px';
                        args.element.parentElement.style.left = _this.element.offsetLeft + 'px';
                    }
                },
                target: '.e-shape-fill-color',
                iconCss: 'e-dropdownbtn-preview'
            }, '#' + this.element.id + '_fillColorBtn');
            fillColor.inline = true;
            this.element.querySelector('.e-fill.e-template .e-dropdownbtn-preview').classList.add('e-nocolor-item');
        }
        if (items.indexOf('strokeColor') > -1) {
            this.element.querySelector('.e-template.e-stroke').appendChild(this.createElement('input', {
                id: this.element.id + '_shape_stroke'
            }));
            var strokeColor = new ColorPicker({
                modeSwitcher: false, noColor: false, value: '#fff',
                showButtons: false, mode: 'Palette', cssClass: 'e-shape-stroke-color',
                change: function (args) {
                    _this.pushActItemIntoObj();
                    var prevCropObj = extend({}, _this.cropObj, {}, true);
                    var prevObj = _this.getCurrentObj();
                    prevObj.objColl = extend([], _this.objColl, [], true);
                    prevObj.pointColl = extend([], _this.pointColl, [], true);
                    prevObj.afterCropActions = extend([], _this.afterCropActions, [], true);
                    _this.objColl.pop();
                    proxy.activeObj.strokeSettings.strokeColor = args.currentValue.hex;
                    proxy.strokeSettings.strokeColor = proxy.activeObj.strokeSettings.strokeColor;
                    if (!proxy.togglePen) {
                        _this.objColl.push(_this.activeObj);
                        proxy.updateUndoRedoColl('shapeTransform', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
                        proxy.redrawShape(proxy.objColl[proxy.objColl.length - 1]);
                    }
                    strokeDDB_1.element.children[0].style.backgroundColor = args.currentValue.rgba;
                    strokeDDB_1.toggle();
                }
            }, '#' + this.element.id + '_shape_stroke');
            var strokeDDB_1 = new DropDownButton({
                open: function (args) {
                    if (Browser.isDevice) {
                        args.element.parentElement.style.top = strokeDDB_1.element.getBoundingClientRect().top -
                            args.element.parentElement.offsetHeight + 'px';
                        args.element.parentElement.style.left = _this.element.offsetLeft + 'px';
                    }
                },
                target: '.e-shape-stroke-color',
                iconCss: 'e-dropdownbtn-preview'
            }, '#' + this.element.id + '_borderColorBtn');
            strokeColor.inline = true;
            this.element.querySelector('.e-stroke.e-template .e-dropdownbtn-preview').style.background = '#fff';
        }
    };
    ImageEditor.prototype.createShapeBtn = function (items) {
        var _this = this;
        var strokeWidthItems = [
            { id: '1', text: this.l10n.getConstant('XSmall') },
            { id: '2', text: this.l10n.getConstant('Small') },
            { id: '3', text: this.l10n.getConstant('Medium') },
            { id: '4', text: this.l10n.getConstant('Large') },
            { id: '5', text: this.l10n.getConstant('XLarge') }
        ];
        if (items.indexOf('strokeWidth') > -1) {
            var strokeWidthBtn = document.getElementById(this.element.id + '_borderWidthBtn');
            var spanElem_1 = document.createElement('span');
            spanElem_1.innerHTML = this.l10n.getConstant('Small');
            spanElem_1.className = 'e-shape-stroke-width';
            strokeWidthBtn.appendChild(spanElem_1);
            // Initialize the DropDownButton component.
            var drpDownBtn_1 = new DropDownButton({ items: strokeWidthItems,
                open: function (args) {
                    if (Browser.isDevice) {
                        args.element.parentElement.style.top = drpDownBtn_1.element.getBoundingClientRect().top -
                            args.element.parentElement.offsetHeight + 'px';
                    }
                    var activeBtn = spanElem_1.innerHTML;
                    if (activeBtn !== '') {
                        args.element.querySelector('[aria-label = ' + '"' + activeBtn + '"' + ']').classList.add('e-selected-btn');
                    }
                },
                select: function (args) {
                    _this.pushActItemIntoObj();
                    var prevCropObj = extend({}, _this.cropObj, {}, true);
                    var prevObj = _this.getCurrentObj();
                    prevObj.objColl = extend([], _this.objColl, [], true);
                    prevObj.pointColl = extend([], _this.pointColl, [], true);
                    prevObj.afterCropActions = extend([], _this.afterCropActions, [], true);
                    _this.objColl.pop();
                    spanElem_1.textContent = args.item.text;
                    _this.activeObj.strokeSettings.strokeWidth = parseInt(args.item.id, 10);
                    _this.activeObj.strokeSettings.strokeWidth *= 2;
                    _this.strokeSettings.strokeWidth = _this.activeObj.strokeSettings.strokeWidth;
                    _this.objColl.push(_this.activeObj);
                    _this.updateUndoRedoColl('shapeTransform', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
                    _this.redrawShape(_this.objColl[_this.objColl.length - 1]);
                    if (Browser.isDevice) {
                        if (!isNullOrUndefined(document.getElementById(_this.element.id + '_bottomToolbar'))) {
                            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                            var toolbar_5 = getComponent(_this.element.id + '_bottomToolbar', 'toolbar');
                            toolbar_5.refreshOverflow();
                        }
                    }
                    else {
                        if (!isNullOrUndefined(document.getElementById(_this.element.id + '_toolbar'))) {
                            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                            var toolbar_6 = getComponent(_this.element.id + '_toolbar', 'toolbar');
                            toolbar_6.refreshOverflow();
                        }
                    }
                }
            });
            // Render initialized DropDownButton.
            drpDownBtn_1.appendTo('#' + this.element.id + '_borderWidthBtn');
        }
    };
    ImageEditor.prototype.getTextToolbarItem = function (items) {
        var toolbarItems = [];
        if (items.indexOf('fontFamily') > -1) {
            toolbarItems.push({ id: this.element.id + '_fontFamily', cssClass: 'top-icon e-img-font-family',
                tooltipText: this.l10n.getConstant('FontFamily'), align: 'Center',
                template: '<button id="' + this.element.id + '_fontFamilyBtn"></button>' });
        }
        if (items.indexOf('fontStyle') > -1) {
            toolbarItems.push({ id: this.element.id + '_fontStyle', cssClass: 'top-icon e-img-font-style',
                tooltipText: this.l10n.getConstant('FontStyle'), align: 'Center',
                template: '<button id="' + this.element.id + '_fontStyleBtn"></button>' });
        }
        if (items.indexOf('fontSize') > -1) {
            toolbarItems.push({ id: this.element.id + '_fontSize', cssClass: 'top-icon e-img-font-size',
                tooltipText: this.l10n.getConstant('FontSize'), align: 'Center',
                template: '<button id="' + this.element.id + '_fontSizeBtn"></button>' });
        }
        if (items.indexOf('fontColor') > -1) {
            toolbarItems.push({ cssClass: 'top-icon e-text-font-color', id: this.element.id + '_text_strokecolor',
                tooltipText: this.l10n.getConstant('FontColor'), align: 'Center',
                type: 'Input', template: '<button id="' + this.element.id + '_fontColorBtn"></button>' });
        }
        var tempToolbarItems = this.processSubToolbar(items);
        for (var i = 0, len = tempToolbarItems.length; i < len; i++) {
            toolbarItems.push(tempToolbarItems[i]);
        }
        if (!Browser.isDevice) {
            toolbarItems.push({ id: this.element.id + '_ok', prefixIcon: 'e-icons e-check', cssClass: 'top-icon e-tick',
                tooltipText: this.l10n.getConstant('OK'), align: 'Right' });
            toolbarItems.push({ id: this.element.id + '_cancel', prefixIcon: 'e-icons e-close', cssClass: 'top-icon e-save',
                tooltipText: this.l10n.getConstant('Cancel'), align: 'Right' });
        }
        return toolbarItems;
    };
    ImageEditor.prototype.getFontFamilyItems = function () {
        if (Browser.isDevice) {
            return [{ id: 'arial', text: 'ABC' }, { id: 'calibri', text: 'ABC' }, { id: 'georgia', text: 'ABC' },
                { id: 'roboto', text: 'ABC' }, { id: 'tahoma', text: 'ABC' }];
        }
        return [{ id: 'arial', text: 'Arial' }, { id: 'calibri', text: 'Calibri' }, { id: 'georgia', text: 'Georgia' },
            { id: 'roboto', text: 'Roboto' }, { id: 'tahoma', text: 'Tahoma' }];
    };
    ImageEditor.prototype.getFontSizeItems = function () {
        if (Browser.isDevice) {
            return [{ id: 'default', text: this.l10n.getConstant('ABC') }, { id: 'bold', text: this.l10n.getConstant('ABC') },
                { id: 'italic', text: this.l10n.getConstant('ABC') }, { id: 'bolditalic', text: this.l10n.getConstant('ABC') }];
        }
        return [{ id: 'default', text: this.l10n.getConstant('Default') }, { id: 'bold', text: this.l10n.getConstant('Bold') },
            { id: 'italic', text: this.l10n.getConstant('Italic') }, { id: 'bolditalic', text: this.l10n.getConstant('BoldItalic') }];
    };
    ImageEditor.prototype.initTextToolbarItem = function (items) {
        var _this = this;
        var leftItem = this.getLeftToolbarItem();
        var rightItem = this.getRightToolbarItem();
        var mainItem = this.getTextToolbarItem(items);
        var zoomItem = this.getZoomToolbarItem();
        if (Browser.isDevice) {
            this.defToolbarItems = mainItem;
        }
        else {
            this.defToolbarItems = leftItem.concat(zoomItem, mainItem, rightItem);
        }
        var toolbar = new Toolbar({
            width: '100%',
            items: this.defToolbarItems,
            clicked: this.defToolbarClicked.bind(this),
            created: function () {
                _this.createTextColor(items);
                _this.createTextBtn(items);
                if (!Browser.isDevice) {
                    _this.renderSaveBtn();
                }
                _this.trigger('toolbarCreated', { toolbarType: 'text' });
                if (Browser.isDevice) {
                    if (_this.defToolbarItems.length > 0 && (!isNullOrUndefined(document.getElementById(_this.element.id + '_bottomToolbar')))) {
                        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                        toolbar.refreshOverflow();
                    }
                }
                else {
                    _this.createLeftToolbarControls();
                    if (_this.defToolbarItems.length > 0 && (!isNullOrUndefined(document.getElementById(_this.element.id + '_toolbar')))) {
                        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                        toolbar.refreshOverflow();
                    }
                }
            }
        });
        if (Browser.isDevice) {
            toolbar.appendTo('#' + this.element.id + '_bottomToolbar');
        }
        else {
            toolbar.appendTo('#' + this.element.id + '_toolbar');
        }
        this.enableDisableToolbarBtn();
    };
    ImageEditor.prototype.createTextColor = function (items) {
        var _this = this;
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var proxy = this;
        if (items.indexOf('fontColor') > -1) {
            this.element.querySelector('.e-template.e-text-font-color').appendChild(this.createElement('input', {
                id: this.element.id + '_text_font'
            }));
            var fontColor = new ColorPicker({
                modeSwitcher: false, value: '#fff',
                showButtons: false, mode: 'Palette', cssClass: 'e-text-fontt-color',
                change: function (args) {
                    _this.pushActItemIntoObj();
                    var prevCropObj = extend({}, _this.cropObj, {}, true);
                    var prevObj = _this.getCurrentObj();
                    prevObj.objColl = extend([], _this.objColl, [], true);
                    prevObj.pointColl = extend([], _this.pointColl, [], true);
                    prevObj.afterCropActions = extend([], _this.afterCropActions, [], true);
                    _this.objColl.pop();
                    if (proxy.textArea.style.display === 'none') {
                        proxy.strokeSettings.strokeColor = proxy.activeObj.strokeSettings.strokeColor = args.currentValue.hex;
                        if (!proxy.togglePen) {
                            _this.objColl.push(_this.activeObj);
                            proxy.updateUndoRedoColl('shapeTransform', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
                            proxy.redrawShape(proxy.objColl[proxy.objColl.length - 1]);
                        }
                    }
                    else if (proxy.textArea.style.display === 'block') {
                        proxy.textArea.style.color = args.currentValue.hex;
                        var temp = proxy.activeObj.strokeSettings.strokeColor;
                        proxy.activeObj.strokeSettings.strokeColor = args.currentValue.hex;
                        _this.objColl.push(_this.activeObj);
                        _this.updateUndoRedoColl('textAreaCustomization', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
                        _this.objColl.pop();
                        proxy.activeObj.strokeSettings.strokeColor = temp;
                    }
                    else if (!proxy.togglePen) {
                        _this.objColl.push(_this.activeObj);
                        _this.updateUndoRedoColl('shapeTransform', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
                        proxy.redrawShape(proxy.objColl[proxy.objColl.length - 1]);
                    }
                    strokeDDB_2.element.children[0].style.backgroundColor = args.currentValue.rgba;
                    strokeDDB_2.toggle();
                }
            }, '#' + this.element.id + '_text_font');
            var strokeDDB_2 = new DropDownButton({
                open: function (args) {
                    if (Browser.isDevice) {
                        args.element.parentElement.style.top = strokeDDB_2.element.getBoundingClientRect().top -
                            args.element.parentElement.offsetHeight + 'px';
                        args.element.parentElement.style.left = _this.element.offsetLeft + 'px';
                    }
                },
                target: '.e-text-fontt-color',
                iconCss: 'e-dropdownbtn-preview'
            }, '#' + this.element.id + '_fontColorBtn');
            fontColor.inline = true;
            this.element.querySelector('.e-text-font-color.e-template .e-dropdownbtn-preview').style.background
                = '#fff';
        }
    };
    ImageEditor.prototype.pushActItemIntoObj = function () {
        if (this.textArea.style.display === 'none') {
            this.objColl.push(this.activeObj);
        }
        else {
            var temp = extend({}, this.activeObj, {}, true);
            this.setTextBoxStylesToActObj();
            this.objColl.push(this.activeObj);
            this.activeObj = temp;
        }
    };
    ImageEditor.prototype.createTextBtn = function (items) {
        var _this = this;
        if (items.indexOf('fontFamily') > -1) {
            var fontNameBtn = document.getElementById(this.element.id + '_fontFamilyBtn');
            var spanElem_2 = document.createElement('span');
            if (Browser.isDevice) {
                spanElem_2.innerHTML = 'ABC';
                spanElem_2.setAttribute('style', 'font-family: arial');
            }
            else {
                spanElem_2.innerHTML = 'Arial';
            }
            spanElem_2.className = 'e-text-font-family';
            fontNameBtn.appendChild(spanElem_2);
            var fontFamilyBtn_1 = new DropDownButton({ items: this.getFontFamilyItems(),
                cssClass: 'e-font-family',
                createPopupOnClick: true,
                beforeItemRender: function (args) {
                    args.element.setAttribute('style', 'font-family:' + args.element.id);
                },
                open: function (args) {
                    if (Browser.isDevice) {
                        args.element.parentElement.style.top = fontFamilyBtn_1.element.getBoundingClientRect().top -
                            args.element.parentElement.offsetHeight + 'px';
                    }
                    var fontFamily;
                    if (_this.textArea.style.display === 'block') {
                        fontFamily = _this.textArea.style.fontFamily;
                    }
                    else {
                        fontFamily = _this.activeObj.textSettings.fontFamily;
                    }
                    args.element.querySelector('[id *= ' + '"' + fontFamily.toLowerCase()
                        + '"' + ']').classList.add('e-selected-btn');
                },
                select: function (args) {
                    _this.pushActItemIntoObj();
                    var objColl = extend([], _this.objColl, [], true);
                    var prevCropObj = extend({}, _this.cropObj, {}, true);
                    var prevObj = _this.getCurrentObj();
                    prevObj.objColl = extend([], _this.objColl, [], true);
                    prevObj.pointColl = extend([], _this.pointColl, [], true);
                    prevObj.afterCropActions = extend([], _this.afterCropActions, [], true);
                    _this.objColl.pop();
                    spanElem_2.textContent = args.item.text;
                    if (Browser.isDevice) {
                        spanElem_2.setAttribute('style', 'font-family:' + args.item.id);
                    }
                    if (_this.textArea.style.display === 'block') {
                        _this.updateFontRatio(_this.activeObj, true);
                        var temp = _this.activeObj.textSettings.fontFamily;
                        _this.activeObj.textSettings.fontFamily = _this.toPascalCase(args.item.id);
                        _this.redrawText();
                        _this.objColl.push(_this.activeObj);
                        _this.updateUndoRedoColl('textAreaCustomization', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
                        _this.objColl.pop();
                        _this.upperContext.clearRect(0, 0, _this.upperCanvas.width, _this.upperCanvas.height);
                        var width = _this.activeObj.activePoint.width +
                            _this.activeObj.textSettings.fontSize * 0.25;
                        _this.textArea.style.width = width + 'px';
                        _this.textArea.style.fontFamily = _this.toPascalCase(args.item.id);
                        _this.activeObj.textSettings.fontFamily = temp;
                        _this.updateFontStyles();
                    }
                    else {
                        _this.updateFontRatio(_this.activeObj);
                        _this.textSettings.fontFamily = _this.activeObj.textSettings.fontFamily = _this.toPascalCase(args.item.id);
                        _this.redrawText();
                        _this.objColl.push(_this.activeObj);
                        _this.updateUndoRedoColl('shapeTransform', prevObj, objColl, extend([], _this.pointColl, [], true), prevCropObj);
                        _this.redrawShape(_this.objColl[_this.objColl.length - 1]);
                    }
                }
            });
            fontFamilyBtn_1.appendTo('#' + this.element.id + '_fontFamilyBtn');
        }
        if (items.indexOf('fontStyle') > -1) {
            var fontStyleBtnElem = document.getElementById(this.element.id + '_fontStyleBtn');
            var span1Elem_1 = document.createElement('span');
            if (Browser.isDevice) {
                span1Elem_1.innerHTML = this.l10n.getConstant('ABC');
            }
            else {
                span1Elem_1.innerHTML = this.l10n.getConstant('Default');
            }
            span1Elem_1.className = 'e-text-font-style';
            fontStyleBtnElem.appendChild(span1Elem_1);
            var fontStyleBtn_1 = new DropDownButton({ items: this.getFontSizeItems(),
                cssClass: 'e-font-style',
                createPopupOnClick: true,
                beforeItemRender: function (args) {
                    if (Browser.isDevice) {
                        if (args.element.id === 'bold') {
                            args.element.setAttribute('style', 'font-weight: bold');
                        }
                        else if (args.element.id === 'italic') {
                            args.element.setAttribute('style', 'font-style: italic');
                        }
                        else if (args.element.id === 'bolditalic') {
                            args.element.setAttribute('style', 'font-style: italic;font-weight: bold');
                        }
                    }
                },
                open: function (args) {
                    var fontStyle = 'default';
                    if (_this.textArea.style.display === 'block') {
                        if (_this.textArea.style.fontWeight === 'bold') {
                            fontStyle = 'bold';
                        }
                        if (_this.textArea.style.fontStyle === 'italic') {
                            fontStyle = fontStyle.replace('default', '');
                            fontStyle += 'italic';
                        }
                    }
                    else {
                        if (_this.activeObj.textSettings.bold) {
                            fontStyle = 'bold';
                        }
                        if (_this.activeObj.textSettings.italic) {
                            fontStyle = fontStyle.replace('default', '');
                            fontStyle += 'italic';
                        }
                    }
                    if (Browser.isDevice) {
                        args.element.parentElement.style.top = fontStyleBtn_1.element.getBoundingClientRect().top -
                            args.element.parentElement.offsetHeight + 'px';
                    }
                    args.element.querySelector('[id *= ' + '"' + fontStyle + '"' + ']').classList.add('e-selected-btn');
                },
                select: function (args) {
                    if (Browser.isDevice) {
                        if (args.item.id === 'bold') {
                            span1Elem_1.setAttribute('style', 'font-weight: bold');
                        }
                        else if (args.item.id === 'italic') {
                            span1Elem_1.setAttribute('style', 'font-style: italic');
                        }
                        else if (args.item.id === 'bolditalic') {
                            span1Elem_1.setAttribute('style', 'font-style: italic;font-weight: bold');
                        }
                        _this.applyFontStyle(args.item.id);
                    }
                    else {
                        span1Elem_1.textContent = args.item.text;
                        _this.applyFontStyle(args.item.id);
                    }
                }
            });
            fontStyleBtn_1.appendTo('#' + this.element.id + '_fontStyleBtn');
        }
        if (items.indexOf('fontSize') > -1) {
            var fontSizeBtnElem = document.getElementById(this.element.id + '_fontSizeBtn');
            var fontSizeSpanElem_1 = document.createElement('span');
            var fontSizes = this.getFontSizes();
            fontSizeSpanElem_1.innerHTML = fontSizes[0].text;
            fontSizeSpanElem_1.className = 'e-text-font-size';
            fontSizeBtnElem.appendChild(fontSizeSpanElem_1);
            var fontSizeBtn_1 = new DropDownButton({
                cssClass: 'e-font-size',
                items: fontSizes,
                open: function (args) {
                    if (Browser.isDevice) {
                        args.element.parentElement.style.top = fontSizeBtn_1.element.getBoundingClientRect().top -
                            args.element.parentElement.offsetHeight + 'px';
                    }
                    var activeBtn = fontSizeSpanElem_1.innerHTML;
                    args.element.querySelector('[aria-label *= ' + '"' + activeBtn + '"' + ']').classList.add('e-selected-btn');
                },
                select: function (args) {
                    _this.pushActItemIntoObj();
                    var prevCropObj = extend({}, _this.cropObj, {}, true);
                    var prevObj = _this.getCurrentObj();
                    prevObj.objColl = extend([], _this.objColl, [], true);
                    prevObj.pointColl = extend([], _this.pointColl, [], true);
                    prevObj.afterCropActions = extend([], _this.afterCropActions, [], true);
                    _this.objColl.pop();
                    fontSizeSpanElem_1.textContent = args.item.text;
                    if (_this.textArea.style.display === 'block') {
                        _this.updateFontRatio(_this.activeObj, true);
                        var temp = _this.activeObj.textSettings.fontSize;
                        _this.activeObj.textSettings.fontSize = parseInt(_this.fontSizeColl[(parseInt(args.item.text, 10) - 1)].text, 10);
                        _this.objColl.push(_this.activeObj);
                        _this.updateUndoRedoColl('textAreaCustomization', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
                        _this.objColl.pop();
                        var textStyle = '';
                        if (_this.textArea.style.fontWeight === 'bold') {
                            textStyle = 'bold ';
                        }
                        if (_this.textArea.style.fontStyle === 'italic') {
                            textStyle = 'italic ';
                        }
                        if (_this.textArea.style.fontWeight === 'bold' && _this.textArea.style.fontStyle === 'italic') {
                            textStyle = 'italic bold ';
                        }
                        _this.upperContext.font = textStyle + _this.activeObj.textSettings.fontSize + 'px' + ' ' + _this.textArea.style.fontFamily;
                        var rows = _this.textArea.value.split('\n');
                        var text = _this.getMaxText(true);
                        var width = _this.upperContext.measureText(text).width +
                            _this.activeObj.textSettings.fontSize * 0.5;
                        _this.textArea.style.width = width + 'px';
                        _this.textArea.style.height = rows.length * (_this.activeObj.textSettings.fontSize + _this.activeObj.textSettings.fontSize * 0.25) + 'px';
                        _this.activeObj.textSettings.fontSize = temp;
                        _this.upperContext.font = _this.activeObj.textSettings.fontSize + 'px' + ' ' + _this.activeObj.textSettings.fontFamily;
                        _this.textArea.style.fontSize = parseInt(_this.fontSizeColl[(parseInt(args.item.text, 10) - 1)].text, 10) + 'px';
                        if (_this.textArea.style.fontFamily === 'georgia') {
                            _this.textArea.style.width = parseFloat(_this.textArea.style.width) + parseFloat(_this.textArea.style.fontSize) + 'px';
                        }
                    }
                    else {
                        _this.updateFontRatio(_this.activeObj);
                        _this.textSettings.fontSize = _this.activeObj.textSettings.fontSize = parseInt(_this.fontSizeColl[(parseInt(args.item.text, 10) - 1)].text, 10);
                        _this.upperContext.font = _this.activeObj.textSettings.fontSize + 'px' + ' ' + _this.activeObj.textSettings.fontFamily;
                        var rows = _this.activeObj.keyHistory.split('\n');
                        var text = _this.getMaxText();
                        var width = _this.upperContext.measureText(text).width +
                            _this.activeObj.textSettings.fontSize * 0.5;
                        var height = rows.length * (_this.activeObj.textSettings.fontSize +
                            _this.activeObj.textSettings.fontSize * 0.25);
                        _this.setTextSelection(width, height);
                        _this.updateActiveObject(_this.activeObj.activePoint, _this.activeObj);
                        _this.redrawText();
                        _this.objColl.push(_this.activeObj);
                        _this.updateUndoRedoColl('shapeTransform', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
                        _this.redrawShape(_this.objColl[_this.objColl.length - 1]);
                    }
                }
            });
            fontSizeBtn_1.appendTo('#' + this.element.id + '_fontSizeBtn');
        }
    };
    ImageEditor.prototype.getFontSizes = function () {
        var items = [];
        this.fontSizeColl = [];
        var fontSize;
        if (this.degree === 0 || this.degree % 180 === 0) {
            fontSize = this.destWidth / 25;
        }
        else {
            fontSize = this.destHeight / 25;
        }
        for (var i = 1; i <= 10; i++) {
            this.fontSizeColl.push({ text: (i * (Math.round(fontSize / 2))).toString() });
            items.push({ text: (i.toString()) });
        }
        return items;
    };
    ImageEditor.prototype.getTextAreaWidth = function (item) {
        var tempBold = this.activeObj.textSettings.bold;
        var tempItalic = this.activeObj.textSettings.italic;
        switch (item) {
            case 'default':
                this.activeObj.textSettings.bold = false;
                this.activeObj.textSettings.italic = false;
                break;
            case 'bold':
                this.activeObj.textSettings.bold = true;
                this.activeObj.textSettings.italic = false;
                break;
            case 'italic':
                this.activeObj.textSettings.bold = false;
                this.activeObj.textSettings.italic = true;
                break;
            case 'bolditalic':
                this.activeObj.textSettings.bold = true;
                this.activeObj.textSettings.italic = true;
                break;
        }
        this.updateFontStyles();
        var width;
        if (this.textArea.style.display === 'none') {
            width = this.upperContext.measureText(this.activeObj.keyHistory).width +
                this.activeObj.textSettings.fontSize * 0.5;
        }
        else {
            width = this.upperContext.measureText(this.textArea.value).width +
                this.activeObj.textSettings.fontSize * 0.5;
        }
        this.activeObj.textSettings.bold = tempBold;
        this.activeObj.textSettings.italic = tempItalic;
        return width;
    };
    ImageEditor.prototype.updateUndoRedoObj = function (objColl) {
        if (this.allowUndoRedo) {
            this.objColl.push(this.activeObj);
            var cropObj = extend({}, this.cropObj, {}, true);
            var obj = this.getCurrentObj();
            obj.objColl = extend([], this.objColl, [], true);
            obj.pointColl = extend([], this.pointColl, [], true);
            obj.afterCropActions = extend([], this.afterCropActions, [], true);
            this.undoRedoColl.push({ operation: 'shapeTransform', previousObj: obj, currentObj: obj,
                previousObjColl: objColl, currentObjColl: obj.objColl,
                previousPointColl: obj.pointColl, currentPointColl: obj.pointColl,
                previousCropObj: cropObj, currentCropObj: cropObj });
            this.undoRedoStep++;
            this.redrawShape(this.objColl[this.objColl.length - 1]);
        }
    };
    ImageEditor.prototype.updateObjColl = function (item, objColl) {
        var prevCropObj = extend({}, this.cropObj, {}, true);
        var prevObj = this.getCurrentObj();
        prevObj.objColl = extend([], this.objColl, [], true);
        prevObj.pointColl = extend([], this.pointColl, [], true);
        prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
        var tempBold = this.activeObj.textSettings.bold;
        var tempItalic = this.activeObj.textSettings.italic;
        switch (item) {
            case 'default':
                this.activeObj.textSettings.bold = false;
                this.activeObj.textSettings.italic = false;
                break;
            case 'bold':
                this.activeObj.textSettings.bold = true;
                this.activeObj.textSettings.italic = false;
                break;
            case 'italic':
                this.activeObj.textSettings.bold = false;
                this.activeObj.textSettings.italic = true;
                break;
            case 'bolditalic':
                this.activeObj.textSettings.bold = true;
                this.activeObj.textSettings.italic = true;
                break;
        }
        this.objColl.push(this.activeObj);
        this.updateUndoRedoColl('textAreaCustomization', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
        this.objColl.pop();
        this.activeObj.textSettings.bold = tempBold;
        this.activeObj.textSettings.italic = tempItalic;
    };
    ImageEditor.prototype.applyFontStyle = function (item) {
        this.pushActItemIntoObj();
        var objColl = extend([], this.objColl, [], true);
        this.objColl.pop();
        if (this.textArea.style.display === 'none') {
            this.updateFontRatio(this.activeObj);
        }
        else {
            this.updateFontRatio(this.activeObj, true);
        }
        switch (item) {
            case 'default':
                if (this.textArea.style.display === 'block') {
                    var width = this.getTextAreaWidth(item);
                    this.textArea.style.width = width + 'px';
                    this.textArea.style.fontWeight = 'normal';
                    this.textArea.style.fontStyle = 'normal';
                    this.updateObjColl(item, objColl);
                }
                else {
                    this.textSettings.bold = this.activeObj.textSettings.bold = false;
                    this.textSettings.italic = this.activeObj.textSettings.italic = false;
                    this.redrawText();
                    this.updateUndoRedoObj(objColl);
                }
                break;
            case 'bold':
                if (this.textArea.style.display === 'block') {
                    var width = this.getTextAreaWidth(item);
                    this.textArea.style.width = width + 'px';
                    this.textArea.style.fontWeight = 'bold';
                    this.textArea.style.fontStyle = 'normal';
                    this.updateObjColl(item, objColl);
                }
                else {
                    this.textSettings.bold = this.activeObj.textSettings.bold = true;
                    this.textSettings.italic = this.activeObj.textSettings.italic = false;
                    this.redrawText();
                    this.updateUndoRedoObj(objColl);
                }
                break;
            case 'italic':
                if (this.textArea.style.display === 'block') {
                    var width = this.getTextAreaWidth(item);
                    this.textArea.style.width = width + 'px';
                    this.textArea.style.fontWeight = 'normal';
                    this.textArea.style.fontStyle = 'italic';
                    this.updateObjColl(item, objColl);
                }
                else {
                    this.textSettings.bold = this.activeObj.textSettings.bold = false;
                    this.textSettings.italic = this.activeObj.textSettings.italic = true;
                    this.redrawText();
                    this.updateUndoRedoObj(objColl);
                }
                break;
            case 'bolditalic':
                if (this.textArea.style.display === 'block') {
                    var width = this.getTextAreaWidth(item);
                    this.textArea.style.width = width + 'px';
                    this.textArea.style.fontWeight = 'bold';
                    this.textArea.style.fontStyle = 'italic';
                    this.updateObjColl(item, objColl);
                }
                else {
                    this.textSettings.bold = this.activeObj.textSettings.bold = true;
                    this.textSettings.italic = this.activeObj.textSettings.italic = true;
                    this.redrawText();
                    this.updateUndoRedoObj(objColl);
                }
                break;
        }
    };
    ImageEditor.prototype.initZoomToolbarItem = function () {
        var _this = this;
        var leftItem = this.getLeftToolbarItem();
        var rightItem = this.getRightToolbarItem();
        var zoomItem = this.getZoomToolbarItem();
        this.defToolbarItems = leftItem.concat(zoomItem, rightItem);
        new Toolbar({
            width: '100%',
            items: this.defToolbarItems,
            clicked: this.defToolbarClicked.bind(this),
            created: function () {
                _this.renderSaveBtn();
                _this.trigger('toolbarCreated', { toolbarType: 'zoom' });
            }
        }, '#' + this.element.id + '_toolbar');
        this.createLeftToolbarControls();
        this.enableDisableToolbarBtn();
        if (this.defToolbarItems.length > 0 && (!isNullOrUndefined(document.getElementById(this.element.id + '_toolbar')))) {
            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
            var toolbar_7 = getComponent(this.element.id + '_toolbar', 'toolbar');
            toolbar_7.refreshOverflow();
        }
    };
    ImageEditor.prototype.refreshUndoRedoColl = function () {
        this.undoRedoColl = this.undoRedoColl.slice(0, this.undoRedoStep);
        this.isUndoRedo = this.currObjType.isUndoAction = false;
        this.enableDisableToolbarBtn();
    };
    ImageEditor.prototype.applyPreviewFilter = function () {
        if (!isNullOrUndefined(document.querySelector('#' + this.element.id + '_sliderWrapper')) ||
            this.currObjType.isFiltered) {
            this.initialAdjustmentValue = this.canvasFilter = this.lowerContext.filter;
            this.currObjType.isFiltered = false;
        }
    };
    ImageEditor.prototype.contextualToolbarClicked = function (args) {
        var selEle = this.element.querySelector('.e-contextual-toolbar-wrapper .e-toolbar-item.e-selected');
        if (selEle) {
            selEle.classList.remove('e-selected');
        }
        document.getElementById(args.item.id + 'Canvas').parentElement.parentElement.classList.add('e-selected');
        this.currObjType.isFiltered = true;
        var type = args.item.id.replace(this.element.id, '').split('_')[1];
        var imageFiltering = { filter: this.toPascalCase(type) };
        this.trigger('imageFiltering', imageFiltering);
        this.setFilter(type.toLowerCase());
        this.currentFilter = args.item.id;
        this.enableDisableToolbarBtn();
    };
    ImageEditor.prototype.defToolbarClicked = function (args) {
        var isContextualToolbar = false;
        if (this.element.querySelector('.e-contextual-toolbar-wrapper')) {
            if (!this.element.querySelector('.e-contextual-toolbar-wrapper').classList.contains('e-hide')) {
                isContextualToolbar = true;
            }
            this.element.querySelector('.e-contextual-toolbar-wrapper').classList.add('e-hide');
        }
        var zoomIn;
        var type = args.item.id.replace(this.element.id + '_', '').toLowerCase();
        var imageEditorObj = getInstance(document.getElementById(this.element.id), ImageEditor_1);
        var isCropSelection = false;
        var panBtn;
        var splitWords;
        if (this.activeObj.shape !== undefined) {
            splitWords = this.activeObj.shape.split('-');
        }
        if (splitWords === undefined && this.currObjType.isCustomCrop) {
            isCropSelection = true;
        }
        else if (splitWords !== undefined && splitWords[0] === 'crop') {
            isCropSelection = true;
        }
        var isDisabledZoomOut = false;
        var isDisabledFilter = false;
        var isDisabledAdjustment = false;
        var zoomOut = document.querySelector('#' + this.element.id + '_zoomOut');
        if (!isNullOrUndefined(zoomOut) && zoomOut.classList.contains('e-disabled')) {
            isDisabledZoomOut = true;
        }
        var adjustment = document.querySelector('#' + this.element.id + '_adjustment');
        if (!isNullOrUndefined(adjustment) && adjustment.classList.contains('e-disabled')) {
            isDisabledAdjustment = true;
        }
        var filter = document.querySelector('#' + this.element.id + '_filter');
        if (!isNullOrUndefined(filter) && filter.classList.contains('e-disabled')) {
            isDisabledFilter = true;
        }
        this.enableDisableToolbarBtn();
        if (!this.disabled) {
            switch (type) {
                case 'zoomin':
                    if (this.isFreehandDrawEditing) {
                        this.applyFreehandDraw();
                    }
                    this.applyPreviewFilter();
                    this.currObjType.isFiltered = false;
                    if (this.currObjType.isUndoAction) {
                        this.refreshUndoRedoColl();
                    }
                    if (this.togglePen) {
                        this.currObjType.isZoomed = true;
                        this.freeHandDraw(false);
                    }
                    this.currentSelectionPoint = null;
                    imageEditorObj.zoom(.1);
                    break;
                case 'zoomout':
                    if (!isDisabledZoomOut) {
                        if (this.isFreehandDrawEditing) {
                            this.applyFreehandDraw();
                        }
                        this.applyPreviewFilter();
                        this.currObjType.isFiltered = false;
                        if (this.currObjType.isUndoAction) {
                            this.refreshUndoRedoColl();
                        }
                        if (this.togglePen) {
                            this.currObjType.isZoomed = true;
                            this.freeHandDraw(false);
                        }
                        this.currentSelectionPoint = null;
                        imageEditorObj.zoom(-.1);
                    }
                    break;
                case 'pan':
                    this.currObjType.isCustomCrop = this.currObjType.isFiltered = false;
                    if (this.currObjType.isUndoAction) {
                        this.refreshUndoRedoColl();
                    }
                    if (isCropSelection) {
                        this.currObjType.isCustomCrop = false;
                        this.refreshActiveObj();
                        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                        this.refreshToolbar('main');
                    }
                    if (this.togglePan) {
                        this.cancelPan();
                        this.disablePan = true;
                        if (this.currentToolbar === 'pen') {
                            this.freeHandDraw(true);
                        }
                    }
                    else {
                        panBtn = this.element.querySelector('.e-img-pan .e-btn');
                        if (!isNullOrUndefined(panBtn)) {
                            panBtn.classList.add('e-selected-btn');
                        }
                        imageEditorObj.pan(true);
                        this.disablePan = false;
                    }
                    zoomIn = document.querySelector('#' + this.element.id + '_zoomIn');
                    if (!isNullOrUndefined(zoomIn) && this.zoomFactor >= 2) {
                        zoomIn.classList.add('e-disabled');
                        zoomIn.parentElement.classList.add('e-overlay');
                    }
                    else if (!isNullOrUndefined(zoomIn)) {
                        zoomIn.classList.remove('e-disabled');
                        zoomIn.parentElement.classList.remove('e-overlay');
                    }
                    this.refreshToolbar('main');
                    break;
                case 'cancel':
                    this.performCancel(isContextualToolbar);
                    break;
                case 'ok':
                    this.okBtn();
                    this.refreshDropDownBtn(false);
                    this.currentToolbar = 'main';
                    break;
                case 'crop':
                    if (!isNullOrUndefined(this.currSelectionPoint)) {
                        if (this.currObjType.isUndoAction) {
                            this.refreshUndoRedoColl();
                        }
                        if (!isNullOrUndefined(this.cropObj.activeObj.shape)) {
                            this.select(this.cropObj.activeObj.shape);
                        }
                        this.refreshToolbar('main', true, true);
                        getComponent(this.element.querySelector('#' + this.element.id + '_cropBtn'), 'dropdown-btn').toggle();
                        if (!isNullOrUndefined(this.activeObj.shape)) {
                            document.getElementById(this.activeObj.shape.split('-')[1]).classList.add('e-selected');
                        }
                    }
                    break;
                case 'reset':
                    imageEditorObj.reset();
                    this.currentToolbar = 'main';
                    break;
                // case 'undo':
                //     this.callUndo();
                //     break;
                // case 'redo':
                //     this.callRedo();
                //     break;
                case 'adjustment':
                    if (!isDisabledAdjustment) {
                        this.refreshToolbar('adjustment');
                        this.setTempFilterProperties();
                        this.openSlider('brightness');
                    }
                    break;
                case 'brightness':
                case 'contrast':
                case 'hue':
                case 'saturation':
                case 'opacity':
                case 'blur':
                case 'exposure':
                    this.openSlider(type);
                    break;
                case 'filter':
                    if (!isDisabledFilter) {
                        this.refreshToolbar('filter');
                        this.setTempFilterProperties();
                    }
                    break;
                case 'default':
                case 'chrome':
                case 'cold':
                case 'warm':
                case 'grayscale':
                case 'blackandwhite':
                case 'sepia':
                case 'invert':
                case 'sharpen':
                    if (this.currObjType.isUndoAction) {
                        this.refreshUndoRedoColl();
                    }
                    this.currObjType.isFiltered = true;
                    this.setFilter(type);
                    break;
            }
        }
        this.trigger('toolbarItemClicked', args);
    };
    ImageEditor.prototype.performCancel = function (isContextualToolbar) {
        isContextualToolbar = isContextualToolbar ? isContextualToolbar : false;
        if (this.isFreehandDrawEditing) {
            this.cancelFreehandDraw();
        }
        else if (this.textArea.style.display === 'block') {
            this.textArea.style.display = 'none';
            this.textArea.value = '';
            this.textArea.style.transform = '';
            this.activeObj.strokeSettings = this.tempStrokeSettings;
            this.activeObj.textSettings = this.tempTextSettings;
        }
        else if (!isNullOrUndefined(document.querySelector('#' + this.element.id + '_sliderWrapper')) ||
            this.currObjType.isFiltered) {
            this.lowerContext.filter = this.adjustmentValue = this.initialAdjustmentValue = this.tempAdjustmentValue;
            if (this.lowerContext.filter.split(' ').length > 1 &&
                this.lowerContext.filter.split(' ')[0].split('(')[1].split(')')[0] === '1') {
                this.isBrightnessAdjusted = false;
            }
            this.currentFilter = this.tempFilter;
            this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
            this.redrawImgWithObj();
            this.currObjType.isFiltered = false;
            this.adjustmentLevel = extend({}, this.tempAdjustmentLevel, {}, true);
            this.element.querySelector('.e-contextual-toolbar-wrapper').classList.add('e-hide');
            this.undoRedoStep = this.tempUndoRedoStep;
            this.upperCanvas.style.cursor = 'default';
            this.currObjType.isCustomCrop = false;
            this.tempStrokeSettings = { strokeColor: '#fff', fillColor: '', strokeWidth: null };
            this.callMainToolbar();
        }
        else {
            if (isContextualToolbar) {
                this.callMainToolbar();
            }
            else {
                this.cancelItems();
                this.togglePan = this.dragCanvas = false;
            }
        }
        this.enableDisableToolbarBtn();
        this.refreshDropDownBtn(false);
        this.currentToolbar = 'main';
    };
    ImageEditor.prototype.applyShape = function () {
        if (!isNullOrUndefined(this.activeObj.shape) && (this.activeObj.shape === 'rectangle' ||
            this.activeObj.shape === 'ellipse' || this.activeObj.shape === 'line' ||
            this.activeObj.shape === 'text')) {
            this.redrawActObj();
            this.refreshActiveObj();
            this.currentToolbar = 'main';
            this.refreshToolbar('main');
        }
    };
    ImageEditor.prototype.applyFreehandDraw = function () {
        if (this.pointColl[this.freehandDrawSelectedIndex].strokeColor === '#42a5f5') {
            this.pointColl[this.freehandDrawSelectedIndex].strokeColor = this.tempFreeHandDrawEditingStyles.strokeColor;
        }
        this.selectedFreehandColor = '#42a5f5';
        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
        this.renderImage();
        this.refreshToolbar('main');
        if (!isNullOrUndefined(this.pointColl[this.freehandDrawSelectedIndex])) {
            this.pointColl[this.freehandDrawSelectedIndex].isSelected = false;
        }
        this.isFreehandDrawEditing = this.isFreehandDrawingPoint = false;
        this.freehandDrawHoveredIndex = this.freehandDrawSelectedIndex = null;
    };
    ImageEditor.prototype.cancelFreehandDraw = function () {
        this.selectedFreehandColor = '#42a5f5';
        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
        for (var n = 0; n < this.freehandCounter; n++) {
            this.pointColl[n].strokeColor = this.tempFreeHandDrawEditingStyles.strokeColor;
            this.pointColl[n].strokeWidth = this.tempFreeHandDrawEditingStyles.strokeWidth;
        }
        this.pointCounter = 0;
        if (!isNullOrUndefined(this.pointColl[this.freehandDrawSelectedIndex])) {
            this.pointColl[this.freehandDrawSelectedIndex].isSelected = false;
        }
        this.freehandDrawHoveredIndex = this.freehandDrawSelectedIndex = this.freehandDrawSelectedId = null;
        this.isFreehandDrawEditing = this.isFreehandDrawingPoint = false;
        this.tempFreeHandDrawEditingStyles = { strokeColor: null, strokeWidth: null, fillColor: null };
        this.refreshToolbar('main');
    };
    ImageEditor.prototype.openSlider = function (type) {
        this.unselectBtn();
        this.currObjType.isFiltered = true;
        this.refreshToolbar('color', null, null, null, type);
        document.getElementById(this.element.id + '_' + type).classList.add('e-selected-btn');
    };
    ImageEditor.prototype.setTempFilterProperties = function () {
        this.upperCanvas.style.display = 'block';
        this.cropSelectedState();
        this.lowerContext.filter = this.initialAdjustmentValue;
        this.tempAdjustmentValue = this.lowerContext.filter;
        this.tempAdjustmentLevel = extend({}, this.adjustmentLevel, {}, true);
        this.tempFilter = this.currentFilter;
        this.tempUndoRedoColl = extend([], this.undoRedoColl, [], true);
        this.tempUndoRedoStep = this.undoRedoStep;
    };
    ImageEditor.prototype.okBtn = function () {
        var isCropSelection = false;
        var splitWords;
        if (this.activeObj.shape !== undefined) {
            splitWords = this.activeObj.shape.split('-');
        }
        if (splitWords === undefined && this.currObjType.isCustomCrop) {
            isCropSelection = true;
        }
        else if (splitWords !== undefined && splitWords[0] === 'crop') {
            isCropSelection = true;
        }
        var selElem = this.element.querySelector('.e-contextual-toolbar-wrapper .e-toolbar-item.e-selected');
        if (selElem) {
            this.currentFilter = selElem.children[0].children[0].id.replace('Canvas', '');
        }
        if (isCropSelection) {
            this.crop();
        }
        else if (this.togglePen) {
            this.freeHandDraw(false);
        }
        else if (this.textArea.style.display === 'block') {
            this.redrawActObj();
        }
        else if (!isNullOrUndefined(document.querySelector('#' + this.element.id + '_sliderWrapper')) ||
            this.currObjType.isFiltered) {
            this.initialAdjustmentValue = this.canvasFilter = this.lowerContext.filter;
            this.currObjType.isFiltered = false;
        }
        else if (this.isFreehandDrawEditing) {
            this.applyFreehandDraw();
        }
        else {
            this.applyActObj();
        }
        this.callMainToolbar(false);
        this.isCropTab = false;
        this.zoomFactor = this.defaultZoomFactor;
    };
    ImageEditor.prototype.updateBrightnessFilter = function () {
        var splitWords = this.lowerContext.filter.split(' ');
        if (this.isBrightnessAdjusted && splitWords.length > 0 && !isNullOrUndefined(splitWords[4])) {
            var opacityValue = parseFloat(splitWords[4].split('(')[1]);
            splitWords[4] = 'opacity(' + (opacityValue - 0.3) + ')';
            this.lowerContext.filter = splitWords.join(' ');
        }
    };
    ImageEditor.prototype.isFreehandDrawIndex = function (index) {
        var isIndex = false;
        for (var i = 0; i < this.freehandCounter; i++) {
            if (parseInt(this.pointColl[i].id.split('_')[1], 10) - 1 === index) {
                isIndex = true;
                break;
            }
        }
        return isIndex;
    };
    ImageEditor.prototype.deleteFreehandDraw = function (index, isId) {
        if (this.isFreehandDrawIndex(index)) {
            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
            // eslint-disable-next-line
            var tempPointColl = extend({}, this.pointColl, {}, true);
            this.pointColl = {};
            var count = 0;
            if (isNullOrUndefined(isId)) {
                for (var i = 0; i < this.freehandCounter; i++) {
                    if (i !== index) {
                        this.pointColl[count] = tempPointColl[i];
                        count++;
                    }
                }
            }
            else {
                for (var i = 0; i < this.freehandCounter; i++) {
                    if (parseInt(tempPointColl[i].id.split('_')[1], 10) - 1 !== index) {
                        this.pointColl[count] = tempPointColl[i];
                        count++;
                    }
                }
            }
            this.freehandCounter -= 1;
            this.freehandDrawHoveredIndex = this.freehandDrawSelectedIndex = null;
            this.isFreehandDrawEditing = this.isFreehandDrawingPoint = false;
            this.renderImage();
            this.refreshToolbar('main');
        }
    };
    ImageEditor.prototype.unselectBtn = function () {
        if (document.querySelector('#' + this.element.id + '_brightness').classList.contains('e-selected-btn')) {
            document.querySelector('#' + this.element.id + '_brightness').classList.remove('e-selected-btn');
        }
        else if (document.querySelector('#' + this.element.id + '_contrast').classList.contains('e-selected-btn')) {
            document.querySelector('#' + this.element.id + '_contrast').classList.remove('e-selected-btn');
        }
        else if (document.querySelector('#' + this.element.id + '_hue').classList.contains('e-selected-btn')) {
            document.querySelector('#' + this.element.id + '_hue').classList.remove('e-selected-btn');
        }
        else if (document.querySelector('#' + this.element.id + '_saturation').classList.contains('e-selected-btn')) {
            document.querySelector('#' + this.element.id + '_saturation').classList.remove('e-selected-btn');
        }
        else if (document.querySelector('#' + this.element.id + '_opacity').classList.contains('e-selected-btn')) {
            document.querySelector('#' + this.element.id + '_opacity').classList.remove('e-selected-btn');
        }
        else if (document.querySelector('#' + this.element.id + '_blur').classList.contains('e-selected-btn')) {
            document.querySelector('#' + this.element.id + '_blur').classList.remove('e-selected-btn');
        }
        else if (document.querySelector('#' + this.element.id + '_exposure').classList.contains('e-selected-btn')) {
            document.querySelector('#' + this.element.id + '_exposure').classList.remove('e-selected-btn');
        }
    };
    ImageEditor.prototype.callUndo = function () {
        this.currObjType.isFiltered = false;
        if (!this.togglePan) {
            this.callMainToolbar(false, false);
        }
        if (this.zoomFactor === 0) {
            this.dragCanvas = this.togglePan = false;
            this.callMainToolbar(false, false);
        }
        if (this.element.querySelector('.e-contextual-toolbar-wrapper')) {
            this.element.querySelector('.e-contextual-toolbar-wrapper').classList.add('e-hide');
        }
        if (this.togglePen) {
            this.togglePen = false;
            this.upperCanvas.style.cursor = 'default';
            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
        }
        this.undo();
    };
    ImageEditor.prototype.callRedo = function () {
        this.currObjType.isFiltered = false;
        if (!this.togglePan) {
            this.callMainToolbar(false, false);
        }
        if (this.zoomFactor === 0) {
            this.dragCanvas = this.togglePan = false;
            this.callMainToolbar(false, false);
        }
        this.redo();
    };
    ImageEditor.prototype.refreshSlider = function () {
        var sliderWrapper = document.querySelector('#' + this.element.id + '_sliderWrapper');
        // eslint-disable-next-line
        var slider = document.querySelector('.e-slider');
        var hdrWrapper = document.querySelector('#' + this.element.id + '_headWrapper');
        if (hdrWrapper) {
            hdrWrapper.style.display = 'none';
        }
        if (!isNullOrUndefined(sliderWrapper) && !isNullOrUndefined(slider)) {
            slider.ej2_instances[0].destroy();
            sliderWrapper.remove();
        }
    };
    ImageEditor.prototype.iterateObjColl = function () {
        for (var i = 0; i < this.objColl.length; i++) {
            this.apply(this.objColl[i].shape, this.objColl[i]);
            this.refreshActiveObj();
        }
    };
    ImageEditor.prototype.updateAdjustment = function (type, value, isPreview) {
        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
        var splitWords = this.lowerContext.filter.split(' ');
        var values = [];
        var opacityValue;
        var brightnessValue;
        if (splitWords[4] !== undefined) {
            opacityValue = parseFloat(splitWords[4].split('(')[1]);
        }
        if (splitWords[0] !== undefined) {
            brightnessValue = parseFloat(splitWords[0].split('(')[1]);
        }
        var brightness = this.getFilterValue(this.adjustmentLevel.brightness);
        var saturation = this.getFilterValue(this.adjustmentLevel.saturation);
        if (type !== 'brightness' && type !== 'contrast' && type !== 'hue' && type !== 'saturation' && type !== 'exposure'
            && type !== 'opacity' && type !== 'blur') {
            if (isNullOrUndefined(isPreview) && (this.adjustmentLevel.sharpen || this.adjustmentLevel.bw)) {
                this.isUndoRedo = true;
                var temp_1 = this.lowerContext.filter;
                this.lowerContext.filter = 'none';
                this.iterateObjColl();
                this.freehandRedraw(this.lowerContext);
                this.lowerContext.filter = temp_1;
                this.isUndoRedo = false;
            }
        }
        if (brightness !== 1) {
            splitWords[4] = 'opacity(' + (opacityValue - 0.3) + ')';
        }
        var saturate;
        var bright;
        var saturatePercent;
        var contrast;
        var saturatePercentage;
        switch (type) {
            case 'brightness':
                if (parseFloat(splitWords[3].split('(')[1]) !== 100) {
                    value += 0.1;
                }
                splitWords[0] = 'brightness(' + value + ')';
                this.adjustmentValue = splitWords.join(' ');
                break;
            case 'contrast':
                splitWords[1] = 'contrast(' + value + '%)';
                this.adjustmentValue = splitWords.join(' ');
                break;
            case 'hue':
                splitWords[2] = 'hue-rotate(' + value + 'deg)';
                this.adjustmentValue = splitWords.join(' ');
                break;
            case 'saturation':
                splitWords[3] = 'saturate(' + value + '%)';
                if (saturation !== 1) {
                    splitWords[0] = 'brightness(' + (brightnessValue + 0.1) + ')';
                }
                this.adjustmentValue = splitWords.join(' ');
                break;
            case 'opacity':
                if (parseFloat(splitWords[0].split('(')[1]) !== 1) {
                    value -= 0.2;
                }
                splitWords[4] = 'opacity(' + value + ')';
                this.adjustmentValue = splitWords.join(' ');
                break;
            case 'blur':
                splitWords[5] = 'blur(' + value + 'px)';
                this.adjustmentValue = splitWords.join(' ');
                break;
            case 'exposure':
                if (brightness !== 1) {
                    splitWords[4] = 'opacity(' + (opacityValue - 0.3) + ')';
                }
                if (value > 1) {
                    value -= 1;
                    value += brightness;
                }
                else if (value < 1) {
                    value = 1 - value;
                    value = brightness - value;
                }
                splitWords[0] = 'brightness(' + value + ')';
                this.adjustmentValue = splitWords.join(' ');
                break;
            case 'chrome':
                saturate = this.getSaturationFilterValue(this.adjustmentLevel.saturation);
                saturate *= 100;
                value = saturate + (saturate * 0.4);
                splitWords[3] = 'saturate(' + value + '%)';
                values = this.adjustmentValue.split(' ');
                splitWords[0] = values[0];
                splitWords[1] = values[1];
                splitWords[2] = values[2];
                splitWords[4] = values[4];
                splitWords[5] = values[5];
                splitWords[6] = 'sepia(0%)';
                splitWords[7] = 'grayscale(0%)';
                splitWords[8] = 'invert(0%)';
                break;
            case 'cold':
                // Adjusting Brightness
                bright = this.getFilterValue(this.adjustmentLevel.brightness);
                bright *= 100;
                value = bright * 0.9;
                splitWords[0] = 'brightness(' + value + '%)';
                // Adjusting Contrast
                contrast = this.getFilterValue(this.adjustmentLevel.contrast);
                contrast *= 100;
                value = contrast + (contrast * 0.5);
                splitWords[1] = 'contrast(' + value + '%)';
                // Adjusting Saturation
                saturatePercentage = this.getSaturationFilterValue(this.adjustmentLevel.saturation);
                saturatePercentage *= 100;
                value = saturatePercentage;
                splitWords[3] = 'saturate(' + value + '%)';
                values = this.adjustmentValue.split(' ');
                splitWords[2] = values[2];
                splitWords[4] = values[4];
                splitWords[5] = values[5];
                splitWords[6] = 'sepia(0%)';
                splitWords[7] = 'grayscale(0%)';
                splitWords[8] = 'invert(0%)';
                break;
            case 'warm':
                saturatePercent = this.getSaturationFilterValue(this.adjustmentLevel.saturation);
                saturatePercent *= 100;
                value = saturatePercent + (saturatePercent * 0.4);
                splitWords[3] = 'saturate(' + value + '%)';
                splitWords[6] = 'sepia(25%)';
                values = this.adjustmentValue.split(' ');
                splitWords[0] = values[0];
                splitWords[1] = values[1];
                splitWords[2] = values[2];
                splitWords[4] = values[4];
                splitWords[5] = values[5];
                splitWords[7] = 'grayscale(0%)';
                splitWords[8] = 'invert(0%)';
                break;
            case 'grayscale':
                splitWords[7] = 'grayscale(100%)';
                values = this.adjustmentValue.split(' ');
                splitWords[0] = values[0];
                splitWords[1] = values[1];
                splitWords[2] = values[2];
                splitWords[3] = values[3];
                splitWords[4] = values[4];
                splitWords[5] = values[5];
                splitWords[6] = 'sepia(0%)';
                splitWords[8] = 'invert(0%)';
                break;
            case 'sepia':
                splitWords[6] = 'sepia(100%)';
                values = this.adjustmentValue.split(' ');
                splitWords[0] = values[0];
                splitWords[1] = values[1];
                splitWords[2] = values[2];
                splitWords[3] = values[3];
                splitWords[4] = values[4];
                splitWords[5] = values[5];
                splitWords[7] = 'grayscale(0%)';
                splitWords[8] = 'invert(0%)';
                break;
            case 'invert':
                splitWords[8] = 'invert(100%)';
                values = this.adjustmentValue.split(' ');
                splitWords[0] = values[0];
                splitWords[1] = values[1];
                splitWords[2] = values[2];
                splitWords[3] = values[3];
                splitWords[4] = values[4];
                splitWords[5] = values[5];
                splitWords[6] = 'sepia(0%)';
                splitWords[7] = 'grayscale(0%)';
                break;
        }
        if (type !== 'sharpen' && type !== 'blackandwhite') {
            if (isNullOrUndefined(isPreview)) {
                if (type === 'default') {
                    splitWords = this.getDefaultCurrentFilter(splitWords);
                }
                this.lowerContext.filter = splitWords.join(' ');
            }
            splitWords = this.setTempFilterValue(brightness, isPreview, splitWords, type);
            this.isRotateZoom = true;
            this.updateCurrentTransformedState('initial');
            this.lowerContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, this.destLeft, this.destTop, this.destWidth, this.destHeight);
            this.updateCurrentTransformedState('reverse');
            this.isRotateZoom = false;
            if (brightness !== 1) {
                splitWords[4] = 'opacity(' + opacityValue + ')';
            }
            else if (saturation !== 1) {
                splitWords[0] = 'brightness(' + brightnessValue + ')';
            }
            if (type === 'exposure' && brightness !== 1) {
                splitWords[0] = 'brightness(' + brightnessValue + ')';
            }
            if (type === 'saturation' && saturation !== 1) {
                splitWords[0] = 'brightness(' + brightnessValue + ')';
            }
            splitWords = this.setTempFilterValue(brightness, isPreview, splitWords, type);
            if (isNullOrUndefined(isPreview)) {
                this.lowerContext.filter = this.initialAdjustmentValue = splitWords.join(' ');
            }
            var tempFilter_1 = this.lowerContext.filter;
            this.lowerContext.filter = this.getDefaultFilter();
            this.iterateObjColl();
            this.freehandRedraw(this.lowerContext);
            this.lowerContext.filter = tempFilter_1;
            if ((!isNullOrUndefined(this.currSelectionPoint) && this.currSelectionPoint.shape === 'crop-circle') || this.isCircleCrop) {
                this.cropCircle(this.lowerContext);
            }
            if (brightness === 1) {
                this.isBrightnessAdjusted = false;
            }
            else {
                this.isBrightnessAdjusted = true;
            }
        }
        var filter = splitWords.join(' ');
        return filter;
    };
    ImageEditor.prototype.autoEnablePan = function () {
        if (this.zoomFactor === 0) {
            this.dragCanvas = this.togglePan = false;
            this.callMainToolbar(false, true);
            this.pan(false);
            this.disablePan = false;
        }
        else if (!this.disablePan) {
            this.pan(true);
        }
        else if (this.disablePan) {
            this.pan(false);
        }
    };
    ImageEditor.prototype.setTempFilterValue = function (brightness, isPreview, splitWords, type) {
        if (isPreview && brightness !== 1) {
            var tempSplitWords = this.lowerContext.filter.split(' ');
            tempSplitWords[4] = splitWords[4];
            this.lowerContext.filter = tempSplitWords.join(' ');
        }
        else if (isPreview && type === 'default') {
            splitWords = this.getDefaultCurrentFilter(splitWords);
        }
        return splitWords;
    };
    ImageEditor.prototype.getDefaultCurrentFilter = function (splitWords) {
        var values = this.adjustmentValue.split(' ');
        splitWords[0] = values[0];
        splitWords[1] = values[1];
        splitWords[2] = values[2];
        splitWords[3] = values[3];
        splitWords[4] = values[4];
        splitWords[5] = values[5];
        splitWords[6] = 'sepia(0%)';
        splitWords[7] = 'grayscale(0%)';
        splitWords[8] = 'invert(0%)';
        return splitWords;
    };
    ImageEditor.prototype.renderSlider = function (type) {
        var canvasWrapper = document.querySelector('#' + this.element.id + '_contextualToolbarArea');
        var hdrWrapper = document.querySelector('#' + this.element.id + '_headWrapper');
        var labelWrapper = document.querySelector('#' + this.element.id + '_labelWrapper');
        if (!hdrWrapper) {
            hdrWrapper = canvasWrapper.appendChild(this.createElement('div', {
                id: this.element.id + '_headWrapper',
                styles: 'position: relative'
            }));
            labelWrapper = hdrWrapper.appendChild(this.createElement('label', {
                id: this.element.id + '_labelWrapper',
                styles: Browser.isDevice ? 'position: absolute; top: 25%; left: calc(50% - 150px); font-size: 15px; text-transform: capitalize; font-weight: 400;'
                    : 'position: absolute; top: 25%; left: calc(50% - 226px); font-size: 15px; text-transform: capitalize; font-weight: 400;'
            }));
        }
        else {
            hdrWrapper.style.display = 'block';
        }
        labelWrapper.textContent = this.l10n.getConstant(this.toPascalCase(type));
        var sliderWrapper = hdrWrapper.appendChild(this.createElement('div', {
            id: this.element.id + '_sliderWrapper',
            styles: 'position: absolute'
        }));
        var value = this.getCurrAdjustmentValue(type);
        var min;
        var max;
        var slider;
        if (type === 'brightness' || type === 'contrast' || type === 'saturation' || type === 'exposure') {
            if (this.finetuneSettings) {
                if (type === 'brightness' && this.finetuneSettings.brightness) {
                    min = this.finetuneSettings.brightness.min;
                    max = this.finetuneSettings.brightness.max;
                }
                else if (type === 'contrast' && this.finetuneSettings.contrast) {
                    min = this.finetuneSettings.contrast.min;
                    max = this.finetuneSettings.contrast.max;
                }
                else if (type === 'saturation' && this.finetuneSettings.saturation) {
                    min = this.finetuneSettings.saturation.min;
                    max = this.finetuneSettings.saturation.max;
                }
                else if (type === 'exposure' && this.finetuneSettings.exposure) {
                    min = this.finetuneSettings.exposure.min;
                    max = this.finetuneSettings.exposure.max;
                }
                else {
                    min = -100;
                    max = 100;
                }
            }
            else {
                min = -100;
                max = 100;
            }
            slider = this.createSlider(min, max, value, type);
        }
        else if (type === 'hue' || type === 'blur' || type === 'opacity') {
            if (this.finetuneSettings) {
                if (type === 'hue' && this.finetuneSettings.hue) {
                    min = this.finetuneSettings.hue.min;
                    max = this.finetuneSettings.hue.max;
                }
                else if (type === 'blur' && this.finetuneSettings.blur) {
                    min = this.finetuneSettings.blur.min;
                    max = this.finetuneSettings.blur.max;
                }
                else if (type === 'opacity' && this.finetuneSettings.opacity) {
                    min = this.finetuneSettings.opacity.min;
                    max = this.finetuneSettings.opacity.max;
                }
                else {
                    min = 0;
                    max = 100;
                }
            }
            else {
                min = 0;
                max = 100;
            }
            slider = this.createSlider(min, max, value, type);
        }
        slider.appendTo('#' + this.element.id + '_sliderWrapper');
        sliderWrapper.style.left = (parseFloat(canvasWrapper.style.width) - parseFloat(slider.width)) / 2 + 'px';
    };
    ImageEditor.prototype.createSlider = function (min, max, value, type) {
        var _this = this;
        return new Slider({
            value: value,
            tooltip: { isVisible: true, placement: 'Before', showOn: 'Always' },
            type: 'MinRange',
            min: min,
            max: max,
            step: 10,
            width: Browser.isDevice ? '200px' : '300px',
            cssClass: 'e-slider',
            change: function (args) {
                if (_this.currObjType.isUndoAction) {
                    _this.refreshUndoRedoColl();
                }
                _this.setCurrAdjustmentValue(type, args.value);
                _this.enableDisableToolbarBtn();
            }
        });
    };
    ImageEditor.prototype.getCurrAdjustmentValue = function (type) {
        var value;
        switch (type) {
            case 'brightness':
                value = this.adjustmentLevel.brightness;
                break;
            case 'contrast':
                value = this.adjustmentLevel.contrast;
                break;
            case 'hue':
                value = this.adjustmentLevel.hue;
                break;
            case 'saturation':
                value = this.adjustmentLevel.saturation;
                break;
            case 'opacity':
                value = this.adjustmentLevel.opacity;
                break;
            case 'blur':
                value = this.adjustmentLevel.blur;
                break;
            case 'exposure':
                value = this.adjustmentLevel.exposure;
                break;
        }
        return value;
    };
    ImageEditor.prototype.setCurrAdjustmentValue = function (type, value) {
        var finetuneValueChanging = { finetune: this.toPascalCase(type), value: value };
        this.trigger('finetuneValueChanging', finetuneValueChanging);
        switch (type) {
            case 'brightness':
                this.setBrightness(value);
                break;
            case 'contrast':
                this.setContrast(value);
                break;
            case 'hue':
                this.setHue(value);
                break;
            case 'saturation':
                this.setSaturation(value);
                break;
            case 'opacity':
                this.setOpacity(value);
                break;
            case 'blur':
                this.setBlur(value);
                break;
            case 'exposure':
                this.setExposure(value);
                break;
        }
    };
    ImageEditor.prototype.cancelPan = function () {
        this.applyActObj();
        var panBtn = this.element.querySelector('.e-img-pan .e-btn');
        if (!isNullOrUndefined(panBtn)) {
            panBtn.classList.remove('e-selected-btn');
        }
        this.pan(false);
    };
    ImageEditor.prototype.callMainToolbar = function (isApplyBtn, isZooming) {
        this.refreshToolbar('main', isApplyBtn, false, isZooming);
    };
    ImageEditor.prototype.setCurrSelectionPoints = function (isSetDimension) {
        this.srcLeft = 0;
        this.srcTop = 0;
        this.srcWidth = this.baseImg.width;
        this.srcHeight = this.baseImg.height;
        this.destLeft = this.cropDestPoints.startX;
        this.destTop = this.cropDestPoints.startY;
        this.destWidth = this.cropDestPoints.width;
        this.destHeight = this.cropDestPoints.height;
        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
        if (isSetDimension) {
            this.setDestinationPoints();
        }
        this.currentTransformedState('initial');
        if (this.croppedDegree === 0 && this.degree === 0 && !isNullOrUndefined(this.currSelectionPoint)
            && this.currSelectionPoint.shape !== 'crop-circle' && this.currSelectionPoint.shape !== 'crop-square') {
            this.destLeft = this.cropDestPoints.startX;
            this.destTop = this.cropDestPoints.startY;
            this.destWidth = this.cropDestPoints.width;
            this.destHeight = this.cropDestPoints.height;
        }
        if (this.degree === 0) {
            this.destLeft += this.totalPannedInternalPoint.x;
            this.destTop += this.totalPannedInternalPoint.y;
        }
        this.updateBrightnessFilter();
        this.lowerContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, this.destLeft, this.destTop, this.destWidth, this.destHeight);
        this.currentTransformedState('reverse', null, null, true);
        if (isNullOrUndefined(this.cropObj.activeObj.shape)) {
            var temp = this.lowerContext.filter;
            this.lowerContext.filter = 'none';
            this.iterateObjColl();
            this.freehandRedraw(this.lowerContext);
            this.lowerContext.filter = temp;
            this.currSelectionPoint = null;
        }
        else {
            if (this.cropObj.cropZoom > 0) {
                var cropObjColl_1 = extend([], this.objColl, null, true);
                var cropPointColl_1 = extend([], this.pointColl, null, true);
                this.objColl = [];
                this.pointColl = [];
                this.freehandCounter = 0;
                this.zoom(this.cropObj.cropZoom);
                this.objColl = cropObjColl_1;
                this.pointColl = cropPointColl_1;
                this.freehandCounter = this.pointColl.length;
                this.currSelectionPoint = extend({}, this.cropObj.activeObj, null, true);
                if (this.cropObj.currFlipState !== '') {
                    this.cropObj.totalPannedPoint.x += this.cropObj.tempFlipPanPoint.x;
                    this.cropObj.totalPannedPoint.y += this.cropObj.tempFlipPanPoint.y;
                }
            }
            var destPoints = { startX: this.destLeft, startY: this.destTop, width: this.destWidth, height: this.destHeight };
            this.destLeft = this.currSelectionPoint.activePoint.startX;
            this.destTop = this.currSelectionPoint.activePoint.startY;
            this.destWidth = this.currSelectionPoint.activePoint.width;
            this.destHeight = this.currSelectionPoint.activePoint.height;
            this.zoomObjColl();
            this.zoomFreehandDrawColl();
            this.destLeft = destPoints.startX;
            this.destTop = destPoints.startY;
            this.destWidth = destPoints.width;
            this.destHeight = destPoints.height;
            this.updatePannedRegion();
            this.updateObjAndFreeHandDrawColl();
            var cropObjColl = extend([], this.objColl, null, true);
            var cropPointColl = extend([], this.pointColl, null, true);
            this.objColl = [];
            this.pointColl = [];
            this.freehandCounter = 0;
            this.setCurrentObj();
            var activeObj = extend({}, this.activeObj, null, true);
            this.refreshActiveObj();
            this.objColl = cropObjColl;
            this.pointColl = cropPointColl;
            this.freehandCounter = this.pointColl.length;
            this.zoomObjColl();
            this.zoomFreehandDrawColl();
            this.currSelectionPoint = null;
            if (this.degree === 0) {
                this.drawPannImage({ x: 0, y: 0 });
            }
            this.activeObj = activeObj;
            this.drawObject('duplicate');
        }
    };
    ImageEditor.prototype.updatePannedRegion = function () {
        var pannedPoint = this.degree === 0 ? this.cropObj.totalPannedPoint : this.cropObj.totalPannedClientPoint;
        if (this.currFlipState === this.cropObj.currFlipState) {
            this.panObjColl(-pannedPoint.x, -pannedPoint.y, '');
            this.panFreehandDrawColl(-pannedPoint.x, -pannedPoint.y, '');
        }
        else {
            if (this.currFlipState === 'horizontal' && this.cropObj.currFlipState === '' ||
                this.currFlipState === 'vertical' && this.cropObj.currFlipState === '') {
                this.panObjColl(-pannedPoint.x, -pannedPoint.y, '');
                this.panFreehandDrawColl(-pannedPoint.x, -pannedPoint.y, '');
            }
            else if (this.currFlipState === '' && this.cropObj.currFlipState === 'horizontal') {
                this.panObjColl(pannedPoint.x, -pannedPoint.y, '');
                this.panFreehandDrawColl(pannedPoint.x, -pannedPoint.y, '');
            }
            else if (this.currFlipState === '' && this.cropObj.currFlipState === 'vertical') {
                this.panObjColl(-pannedPoint.x, pannedPoint.y, '');
                this.panFreehandDrawColl(-pannedPoint.x, pannedPoint.y, '');
            }
        }
    };
    ImageEditor.prototype.updateObjAndFreeHandDrawColl = function () {
        for (var i = 0; i < this.objColl.length; i++) {
            this.objColl[i].imageRatio = { startX: ((this.objColl[i].activePoint.startX - this.destLeft) /
                    this.destWidth), startY: ((this.objColl[i].activePoint.startY - this.destTop) / this.destHeight),
                endX: ((this.objColl[i].activePoint.endX - this.destLeft) / this.destWidth),
                endY: ((this.objColl[i].activePoint.endY - this.destTop) / this.destHeight),
                width: this.destWidth / this.objColl[i].activePoint.width, height: this.destHeight /
                    this.objColl[i].activePoint.height };
            this.refreshActiveObj();
        }
        for (var n = 0; n < this.freehandCounter; n++) {
            this.points = extend([], this.pointColl[n].points, []);
            this.pointCounter = 0;
            var len = this.points.length;
            for (var l = 0; l < len; l++) {
                this.points[l].ratioX = (this.points[l].x - this.destLeft) / this.destWidth;
                this.points[l].ratioY = (this.points[l].y - this.destTop) / this.destHeight;
            }
        }
    };
    ImageEditor.prototype.cancelItems = function () {
        var isCropSelection = false;
        var splitWords;
        if (this.activeObj.shape !== undefined) {
            splitWords = this.activeObj.shape.split('-');
        }
        if (splitWords === undefined && this.currObjType.isCustomCrop) {
            isCropSelection = true;
        }
        else if (splitWords !== undefined && splitWords[0] === 'crop') {
            isCropSelection = true;
        }
        if (isCropSelection && this.isCropTab) {
            this.isCropTab = false;
            this.zoomFactor = this.defaultZoomFactor;
        }
        if (this.togglePen) {
            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
            this.togglePen = false;
            this.upperCanvas.style.cursor = 'default';
            // eslint-disable-next-line
            var tempPointsColl = extend([], this.pointColl, [], true);
            this.pointColl = {};
            for (var i = 0; i < this.tempFreehandCounter; i++) {
                this.pointColl[i] = tempPointsColl[i];
            }
            this.freehandCounter = this.tempFreehandCounter;
            this.currentFreehandDrawIndex = this.tempCurrentFreehandDrawIndex;
        }
        else if (this.activeObj.shape === 'text') {
            if (isNullOrUndefined(this.activeObj.currIndex)) {
                this.refreshActiveObj();
                this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
            }
            else {
                this.activeObj.strokeSettings = this.tempStrokeSettings;
                this.activeObj.textSettings = this.tempTextSettings;
                if (this.activeObj.keyHistory === 'Enter Text' && this.activeObj.activePoint.startX === this.textStartPoints.x
                    && this.activeObj.activePoint.startY === this.textStartPoints.y) {
                    this.refreshActiveObj();
                    this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                    this.textSettings = this.tempTextSettings;
                    this.strokeSettings = this.tempStrokeSettings;
                    this.drawShapeText();
                    this.applyActObj();
                }
                else {
                    this.redrawText();
                    this.redrawShape(this.activeObj);
                    if (!isCropSelection && this.activeObj.topLeftCircle !== undefined) {
                        this.applyActObj();
                    }
                    this.clearSelection();
                }
            }
            this.tempTextSettings = { text: 'Enter Text', fontFamily: 'Arial', fontSize: null, fontRatio: null, bold: false,
                italic: false, underline: false };
        }
        else if (this.activeObj.shape === 'rectangle' || this.activeObj.shape === 'ellipse' || this.activeObj.shape === 'line') {
            if (isNullOrUndefined(this.activeObj.currIndex)) {
                this.refreshActiveObj();
                this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
            }
            else {
                this.activeObj.strokeSettings = this.tempStrokeSettings;
                this.redrawShape(this.activeObj);
                this.applyActObj();
            }
        }
        else if ((this.zoomFactor !== this.tempZoomFactor) || isCropSelection && isNullOrUndefined(this.currSelectionPoint)) {
            var length_1 = this.cropZoomFactor - this.tempZoomFactor;
            this.zoomFactor = this.cropZoomFactor;
            if (isNullOrUndefined(this.cropObj.activeObj.shape)) {
                if ((this.degree === 0 && this.totalPannedPoint.x === 0 && this.totalPannedPoint.y === 0) ||
                    (this.degree !== 0 && this.totalPannedInternalPoint.x === 0 && this.totalPannedInternalPoint.y === 0 &&
                        this.totalPannedClientPoint.x === 0 && this.totalPannedClientPoint.y === 0)) {
                    this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                    this.refreshActiveObj();
                    if (length_1 > 0) {
                        this.zoom(-length_1);
                    }
                    else {
                        this.zoom(Math.abs(length_1));
                    }
                    this.cropZoomFactor = this.tempZoomFactor;
                    this.currObjType.isCustomCrop = false;
                    this.upperCanvas.style.cursor = 'default';
                    this.currObjType.isCustomCrop = false;
                    this.tempStrokeSettings = { strokeColor: '#fff', fillColor: '', strokeWidth: null };
                    this.callMainToolbar();
                    return;
                }
            }
            if (isNullOrUndefined(this.cropObj.activeObj.shape)) {
                if (this.degree === 0) {
                    var activeObj = extend({}, this.activeObj, {});
                    this.destLeft += (-this.totalPannedPoint.x);
                    this.destTop += (-this.totalPannedPoint.y);
                    this.drawPannImage({ x: -this.totalPannedPoint.x, y: -this.totalPannedPoint.y });
                    this.updateFlipPan(activeObj);
                    this.totalPannedPoint = { x: 0, y: 0 };
                }
                else {
                    this.totalPannedClientPoint = { x: -this.totalPannedClientPoint.x, y: -this.totalPannedClientPoint.y };
                    this.totalPannedInternalPoint = { x: -this.totalPannedInternalPoint.x, y: -this.totalPannedInternalPoint.y };
                    this.rotatePan(true);
                    this.totalPannedClientPoint = { x: 0, y: 0 };
                    this.totalPannedInternalPoint = { x: 0, y: 0 };
                    this.currentPannedPoint = { x: 0, y: 0 };
                }
                this.refreshActiveObj();
                this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                if (length_1 > 0) {
                    this.zoom(-length_1);
                }
                else {
                    this.zoom(Math.abs(length_1));
                }
                this.cropZoomFactor = this.tempZoomFactor;
            }
            else {
                this.isCancelAction = true;
                this.objColl = [];
                this.pointColl = [];
                var freehandCounter = this.freehandCounter;
                this.freehandCounter = 0;
                var cropObj = extend({}, this.cropObj, {});
                var afterCropActions = extend([], this.afterCropActions, {}, true);
                this.setCurrentObj();
                this.cropImg();
                this.cropObj = cropObj;
                this.afterCropActions = afterCropActions;
                this.objColl = extend([], this.cancelObjColl, [], true);
                this.pointColl = extend([], this.cancelPointColl, [], true);
                this.freehandCounter = freehandCounter;
                this.iterateObjColl();
                this.freehandRedraw(this.lowerContext);
                this.clearOuterCanvas(this.lowerContext);
                if (this.isCircleCrop) {
                    this.cropCircle(this.lowerContext);
                }
                this.isCancelAction = false;
            }
            this.zoomFactor = this.defaultZoomFactor;
            this.enableDisableToolbarBtn();
        }
        else {
            this.refreshActiveObj();
            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
        }
        this.upperCanvas.style.cursor = 'default';
        this.currObjType.isCustomCrop = false;
        this.tempStrokeSettings = { strokeColor: '#fff', fillColor: '', strokeWidth: null };
        this.callMainToolbar();
    };
    ImageEditor.prototype.freehandDownHandler = function (e, canvas) {
        this.freehandDrawObj.time = new Date().getTime();
        this.isFreehandDrawing = true;
        if (e.type === 'mousedown') {
            this.freehandDownPoint = { x: e.clientX, y: e.clientY };
        }
        else {
            this.freehandDownPoint = { x: e.touches[0].clientX, y: e.touches[0].clientY };
        }
        this.isFreehandPointMoved = false;
        EventHandler.add(canvas, 'mousemove touchmove', this.freehandMoveHandler, this);
    };
    ImageEditor.prototype.freehandUpHandler = function (e, canvas, context) {
        var rect = canvas.getBoundingClientRect();
        EventHandler.remove(canvas, 'mousemove touchmove', this.freehandMoveHandler);
        if (this.points.length === 0) {
            if (e.type === 'mouseup') {
                this.processPoint(e.clientX - rect.left, e.clientY - rect.top, true, context);
            }
            else {
                if (!this.isFreehandPointMoved) {
                    this.processPoint(this.freehandDownPoint.x - rect.left, this.freehandDownPoint.y - rect.top, true, context);
                }
            }
        }
        context.closePath();
        var prevCropObj = extend({}, this.cropObj, {}, true);
        var prevObj = this.getCurrentObj();
        prevObj.objColl = extend([], this.objColl, [], true);
        prevObj.pointColl = extend([], this.pointColl, [], true);
        prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
        this.pointColl[this.freehandCounter] = {};
        this.pointColl[this.freehandCounter].points = extend([], this.points);
        this.pointColl[this.freehandCounter].strokeColor = this.activeObj.strokeSettings.strokeColor;
        this.pointColl[this.freehandCounter].strokeWidth = this.penStrokeWidth;
        this.pointColl[this.freehandCounter].flipState = this.currFlipState;
        this.pointColl[this.freehandCounter].id = 'pen_' + (this.currentFreehandDrawIndex + 1);
        this.points = [];
        this.pointCounter = 0;
        this.freehandCounter++;
        this.currentFreehandDrawIndex++;
        this.isFreehandDrawing = false;
        this.updateUndoRedoColl('freehanddraw', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
    };
    ImageEditor.prototype.freehandMoveHandler = function (e) {
        this.isFreehandPointMoved = true;
        var rect = this.upperCanvas.getBoundingClientRect();
        var x;
        var y;
        if (e.type === 'mousemove') {
            x = e.clientX - rect.left;
            y = e.clientY - rect.top;
        }
        else {
            x = e.touches[0].clientX - rect.left;
            y = e.touches[0].clientY - rect.top;
        }
        if (this.isFreehandDrawing) {
            this.processPoint(x, y, false, this.upperContext);
        }
    };
    ImageEditor.prototype.processPoint = function (x, y, mouseDown, context) {
        var lastPoint = this.point(x, y, new Date().getTime());
        lastPoint = this.points.length > 0 && this.points[this.points.length - 1];
        var isLastPointTooClose = lastPoint ? this.distanceTo(lastPoint) <= 5 : false;
        var controlPoint1;
        var controlPoint2;
        var startPoint;
        var endPoint;
        if (!lastPoint || !(lastPoint && isLastPointTooClose) || mouseDown) {
            this.freehandDrawObj.time = new Date().getTime();
            this.points.push({ x: x, y: y, ratioX: (x - this.destLeft) / this.destWidth, ratioY: (y - this.destTop) / this.destHeight,
                time: this.freehandDrawObj.time });
            if (this.points.length > 3) {
                controlPoint1 = (this.calcCurveControlPoints(this.points[this.pointCounter + 0], this.points[this.pointCounter + 1], this.points[this.pointCounter + 2])).controlPoint2;
                controlPoint2 = (this.calcCurveControlPoints(this.points[this.pointCounter + 1], this.points[this.pointCounter + 2], this.points[this.pointCounter + 3])).controlPoint1;
                startPoint = this.points[this.pointCounter + 1];
                endPoint = this.points[this.pointCounter + 2];
                var minStrokeWidth = 0.5;
                var maxStrokeWidth = 5;
                if (!isNullOrUndefined(this.penStrokeWidth)) {
                    minStrokeWidth = maxStrokeWidth = this.penStrokeWidth;
                }
                this.startDraw(context, controlPoint1, controlPoint2, startPoint, endPoint, minStrokeWidth, maxStrokeWidth);
                this.pointCounter++;
            }
            if (mouseDown) {
                controlPoint1 = controlPoint2 = startPoint = endPoint = { x: x, y: y, time: new Date().getTime() };
                var minStrokeWidth = 0.5;
                var maxStrokeWidth = 5;
                if (!isNullOrUndefined(this.penStrokeWidth)) {
                    minStrokeWidth = maxStrokeWidth = this.penStrokeWidth;
                }
                this.startDraw(context, controlPoint1, controlPoint2, startPoint, endPoint, minStrokeWidth, maxStrokeWidth);
            }
        }
    };
    ImageEditor.prototype.calcCurveControlPoints = function (p1, p2, p3) {
        if (!p2) {
            p2 = p1;
        }
        if (!p3) {
            p3 = p2;
        }
        var dx1 = p1.x - p2.x;
        var dy1 = p1.y - p2.y;
        var dx2 = p2.x - p3.x;
        var dy2 = p2.y - p3.y;
        var m1 = { x: (p1.x + p2.x) / 2.0, y: (p1.y + p2.y) / 2.0 };
        var m2 = { x: (p2.x + p3.x) / 2.0, y: (p2.y + p3.y) / 2.0 };
        var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
        var l2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);
        var dxm = (m1.x - m2.x);
        var dym = (m1.y - m2.y);
        var k = l2 / (l1 + l2);
        var cm = { x: m2.x + dxm * k, y: m2.y + dym * k };
        var tx = p2.x - cm.x;
        var ty = p2.y - cm.y;
        return {
            controlPoint1: this.point(m1.x + tx, m1.y + ty, 0),
            controlPoint2: this.point(m2.x + tx, m2.y + ty, 0)
        };
    };
    ImageEditor.prototype.point = function (x, y, time) {
        this.freehandDrawObj.pointX = x;
        this.freehandDrawObj.pointY = y;
        return { x: this.freehandDrawObj.pointX, y: this.freehandDrawObj.pointY, time: time };
    };
    ImageEditor.prototype.startDraw = function (context, controlPoint1, controlPoint2, startPoint, endPoint, minStrokeWidth, maxStrokeWidth) {
        var tempVelocity;
        tempVelocity = this.pointVelocity(startPoint);
        tempVelocity = 0.7 * tempVelocity + (1 - 0.7) * this.freehandDrawObj.lastVelocity;
        var newWidth = Math.max(maxStrokeWidth / (0.7 + 1), minStrokeWidth);
        this.drawCurve(this.freehandDrawObj.time, newWidth, context, controlPoint1, controlPoint2, startPoint, endPoint, maxStrokeWidth);
        this.freehandDrawObj.lastVelocity = tempVelocity;
        this.freehandDrawObj.time = newWidth;
    };
    ImageEditor.prototype.pointVelocity = function (startPoint) {
        return (this.freehandDrawObj.time !== startPoint.time) ? this.distanceTo(startPoint) /
            (this.freehandDrawObj.time - startPoint.time) : 0;
    };
    ImageEditor.prototype.distanceTo = function (start) {
        return Math.sqrt(Math.pow(this.freehandDrawObj.pointX - start.x, 2) + Math.pow(this.freehandDrawObj.pointY - start.y, 2));
    };
    ImageEditor.prototype.drawCurve = function (startWidth, endWidth, context, controlPoint1, controlPoint2, startPoint, endPoint, maxStrokeWidth) {
        var width;
        var i;
        var t1;
        var t2;
        var t3;
        var u1;
        var u2;
        var u3;
        var x;
        var y;
        var widthValue = endWidth - startWidth;
        var bezierLength = this.bezierLength(controlPoint1, controlPoint2, startPoint, endPoint);
        var drawSteps = Math.ceil(bezierLength) * 2;
        context.beginPath();
        for (i = 0; i < drawSteps; i++) {
            t1 = i / drawSteps;
            t2 = t1 * t1;
            t3 = t2 * t1;
            u1 = 1 - t1;
            u2 = u1 * u1;
            u3 = u2 * u1;
            x = u3 * startPoint.x;
            x += 3 * u2 * t1 * controlPoint1.x;
            x += 3 * u1 * t2 * controlPoint2.x;
            x += t3 * endPoint.x;
            y = u3 * startPoint.y;
            y += 3 * u2 * t1 * controlPoint1.y;
            y += 3 * u1 * t2 * controlPoint2.y;
            y += t3 * endPoint.y;
            width = Math.min(startWidth + t3 * widthValue, maxStrokeWidth);
            this.drawArc(x, y, width, context);
        }
        context.closePath();
        context.fill();
    };
    ImageEditor.prototype.bezierLength = function (controlPoint1, controlPoint2, startPoint, endPoint) {
        var steps = 10;
        var length = 0;
        var i;
        var t;
        var pointx1;
        var pointy1;
        var pointx2;
        var pointy2;
        var pointx3;
        var pointy3;
        for (i = 0; i <= steps; i++) {
            t = i / steps;
            pointx1 = this.bezierPoint(t, startPoint.x, controlPoint1.x, controlPoint2.x, endPoint.x);
            pointy1 = this.bezierPoint(t, startPoint.y, controlPoint1.y, controlPoint2.y, endPoint.y);
            if (i > 0) {
                pointx3 = pointx1 - pointx2;
                pointy3 = pointy1 - pointy2;
                length += Math.sqrt(pointx3 * pointx3 + pointy3 * pointy3);
            }
            pointx2 = pointx1;
            pointy2 = pointy1;
        }
        return length;
    };
    ImageEditor.prototype.bezierPoint = function (t, startpoint, cp1, cp2, endpoint) {
        return startpoint * (1.0 - t) * (1.0 - t) * (1.0 - t) + 3.0 * cp1 * (1.0 - t) * (1.0 - t) * t + 3.0 *
            cp2 * (1.0 - t) * t * t + endpoint * t * t * t;
    };
    ImageEditor.prototype.drawArc = function (x, y, size, context) {
        if ((x > this.destLeft && y > this.destTop && x < (this.destLeft + this.destWidth) && y < (this.destTop + this.destHeight) ||
            (context !== this.lowerContext && context !== this.upperContext))) {
            context.moveTo(x, y);
            context.arc(x, y, size, 0, 2 * Math.PI, false);
        }
    };
    ImageEditor.prototype.freehandRedraw = function (context, points) {
        var temp = context.filter;
        context.filter = 'none';
        if (!isNullOrUndefined(points)) {
            this.pointColl[this.freehandCounter] = {};
            this.pointColl[this.freehandCounter].points = points;
            this.pointColl[this.freehandCounter].strokeColor = this.activeObj.strokeSettings.strokeColor;
            this.pointColl[this.freehandCounter].strokeWidth = this.penStrokeWidth;
            this.pointColl[this.freehandCounter].flipState = this.currFlipState;
            this.freehandCounter++;
        }
        for (var n = 0; n < this.freehandCounter; n++) {
            this.points = extend([], this.pointColl[n].points);
            this.pointCounter = 0;
            var len = this.points.length;
            var controlPoint1 = void 0;
            var controlPoint2 = void 0;
            var startPoint = void 0;
            var endPoint = void 0;
            var minStrokeWidth = void 0;
            var maxStrokeWidth = void 0;
            if (len > 0) {
                context.fillStyle = this.pointColl[n].strokeColor;
                minStrokeWidth = maxStrokeWidth = this.penStrokeWidth = this.pointColl[n].strokeWidth;
            }
            if (len === 1) {
                controlPoint1 = controlPoint2 = startPoint = endPoint = this.points[0];
                this.startDraw(context, controlPoint1, controlPoint2, startPoint, endPoint, minStrokeWidth, maxStrokeWidth);
            }
            for (var l = 0; l < len - 3; l++) {
                if (this.points[l + 1] && this.points[l + 2] && this.points[l + 2]) {
                    controlPoint1 = (this.calcCurveControlPoints(this.points[l + 0], this.points[l + 1], this.points[l + 2])).controlPoint2;
                    controlPoint2 = (this.calcCurveControlPoints(this.points[l + 1], this.points[l + 2], this.points[l + 3])).controlPoint1;
                    startPoint = this.points[l + 1];
                    endPoint = this.points[l + 2];
                    this.startDraw(context, controlPoint1, controlPoint2, startPoint, endPoint, minStrokeWidth, maxStrokeWidth);
                }
            }
            context.closePath();
        }
        context.filter = temp;
    };
    ImageEditor.prototype.redrawImgWithObj = function () {
        this.lowerContext.filter = this.canvasFilter;
        this.getCurrentFlipState();
        if (this.isCircleCrop) {
            this.cropCircle(this.lowerContext);
        }
        var tempFilter = this.lowerContext.filter;
        this.lowerContext.filter = this.getDefaultFilter();
        this.iterateObjColl();
        this.freehandRedraw(this.lowerContext);
        this.lowerContext.filter = tempFilter;
    };
    ImageEditor.prototype.refreshToolbar = function (type, isApplyBtn, isCropping, isZooming, cType) {
        if (!this.isImageLoaded) {
            return;
        }
        var args = { toolbarType: type };
        if (type !== 'filter' && type !== 'color') {
            if (document.getElementById(this.element.id + '_toolbar') && this.defToolbarItems.length > 0) {
                getComponent(document.getElementById(this.element.id + '_toolbar'), 'toolbar').destroy();
            }
            if (document.getElementById(this.element.id + '_bottomToolbar') && this.defToolbarItems.length > 0) {
                if (document.getElementById(this.element.id + '_bottomToolbar').className.indexOf('e-control') > -1) {
                    getComponent(document.getElementById(this.element.id + '_bottomToolbar'), 'toolbar').destroy();
                }
            }
        }
        this.refreshSlider();
        switch (type) {
            case 'main':
                if (Browser.isDevice) {
                    if (isCropping) {
                        this.initToolbarItem(false, true, true);
                    }
                    else {
                        this.initToolbarItem(false, true, null);
                    }
                }
                else if (!Browser.isDevice || isZooming) {
                    if (isZooming) {
                        this.initToolbarItem(isApplyBtn, Browser.isDevice, null);
                    }
                    else {
                        this.initToolbarItem(isApplyBtn, Browser.isDevice, null);
                    }
                }
                if (Browser.isDevice) {
                    this.initBottomToolbar();
                }
                break;
            case 'shapes':
                if (Browser.isDevice) {
                    this.initToolbarItem(false, true, true);
                }
                if (this.activeObj.shape === 'line') {
                    args.toolbarItems = ['strokeColor', 'strokeWidth'];
                }
                else {
                    args.toolbarItems = ['fillColor', 'strokeColor', 'strokeWidth'];
                }
                this.trigger('toolbarUpdating', args);
                this.initShapesToolbarItem(args.toolbarItems);
                break;
            case 'text':
                if (Browser.isDevice) {
                    this.initToolbarItem(false, true, true);
                }
                args.toolbarItems = ['fontFamily', 'fontStyle', 'fontSize', 'fontColor'];
                this.trigger('toolbarUpdating', args);
                this.initTextToolbarItem(args.toolbarItems);
                break;
            case 'pen':
                if (Browser.isDevice) {
                    this.initToolbarItem(false, true, true);
                }
                args.toolbarItems = ['strokeColor', 'strokeWidth'];
                this.trigger('toolbarUpdating', args);
                this.initPenToolbarItem(args.toolbarItems);
                break;
            case 'pan':
                this.initZoomToolbarItem();
                break;
            case 'adjustment':
                if (Browser.isDevice) {
                    this.initToolbarItem(false, true, true);
                }
                this.initAdjustmentToolbarItem();
                break;
            case 'filter':
                this.updateContextualToolbar(type);
                break;
            case 'color':
                this.updateContextualToolbar(type, cType);
                break;
        }
        this.refreshDropDownBtn(isCropping);
    };
    ImageEditor.prototype.getAdjustmentToolbarItem = function () {
        var toolbarItems = [];
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Brightness') > -1)) {
            toolbarItems.push({ id: this.element.id + '_brightness', prefixIcon: 'e-icons e-brightness', cssClass: 'top-icon e-brightness',
                tooltipText: this.l10n.getConstant('Brightness'), align: 'Center' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Contrast') > -1)) {
            toolbarItems.push({ id: this.element.id + '_contrast', prefixIcon: 'e-icons e-contrast', cssClass: 'top-icon e-contrast',
                tooltipText: this.l10n.getConstant('Contrast'), align: 'Center' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Hue') > -1)) {
            toolbarItems.push({ id: this.element.id + '_hue', prefixIcon: 'e-icons e-fade', cssClass: 'top-icon e-fade',
                tooltipText: this.l10n.getConstant('Hue'), align: 'Center' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Saturation') > -1)) {
            toolbarItems.push({ id: this.element.id + '_saturation', prefixIcon: 'e-icons e-saturation', cssClass: 'top-icon e-saturation',
                tooltipText: this.l10n.getConstant('Saturation'), align: 'Center' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Exposure') > -1)) {
            toolbarItems.push({ id: this.element.id + '_exposure', prefixIcon: 'e-icons e-grain', cssClass: 'top-icon e-grain',
                tooltipText: this.l10n.getConstant('Exposure'), align: 'Center' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Opacity') > -1)) {
            toolbarItems.push({ id: this.element.id + '_opacity', prefixIcon: 'e-icons e-opacity', cssClass: 'top-icon e-opacity',
                tooltipText: this.l10n.getConstant('Opacity'), align: 'Center' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Blur') > -1)) {
            toolbarItems.push({ id: this.element.id + '_blur', prefixIcon: 'e-icons e-tint', cssClass: 'top-icon e-tint',
                tooltipText: this.l10n.getConstant('Blur'), align: 'Center' });
        }
        var tempToolbarItems = this.processToolbar('center');
        for (var i = 0, len = tempToolbarItems.length; i < len; i++) {
            toolbarItems.push(tempToolbarItems[i]);
        }
        if (!Browser.isDevice) {
            toolbarItems.push({ id: this.element.id + '_ok', prefixIcon: 'e-icons e-check', cssClass: 'top-icon e-tick',
                tooltipText: this.l10n.getConstant('OK'), align: 'Right' });
            toolbarItems.push({ id: this.element.id + '_cancel', prefixIcon: 'e-icons e-close', cssClass: 'top-icon e-save',
                tooltipText: this.l10n.getConstant('Cancel'), align: 'Right' });
        }
        return toolbarItems;
    };
    ImageEditor.prototype.getFilterToolbarItem = function () {
        var toolbarItems = [];
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Default') > -1)) {
            toolbarItems.push({ id: this.element.id + '_default', prefixIcon: 'e-icons e-none', cssClass: 'top-icon e-none',
                tooltipText: this.l10n.getConstant('Default'), align: 'Center',
                template: '<div class="filterwrapper" style="box-sizing: content-box;"><canvas id=' + this.element.id + '_defaultCanvas' + '></canvas><div style="text-align:center;"><span>' + this.l10n.getConstant('Default') + '</span></div></div>' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Chrome') > -1)) {
            toolbarItems.push({ id: this.element.id + '_chrome', prefixIcon: 'e-icons e-none', cssClass: 'top-icon e-none',
                tooltipText: this.l10n.getConstant('Chrome'), align: 'Center',
                template: '<div class="filterwrapper" style="box-sizing: content-box;"><canvas id=' + this.element.id + '_chromeCanvas' + '></canvas><div style="text-align:center;"><span>' + this.l10n.getConstant('Chrome') + '</span></div></div>' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Cold') > -1)) {
            toolbarItems.push({ id: this.element.id + '_cold', prefixIcon: 'e-icons e-none', cssClass: 'top-icon e-none',
                tooltipText: this.l10n.getConstant('Cold'), align: 'Center',
                template: '<div class="filterwrapper" style="box-sizing: content-box;"><canvas id=' + this.element.id + '_coldCanvas' + '></canvas><div style="text-align:center;"><span>' + this.l10n.getConstant('Cold') + '</span></div></div>' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Warm') > -1)) {
            toolbarItems.push({ id: this.element.id + '_warm', prefixIcon: 'e-icons e-none', cssClass: 'top-icon e-none',
                tooltipText: this.l10n.getConstant('Warm'), align: 'Center',
                template: '<div class="filterwrapper" style="box-sizing: content-box;"><canvas id=' + this.element.id + '_warmCanvas' + '></canvas><div style="text-align:center;"><span>' + this.l10n.getConstant('Warm') + '</span></div></div>' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Grayscale') > -1)) {
            toolbarItems.push({ id: this.element.id + '_grayscale', prefixIcon: 'e-icons e-none', cssClass: 'top-icon e-none',
                tooltipText: this.l10n.getConstant('Grayscale'), align: 'Center',
                template: '<div class="filterwrapper" style="box-sizing: content-box;"><canvas id=' + this.element.id + '_grayscaleCanvas' + '></canvas><div style="text-align:center;"><span>' + this.l10n.getConstant('Grayscale') + '</span></div></div>' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Sepia') > -1)) {
            toolbarItems.push({ id: this.element.id + '_sepia', prefixIcon: 'e-icons e-none', cssClass: 'top-icon e-none',
                tooltipText: this.l10n.getConstant('Sepia'), align: 'Center',
                template: '<div class="filterwrapper" style="box-sizing: content-box;"><canvas id=' + this.element.id + '_sepiaCanvas' + '></canvas><div style="text-align:center;"><span>' + this.l10n.getConstant('Sepia') + '</span></div></div>' });
        }
        if (isNullOrUndefined(this.toolbar) || (!isNullOrUndefined(this.toolbar) && this.toolbar.indexOf('Invert') > -1)) {
            toolbarItems.push({ id: this.element.id + '_invert', prefixIcon: 'e-icons e-none', cssClass: 'top-icon e-none',
                tooltipText: this.l10n.getConstant('Invert'), align: 'Center',
                template: '<div class="filterwrapper" style="box-sizing: content-box;"><canvas id=' + this.element.id + '_invertCanvas' + '></canvas><div style="text-align:center;"><span>' + this.l10n.getConstant('Invert') + '</span></div></div>' });
        }
        var tempToolbarItems = this.processToolbar('center');
        for (var i = 0, len = tempToolbarItems.length; i < len; i++) {
            toolbarItems.push(tempToolbarItems[i]);
        }
        return toolbarItems;
    };
    ImageEditor.prototype.getPenToolbarItem = function (items) {
        var toolbarItems = [];
        if (items.indexOf('strokeColor') > -1) {
            toolbarItems.push({ prefixIcon: 'e-icons e-copy', id: this.element.id + '_pen_strokecolor',
                cssClass: 'top-icon e-pen-stroke-color',
                tooltipText: this.l10n.getConstant('StrokeColor'), align: 'Center', type: 'Input',
                template: '<button id="' + this.element.id + '_penColorBtn"></button>' });
        }
        if (items.indexOf('strokeWidth') > -1) {
            toolbarItems.push({ prefixIcon: 'e-icons e-copy', cssClass: 'top-icon e-size',
                tooltipText: this.l10n.getConstant('StrokeWidth'),
                align: 'Center', type: 'Input', template: '<button id="' + this.element.id + '_penStrokeWidth"></button>' });
        }
        var tempToolbarItems = this.processSubToolbar(items);
        for (var i = 0, len = tempToolbarItems.length; i < len; i++) {
            toolbarItems.push(tempToolbarItems[i]);
        }
        if (!Browser.isDevice) {
            toolbarItems.push({ id: this.element.id + '_ok', prefixIcon: 'e-icons e-check', cssClass: 'top-icon e-tick',
                tooltipText: this.l10n.getConstant('OK'), align: 'Right' });
            toolbarItems.push({ id: this.element.id + '_cancel', prefixIcon: 'e-icons e-close', cssClass: 'top-icon e-save',
                tooltipText: this.l10n.getConstant('Cancel'), align: 'Right' });
        }
        return toolbarItems;
    };
    ImageEditor.prototype.initPenToolbarItem = function (items) {
        var _this = this;
        var leftItem = this.getLeftToolbarItem();
        var rightItem = this.getRightToolbarItem();
        var mainItem = this.getPenToolbarItem(items);
        var zoomItem = this.getZoomToolbarItem();
        if (Browser.isDevice) {
            this.defToolbarItems = mainItem;
        }
        else {
            this.defToolbarItems = leftItem.concat(zoomItem, mainItem, rightItem);
        }
        var toolbar = new Toolbar({
            width: '100%',
            items: this.defToolbarItems,
            clicked: this.defToolbarClicked.bind(this),
            created: function () {
                _this.createPenColor(items);
                _this.createPenBtn(items);
                if (!Browser.isDevice) {
                    _this.renderSaveBtn();
                }
                _this.trigger('toolbarCreated', { toolbarType: 'pen' });
                if (Browser.isDevice) {
                    if (_this.defToolbarItems.length > 0 && (!isNullOrUndefined(document.getElementById(_this.element.id + '_toolbar')))) {
                        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                        toolbar.refreshOverflow();
                    }
                }
                else {
                    _this.createLeftToolbarControls();
                    if (_this.defToolbarItems.length > 0 && (!isNullOrUndefined(document.getElementById(_this.element.id + '_toolbar')))) {
                        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                        toolbar.refreshOverflow();
                    }
                }
            }
        });
        if (Browser.isDevice) {
            toolbar.appendTo('#' + this.element.id + '_bottomToolbar');
        }
        else {
            toolbar.appendTo('#' + this.element.id + '_toolbar');
        }
        this.enableDisableToolbarBtn();
    };
    ImageEditor.prototype.createPenColor = function (items) {
        var _this = this;
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var proxy = this;
        if (items.indexOf('strokeColor') > -1) {
            this.element.querySelector('.e-template.e-pen-stroke-color').appendChild(this.createElement('input', {
                id: this.element.id + '_pen_stroke'
            }));
            var penColor = new ColorPicker({
                modeSwitcher: false, value: '#fff',
                showButtons: false, mode: 'Palette', cssClass: 'e-pen-color',
                change: function (args) {
                    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                    var temp = extend([], _this.pointColl, [], true);
                    _this.updateFreehandDrawColorChange();
                    var prevCropObj = extend({}, _this.cropObj, {}, true);
                    var prevObj = _this.getCurrentObj();
                    prevObj.objColl = extend([], _this.objColl, [], true);
                    prevObj.pointColl = extend([], _this.pointColl, [], true);
                    prevObj.afterCropActions = extend([], _this.afterCropActions, [], true);
                    _this.pointColl = temp;
                    proxy.isFreehandDrawCustomized = true;
                    proxy.activeObj.strokeSettings.strokeColor = proxy.selectedFreehandColor = args.currentValue.hex;
                    if (_this.isFreehandDrawEditing) {
                        _this.upperContext.clearRect(0, 0, _this.upperCanvas.width, _this.upperCanvas.height);
                        _this.pointColl[_this.freehandDrawSelectedIndex].strokeColor = args.currentValue.hex;
                        _this.hoverFreehandraw(args.currentValue.hex);
                        _this.updateUndoRedoColl('freehanddrawCustomized', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
                    }
                    else if (!proxy.togglePen) {
                        proxy.redrawShape(_this.activeObj);
                    }
                    strokeDDB_3.element.children[0].style.backgroundColor = args.currentValue.rgba;
                    strokeDDB_3.toggle();
                }
            }, '#' + this.element.id + '_pen_stroke');
            var strokeDDB_3 = new DropDownButton({
                open: function (args) {
                    if (Browser.isDevice) {
                        args.element.parentElement.style.top = strokeDDB_3.element.getBoundingClientRect().top -
                            args.element.parentElement.offsetHeight + 'px';
                        args.element.parentElement.style.left = _this.element.offsetLeft + 'px';
                    }
                },
                target: '.e-pen-color',
                iconCss: 'e-dropdownbtn-preview'
            }, '#' + this.element.id + '_penColorBtn');
            penColor.inline = true;
            if (!isNullOrUndefined(this.freehandDrawSelectedIndex) && this.freehandDrawSelectedIndex > -1) {
                this.element.querySelector('.e-pen-stroke-color.e-template .e-dropdownbtn-preview').style.background
                    = this.selectedFreehandColor === '#42a5f5' ? this.tempFreeHandDrawEditingStyles.strokeColor :
                        this.pointColl[this.freehandDrawSelectedIndex].strokeColor;
            }
            else {
                this.element.querySelector('.e-pen-stroke-color.e-template .e-dropdownbtn-preview').style.background
                    = '#fff';
            }
        }
    };
    ImageEditor.prototype.createPenBtn = function (items) {
        var _this = this;
        var strokeWidthItems = [
            { id: '1', text: this.l10n.getConstant('XSmall') },
            { id: '2', text: this.l10n.getConstant('Small') },
            { id: '3', text: this.l10n.getConstant('Medium') },
            { id: '4', text: this.l10n.getConstant('Large') },
            { id: '5', text: this.l10n.getConstant('XLarge') }
        ];
        if (items.indexOf('strokeWidth') > -1) {
            var strokeWidthBtn = document.getElementById(this.element.id + '_penStrokeWidth');
            var spanElem_3 = document.createElement('span');
            if (!isNullOrUndefined(this.freehandDrawSelectedIndex) && this.freehandDrawSelectedIndex > -1) {
                spanElem_3.innerHTML = this.getPenStroke(this.pointColl[this.freehandDrawSelectedIndex].strokeWidth);
            }
            else {
                spanElem_3.innerHTML = this.l10n.getConstant('Small');
            }
            spanElem_3.className = 'e-pen-stroke-width';
            strokeWidthBtn.appendChild(spanElem_3);
            var drpDownBtn_2 = new DropDownButton({ items: strokeWidthItems,
                open: function (args) {
                    if (Browser.isDevice) {
                        args.element.parentElement.style.top = drpDownBtn_2.element.getBoundingClientRect().top -
                            args.element.parentElement.offsetHeight + 'px';
                    }
                    var activeBtn = spanElem_3.innerHTML;
                    args.element.querySelector('[aria-label = ' + '"' + activeBtn + '"' + ']').classList.add('e-selected-btn');
                },
                select: function (args) {
                    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                    var temp = extend([], _this.pointColl, [], true);
                    _this.updateFreehandDrawColorChange();
                    var prevCropObj = extend({}, _this.cropObj, {}, true);
                    var prevObj = _this.getCurrentObj();
                    prevObj.objColl = extend([], _this.objColl, [], true);
                    prevObj.pointColl = extend([], _this.pointColl, [], true);
                    prevObj.afterCropActions = extend([], _this.afterCropActions, [], true);
                    _this.pointColl = temp;
                    _this.isFreehandDrawCustomized = true;
                    spanElem_3.textContent = args.item.text;
                    _this.setPenStroke(args.item.id);
                    if (_this.isFreehandDrawEditing) {
                        _this.upperContext.clearRect(0, 0, _this.upperCanvas.width, _this.upperCanvas.height);
                        _this.hoverFreehandraw(null, _this.penStrokeWidth);
                        _this.pointColl[_this.freehandDrawSelectedIndex].strokeWidth = _this.penStrokeWidth;
                        _this.updateUndoRedoColl('freehanddrawCustomized', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
                    }
                    if (Browser.isDevice) {
                        if (!isNullOrUndefined(document.getElementById(_this.element.id + '_bottomToolbar'))) {
                            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                            var toolbar_8 = getComponent(_this.element.id + '_bottomToolbar', 'toolbar');
                            toolbar_8.refreshOverflow();
                        }
                    }
                    else {
                        if (!isNullOrUndefined(document.getElementById(_this.element.id + '_toolbar'))) {
                            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                            var toolbar_9 = getComponent(_this.element.id + '_toolbar', 'toolbar');
                            toolbar_9.refreshOverflow();
                        }
                    }
                }
            });
            // Render initialized DropDownButton.
            drpDownBtn_2.appendTo('#' + this.element.id + '_penStrokeWidth');
        }
    };
    ImageEditor.prototype.updateFreehandDrawColorChange = function () {
        if (!isNullOrUndefined(this.freehandDrawSelectedIndex) && !isNullOrUndefined(this.pointColl[this.freehandDrawSelectedIndex])
            && this.pointColl[this.freehandDrawSelectedIndex].strokeColor === '#42a5f5') {
            this.pointColl[this.freehandDrawSelectedIndex].strokeColor = this.tempFreeHandDrawEditingStyles.strokeColor;
        }
    };
    ImageEditor.prototype.setPenStroke = function (args) {
        switch (parseInt(args, 10)) {
            case 1:
                this.penStrokeWidth = 1;
                break;
            case 2:
                this.penStrokeWidth = 2;
                break;
            case 3:
                this.penStrokeWidth = 3;
                break;
            case 4:
                this.penStrokeWidth = 4;
                break;
            case 5:
                this.penStrokeWidth = 5;
                break;
        }
    };
    ImageEditor.prototype.getPenStroke = function (value) {
        var textContent = '';
        if (value === 1) {
            textContent = this.l10n.getConstant('XSmall');
        }
        else if (value === 2) {
            textContent = this.l10n.getConstant('Small');
        }
        else if (value === 3) {
            textContent = this.l10n.getConstant('Medium');
        }
        else if (value === 4) {
            textContent = this.l10n.getConstant('Large');
        }
        else if (value === 5) {
            textContent = this.l10n.getConstant('XLarge');
        }
        return textContent;
    };
    ImageEditor.prototype.initAdjustmentToolbarItem = function () {
        var _this = this;
        var leftItem = this.getLeftToolbarItem(null);
        var rightItem = this.getRightToolbarItem();
        var mainItem = this.getAdjustmentToolbarItem();
        var zoomItem = this.getZoomToolbarItem();
        if (Browser.isDevice) {
            this.defToolbarItems = mainItem;
        }
        else {
            this.defToolbarItems = leftItem.concat(zoomItem, mainItem, rightItem);
        }
        var toolbar = new Toolbar({
            width: '100%',
            items: this.defToolbarItems,
            clicked: this.defToolbarClicked.bind(this),
            created: function () {
                if (!Browser.isDevice) {
                    _this.renderSaveBtn();
                }
                if (Browser.isDevice) {
                    if (_this.defToolbarItems.length > 0 && (!isNullOrUndefined(document.getElementById(_this.element.id + '_toolbar')))) {
                        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                        toolbar.refreshOverflow();
                    }
                }
                else {
                    _this.createLeftToolbarControls();
                    if (_this.defToolbarItems.length > 0 && (!isNullOrUndefined(document.getElementById(_this.element.id + '_toolbar')))) {
                        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                        toolbar.refreshOverflow();
                    }
                }
            }
        });
        if (Browser.isDevice) {
            toolbar.appendTo('#' + this.element.id + '_bottomToolbar');
        }
        else {
            toolbar.appendTo('#' + this.element.id + '_toolbar');
        }
        this.enableDisableToolbarBtn();
    };
    ImageEditor.prototype.initFilterToolbarItem = function () {
        var _this = this;
        var mainItem = this.getFilterToolbarItem();
        if (document.querySelector('#' + this.element.id + '_contextualToolbar').classList.contains('e-control')) {
            getComponent(document.getElementById(this.element.id + '_contextualToolbar'), 'toolbar').destroy();
        }
        var toolbar = new Toolbar({
            width: '100%',
            items: mainItem,
            clicked: this.contextualToolbarClicked.bind(this),
            created: function () {
                _this.createCanvasFilter();
                if (_this.currentFilter === '') {
                    _this.currentFilter = _this.element.id + '_default';
                }
                var hdrWrapper = document.querySelector('#' + _this.element.id + '_headWrapper');
                if (hdrWrapper) {
                    hdrWrapper.style.display = 'none';
                }
                document.getElementById(_this.currentFilter + 'Canvas').parentElement.parentElement.classList.add('e-selected');
                _this.enableDisableToolbarBtn();
                toolbar.refreshOverflow();
            }
        });
        toolbar.appendTo('#' + this.element.id + '_contextualToolbar');
    };
    ImageEditor.prototype.getCurrentCanvasData = function () {
        var tempFilter = this.lowerContext.filter;
        this.lowerContext.filter = 'none';
        var objColl = extend([], this.objColl, null, true);
        this.objColl = [];
        this.renderImage();
        var data = this.lowerContext.getImageData(this.destLeft, this.destTop, this.destWidth, this.destHeight);
        this.objColl = objColl;
        this.iterateObjColl();
        this.lowerContext.filter = tempFilter;
        return data;
    };
    ImageEditor.prototype.createCanvasFilter = function () {
        var imageData = this.getCurrentCanvasData();
        this.inMemoryCanvas.width = imageData.width;
        this.inMemoryCanvas.height = imageData.height;
        this.inMemoryContext.putImageData(imageData, 0, 0);
        var noFilter = document.querySelector('#' + this.element.id + '_defaultCanvas');
        var ctx = noFilter.getContext('2d');
        noFilter.style.width = '100px';
        noFilter.style.height = '100px';
        ctx.filter = this.updateAdjustment('default', null, true);
        ctx.drawImage(this.inMemoryCanvas, 0, 0, 300, 150);
        var chrome = document.querySelector('#' + this.element.id + '_chromeCanvas');
        ctx = chrome.getContext('2d');
        chrome.style.width = '100px';
        chrome.style.height = '100px';
        ctx.filter = this.updateAdjustment('chrome', null, true);
        ctx.drawImage(this.inMemoryCanvas, 0, 0, 300, 150);
        var cold = document.querySelector('#' + this.element.id + '_coldCanvas');
        ctx = cold.getContext('2d');
        cold.style.width = '100px';
        cold.style.height = '100px';
        ctx.filter = this.updateAdjustment('cold', null, true);
        ctx.drawImage(this.inMemoryCanvas, 0, 0, 300, 150);
        var warm = document.querySelector('#' + this.element.id + '_warmCanvas');
        ctx = warm.getContext('2d');
        warm.style.width = '100px';
        warm.style.height = '100px';
        ctx.filter = this.updateAdjustment('warm', null, true);
        ctx.drawImage(this.inMemoryCanvas, 0, 0, 300, 150);
        var grayscale = document.querySelector('#' + this.element.id + '_grayscaleCanvas');
        ctx = grayscale.getContext('2d');
        grayscale.style.width = '100px';
        grayscale.style.height = '100px';
        ctx.filter = this.updateAdjustment('grayscale', null, true);
        ctx.drawImage(this.inMemoryCanvas, 0, 0, 300, 150);
        var sepia = document.querySelector('#' + this.element.id + '_sepiaCanvas');
        ctx = sepia.getContext('2d');
        sepia.style.width = '100px';
        sepia.style.height = '100px';
        ctx.filter = this.updateAdjustment('sepia', null, true);
        ctx.drawImage(this.inMemoryCanvas, 0, 0, 300, 150);
        var invert = document.querySelector('#' + this.element.id + '_invertCanvas');
        ctx = invert.getContext('2d');
        invert.style.width = '100px';
        invert.style.height = '100px';
        ctx.filter = this.updateAdjustment('invert', null, true);
        ctx.drawImage(this.inMemoryCanvas, 0, 0, 300, 150);
    };
    ImageEditor.prototype.callUpdateCurrentTransformedState = function () {
        var tempObjColl = extend([], this.objColl, [], true);
        var tempActiveObj = extend({}, this.activeObj, {}, true);
        this.objColl = [];
        this.refreshActiveObj();
        this.isRotateZoom = true;
        this.updateCurrentTransformedState('initial');
        if (this.degree === 0 && this.rotateFlipColl.length > 0) {
            this.destLeft += this.totalPannedPoint.x;
            this.destTop += this.totalPannedPoint.y;
        }
        this.destLeft += this.totalPannedInternalPoint.x;
        this.destTop += this.totalPannedInternalPoint.y;
        var temp = this.lowerContext.filter;
        if (this.degree === 0) {
            this.setDestPointsForFlipState();
        }
        this.updateBrightnessFilter();
        this.lowerContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, this.destLeft, this.destTop, this.destWidth, this.destHeight);
        this.updateCurrentTransformedState('reverse');
        if (this.degree === 0 && this.rotateFlipColl.length > 0) {
            this.destLeft += this.totalPannedPoint.x;
            this.destTop += this.totalPannedPoint.y;
        }
        this.isRotateZoom = false;
        this.objColl = tempObjColl;
        var tempTogglePen = this.togglePen;
        this.togglePen = false;
        this.lowerContext.filter = 'none';
        this.iterateObjColl();
        this.destLeft += this.totalPannedInternalPoint.x;
        this.destTop += this.totalPannedInternalPoint.y;
        this.freehandRedraw(this.lowerContext);
        this.destLeft -= this.totalPannedInternalPoint.x;
        this.destTop -= this.totalPannedInternalPoint.y;
        this.togglePen = tempTogglePen;
        this.lowerContext.filter = temp;
        this.activeObj = tempActiveObj;
    };
    ImageEditor.prototype.updateCurrentTransformedState = function (type, isPreventDestination, isRotatePan) {
        if (this.rotateFlipColl.length > 0) {
            if (type === 'initial') {
                this.reverseTransformedState();
                if (isNullOrUndefined(isPreventDestination)) {
                    this.setDestinationPoints();
                }
            }
            this.currentTransformedState(type, null, null, isRotatePan);
        }
        if (this.isCircleCrop || (!isNullOrUndefined(this.currSelectionPoint) && this.currSelectionPoint.shape === 'crop-circle')) {
            if (isRotatePan) {
                this.destLeft += this.totalPannedClientPoint.x;
                this.destTop += this.totalPannedClientPoint.y;
            }
            this.cropCircle(this.lowerContext);
            if (isRotatePan) {
                this.destLeft -= this.totalPannedClientPoint.x;
                this.destTop -= this.totalPannedClientPoint.y;
            }
        }
    };
    ImageEditor.prototype.reverseTransformedState = function () {
        this.lowerContext.setTransform(1, 0, 0, 1, 0, 0);
    };
    ImageEditor.prototype.currentTransformedState = function (type, isPreventDimension, context, isPreventCircleCrop) {
        context = context ? context : this.lowerContext;
        if (type === 'initial') {
            this.iterateRotateFlipColl(context, type);
        }
        else if (type === 'reverse') {
            this.iterateRotateFlipColl(context, type);
            this.setClientTransformedDimension(isPreventDimension);
            if (this.isCircleCrop || (!isNullOrUndefined(this.currSelectionPoint) && this.currSelectionPoint.shape === 'crop-circle' && isNullOrUndefined(isPreventCircleCrop))) {
                if (isPreventCircleCrop) {
                    this.destLeft += this.totalPannedClientPoint.x;
                    this.destTop += this.totalPannedClientPoint.y;
                }
                this.cropCircle(this.lowerContext);
                if (isPreventCircleCrop) {
                    this.destLeft -= this.totalPannedClientPoint.x;
                    this.destTop -= this.totalPannedClientPoint.y;
                }
            }
        }
    };
    ImageEditor.prototype.iterateRotateFlipColl = function (context, type) {
        if (type === 'initial') {
            for (var i = 0; i < this.rotateFlipColl.length; i++) {
                this.setTransform(context, this.rotateFlipColl[i]);
            }
        }
        else if (type === 'reverse') {
            for (var i = this.rotateFlipColl.length - 1; i >= 0; i--) {
                this.setTransform(context, this.rotateFlipColl[i], true);
            }
        }
    };
    ImageEditor.prototype.setTransform = function (context, value, isReverse) {
        if (isReverse && value === 90) {
            value = -90;
        }
        else if (isReverse && value === -90) {
            value = 90;
        }
        if (value === 'horizontal' && this.degree % 90 === 0 && this.degree % 180 !== 0) {
            value = 'vertical';
        }
        else if (value === 'vertical' && this.degree % 90 === 0 && this.degree % 180 !== 0) {
            value = 'horizontal';
        }
        this.isReverseRotate = this.isReverseFlip = true;
        if (isNullOrUndefined(isReverse)) {
            context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        }
        switch (value) {
            case 90:
            case -90:
                context.translate(context.canvas.width / 2, context.canvas.height / 2);
                context.rotate(Math.PI / 180 * value);
                context.translate(-context.canvas.width / 2, -context.canvas.height / 2);
                break;
            case 'horizontal':
                context.translate(context.canvas.width, 0);
                context.scale(-1, 1);
                break;
            case 'vertical':
                context.translate(0, context.canvas.height);
                context.scale(1, -1);
                break;
        }
        this.isReverseRotate = this.isReverseFlip = false;
    };
    ImageEditor.prototype.isObjInsideCropRegion = function (obj) {
        var isInside = false;
        if (obj.activePoint.startX >= this.destLeft && obj.activePoint.endX <= (this.destLeft + this.destWidth)) {
            isInside = true;
        }
        else if (obj.activePoint.startX <= this.destLeft && obj.activePoint.endX >= this.destLeft) {
            isInside = true;
        }
        else if (obj.activePoint.startX <= (this.destLeft + this.destWidth) && obj.activePoint.endX >= (this.destLeft + this.destWidth)) {
            isInside = true;
        }
        else if (obj.activePoint.startY >= this.destTop && obj.activePoint.endY <= (this.destTop + this.destHeight)) {
            isInside = true;
        }
        else if (obj.activePoint.startY <= this.destTop && obj.activePoint.endY >= this.destTop) {
            isInside = true;
        }
        else if (obj.activePoint.startY <= (this.destTop + this.destHeight) && obj.activePoint.endY >= (this.destTop + this.destHeight)) {
            isInside = true;
        }
        return isInside;
    };
    ImageEditor.prototype.panFreehandDrawColl = function (xDiff, yDiff, panRegion) {
        for (var n = 0; n < this.freehandCounter; n++) {
            this.points = extend([], this.pointColl[n].points, []);
            this.pointCounter = 0;
            var len = this.points.length;
            for (var l = 0; l < len; l++) {
                if (panRegion === '' || panRegion === 'vertical') {
                    this.points[l].x += xDiff;
                }
                else {
                    this.points[l].x -= xDiff;
                }
                if (panRegion === '' || panRegion === 'horizontal') {
                    this.points[l].y += yDiff;
                }
                else {
                    this.points[l].y -= yDiff;
                }
            }
        }
        this.freehandRedraw(this.lowerContext);
    };
    ImageEditor.prototype.panObjColl = function (xDiff, yDiff, panRegion) {
        for (var i = 0; i < this.objColl.length; i++) {
            if (panRegion === '' || panRegion === 'vertical') {
                this.objColl[i].activePoint.startX += xDiff;
                this.objColl[i].activePoint.endX += xDiff;
            }
            else {
                this.objColl[i].activePoint.startX -= xDiff;
                this.objColl[i].activePoint.endX -= xDiff;
            }
            if (panRegion === '' || panRegion === 'horizontal') {
                this.objColl[i].activePoint.startY += yDiff;
                this.objColl[i].activePoint.endY += yDiff;
            }
            else {
                this.objColl[i].activePoint.startY -= yDiff;
                this.objColl[i].activePoint.endY -= yDiff;
            }
            this.objColl[i].activePoint.width = this.objColl[i].activePoint.endX -
                this.objColl[i].activePoint.startX;
            this.objColl[i].activePoint.height = this.objColl[i].activePoint.endY -
                this.objColl[i].activePoint.startY;
            this.updateActiveObject(this.objColl[i].activePoint, this.objColl[i]);
            var temp = this.lowerContext.filter;
            this.lowerContext.filter = 'none';
            this.apply(this.objColl[i].shape, this.objColl[i]);
            this.lowerContext.filter = temp;
            this.refreshActiveObj();
        }
    };
    ImageEditor.prototype.cropObjColl = function () {
        if (this.objColl.length > 0) {
            for (var i = 0; i < this.objColl.length; i++) {
                this.objColl[i].imageRatio = { startX: ((this.objColl[i].activePoint.startX -
                        this.activeObj.activePoint.startX) / this.activeObj.activePoint.width),
                    startY: ((this.objColl[i].activePoint.startY -
                        this.activeObj.activePoint.startY) / this.activeObj.activePoint.height),
                    endX: ((this.objColl[i].activePoint.endX -
                        this.activeObj.activePoint.startX) / this.activeObj.activePoint.width),
                    endY: ((this.objColl[i].activePoint.endY -
                        this.activeObj.activePoint.startY) / this.activeObj.activePoint.height),
                    width: this.activeObj.activePoint.width / this.objColl[i].activePoint.width,
                    height: this.activeObj.activePoint.height / this.objColl[i].activePoint.height };
                if (this.objColl[i].shape === 'text') {
                    this.objColl[i].textSettings.fontRatio = this.objColl[i].activePoint.width / this.objColl[i].textSettings.fontSize;
                }
            }
        }
    };
    ImageEditor.prototype.cropFreehandDrawColl = function () {
        for (var n = 0; n < this.freehandCounter; n++) {
            this.points = extend([], this.pointColl[n].points, []);
            this.pointCounter = 0;
            var len = this.points.length;
            for (var l = 0; l < len; l++) {
                this.points[l].ratioX = (this.points[l].x -
                    this.activeObj.activePoint.startX) / this.activeObj.activePoint.width;
                this.points[l].ratioY = (this.points[l].y -
                    this.activeObj.activePoint.startY) / this.activeObj.activePoint.height;
            }
        }
    };
    ImageEditor.prototype.hoverFreehandraw = function (fillStyle, strokeWidth) {
        var context = this.upperContext;
        var idx = -1;
        if (this.freehandDrawHoveredIndex > -1) {
            idx = this.freehandDrawHoveredIndex;
        }
        else {
            idx = this.freehandDrawSelectedIndex;
        }
        this.points = extend([], this.pointColl[idx].points);
        this.pointCounter = 0;
        var len = this.points.length;
        var controlPoint1;
        var controlPoint2;
        var startPoint;
        var endPoint;
        var minStrokeWidth = 0;
        var maxStrokeWidth = 0;
        context.fillStyle = fillStyle ? fillStyle : '#42a5f5';
        context.strokeStyle = '#fff';
        minStrokeWidth = maxStrokeWidth = this.penStrokeWidth = strokeWidth ?
            strokeWidth : this.pointColl[idx].strokeWidth;
        if (len === 1) {
            controlPoint1 = controlPoint2 = startPoint = endPoint = this.points[0];
            this.startDraw(context, controlPoint1, controlPoint2, startPoint, endPoint, minStrokeWidth, maxStrokeWidth);
        }
        for (var l = 0; l < len - 3; l++) {
            if (this.points[l + 1] && this.points[l + 2] && this.points[l + 2]) {
                controlPoint1 = (this.calcCurveControlPoints(this.points[l + 0], this.points[l + 1], this.points[l + 2])).controlPoint2;
                controlPoint2 = (this.calcCurveControlPoints(this.points[l + 1], this.points[l + 2], this.points[l + 3])).controlPoint1;
                startPoint = this.points[l + 1];
                endPoint = this.points[l + 2];
                this.startDraw(context, controlPoint1, controlPoint2, startPoint, endPoint, minStrokeWidth, maxStrokeWidth);
            }
        }
        context.closePath();
    };
    ImageEditor.prototype.pointsHorizontalFlip = function () {
        for (var n = 0; n < this.freehandCounter; n++) {
            if (this.pointColl[n].shapeFlip !== this.currFlipState) {
                this.points = extend([], this.pointColl[n].points, []);
                this.pointCounter = 0;
                var len = this.points.length;
                for (var l = 0; l < len; l++) {
                    if (this.points[l].x <= this.destLeft + (this.destWidth / 2)) {
                        this.points[l].x = (this.destLeft + this.destWidth) - (this.points[l].x - this.destLeft);
                    }
                    else if (this.points[l].x >= this.destLeft + (this.destWidth / 2)) {
                        this.points[l].x = this.destLeft + (this.destLeft + this.destWidth - this.points[l].x);
                    }
                    this.points[l].ratioX = (this.points[l].x - this.destLeft) / this.destWidth;
                    this.points[l].ratioY = (this.points[l].y - this.destTop) / this.destHeight;
                }
                this.pointColl[n].shapeFlip = this.currFlipState;
            }
        }
    };
    ImageEditor.prototype.pointsVerticalFlip = function () {
        for (var n = 0; n < this.freehandCounter; n++) {
            if (this.pointColl[n].shapeFlip !== this.currFlipState) {
                this.points = extend([], this.pointColl[n].points, []);
                this.pointCounter = 0;
                var len = this.points.length;
                for (var l = 0; l < len; l++) {
                    if (this.points[l].y <= this.destTop + (this.destHeight / 2)) {
                        this.points[l].y = (this.destTop + this.destHeight) - (this.points[l].y - this.destTop);
                    }
                    else if (this.points[l].y >= this.destTop + (this.destHeight / 2)) {
                        this.points[l].y = this.destTop + (this.destTop + this.destHeight - this.points[l].y);
                    }
                    this.points[l].ratioX = (this.points[l].x - this.destLeft) / this.destWidth;
                    this.points[l].ratioY = (this.points[l].y - this.destTop) / this.destHeight;
                }
                this.pointColl[n].shapeFlip = this.currFlipState;
            }
        }
    };
    ImageEditor.prototype.flipFreehandrawColl = function (value) {
        if (value.toLowerCase() === 'horizontal') {
            this.pointsHorizontalFlip();
        }
        else if (value.toLowerCase() === 'vertical') {
            this.pointsVerticalFlip();
        }
        else {
            this.pointsHorizontalFlip();
            for (var i = 0; i < this.freehandCounter; i++) {
                this.pointColl[i].shapeFlip = '';
            }
            this.pointsVerticalFlip();
        }
    };
    ImageEditor.prototype.rotateFreehandDrawColl = function () {
        for (var n = 0; n < this.freehandCounter; n++) {
            this.points = extend([], this.pointColl[n].points, []);
            this.pointCounter = 0;
            var len = this.points.length;
            for (var l = 0; l < len; l++) {
                this.points[l].y = this.destTop + (this.destHeight * this.points[l].ratioX);
                this.points[l].x = (this.destLeft + this.destWidth) - (this.destWidth * this.points[l].ratioY);
            }
        }
        // Update current image ratio for all objects
        for (var n = 0; n < this.freehandCounter; n++) {
            this.points = extend([], this.pointColl[n].points, []);
            this.pointCounter = 0;
            var len = this.points.length;
            for (var l = 0; l < len; l++) {
                this.points[l].ratioX = (this.points[l].x - this.destLeft) / this.destWidth;
                this.points[l].ratioY = (this.points[l].y - this.destTop) / this.destHeight;
            }
        }
    };
    ImageEditor.prototype.zoomFreehandDrawColl = function (isPreventApply) {
        for (var n = 0; n < this.freehandCounter; n++) {
            this.points = extend([], this.pointColl[n].points, []);
            this.pointCounter = 0;
            var len = this.points.length;
            for (var l = 0; l < len; l++) {
                this.points[l].x = this.zoomX(this.points[l].ratioX);
                this.points[l].y = this.zoomY(this.points[l].ratioY);
            }
        }
        if (isNullOrUndefined(isPreventApply)) {
            this.freehandRedraw(this.lowerContext);
        }
    };
    ImageEditor.prototype.zoomX = function (x) {
        return (x * this.destWidth) + this.destLeft;
    };
    ImageEditor.prototype.zoomY = function (y) {
        return (y * this.destHeight) + this.destTop;
    };
    ImageEditor.prototype.zoomObjColl = function (preventApply) {
        for (var i = 0; i < this.objColl.length; i++) {
            this.objColl[i].activePoint.startX = (this.objColl[i].imageRatio.startX * this.destWidth) + this.destLeft;
            this.objColl[i].activePoint.startY = (this.objColl[i].imageRatio.startY * this.destHeight) + this.destTop;
            this.objColl[i].activePoint.endX = (this.objColl[i].imageRatio.endX * this.destWidth) + this.destLeft;
            this.objColl[i].activePoint.endY = (this.objColl[i].imageRatio.endY * this.destHeight) + this.destTop;
            this.objColl[i].activePoint.width = this.objColl[i].activePoint.endX -
                this.objColl[i].activePoint.startX;
            this.objColl[i].activePoint.height = this.objColl[i].activePoint.endY -
                this.objColl[i].activePoint.startY;
            if (this.objColl[i].shape === 'text') {
                this.updateFontSize(this.objColl[i]);
            }
            this.updateActiveObject(this.objColl[i].activePoint, this.objColl[i]);
            if (isNullOrUndefined(preventApply)) {
                var temp = this.lowerContext.filter;
                this.lowerContext.filter = 'none';
                this.apply(this.objColl[i].shape, this.objColl[i]);
                this.refreshActiveObj();
                this.lowerContext.filter = temp;
            }
        }
    };
    ImageEditor.prototype.calcRatio = function () {
        var widthRatio;
        var heightRatio;
        if (this.degree === 0 || this.degree % 180 === 0) {
            widthRatio = this.baseImg.width / this.destWidth;
            heightRatio = this.baseImg.height / this.destHeight;
        }
        else {
            widthRatio = this.baseImg.height / this.destWidth;
            heightRatio = this.baseImg.width / this.destHeight;
        }
        return { width: widthRatio, height: heightRatio };
    };
    ImageEditor.prototype.drawCustomSelection = function (cropShape) {
        this.currObjType.isCustomCrop = true;
        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
        this.currObjType.shape = this.activeObj.shape = cropShape.toLowerCase();
        if (this.zoomFactor === 0) {
            if (this.destLeft >= 0 && this.destTop >= 0) {
                this.activeObj.activePoint.startX = this.destLeft;
                this.activeObj.activePoint.startY = this.destTop;
                this.activeObj.activePoint.endX = this.destLeft + this.destWidth;
                this.activeObj.activePoint.endY = this.destTop + this.destHeight;
            }
            else if (this.destLeft >= 0) {
                this.activeObj.activePoint.startX = this.destLeft;
                this.activeObj.activePoint.startY = 7.5;
                this.activeObj.activePoint.endX = this.destLeft + this.destWidth;
                this.activeObj.activePoint.endY = this.lowerCanvas.height - 15;
            }
            else if (this.destTop >= 0) {
                this.activeObj.activePoint.startX = 7.5;
                this.activeObj.activePoint.startY = this.destTop;
                this.activeObj.activePoint.endX = this.lowerCanvas.width - 15;
                this.activeObj.activePoint.endY = this.destTop + this.destHeight;
            }
            else {
                // arcRadius 7.5
                this.activeObj.activePoint.startX = 7.5;
                this.activeObj.activePoint.startY = 7.5;
                this.activeObj.activePoint.endX = this.lowerCanvas.width - 15;
                this.activeObj.activePoint.endY = this.lowerCanvas.height - 15;
            }
        }
        else {
            if (this.destLeft > 0) {
                this.activeObj.activePoint.startX = this.destLeft;
            }
            else {
                this.activeObj.activePoint.startX = 7.5;
            }
            if (this.destTop > 0) {
                this.activeObj.activePoint.startY = this.destTop;
            }
            else {
                this.activeObj.activePoint.startY = 7.5;
            }
            if (this.destLeft + this.destWidth + 15 < this.lowerCanvas.width) {
                this.activeObj.activePoint.endX = this.destLeft + this.destWidth - 15;
            }
            else {
                this.activeObj.activePoint.endX = this.lowerCanvas.width - 15;
            }
            if (this.destTop + this.destHeight + 15 < this.lowerCanvas.height) {
                this.activeObj.activePoint.endY = this.destTop + this.destHeight - 15;
            }
            else {
                this.activeObj.activePoint.endY = this.lowerCanvas.height - 15;
            }
        }
        if (this.activeObj.activePoint.startX < this.destLeft) {
            this.activeObj.activePoint.startX = this.destLeft;
        }
        if (this.activeObj.activePoint.startY < this.destTop) {
            this.activeObj.activePoint.startY = this.destTop;
        }
        if (this.activeObj.activePoint.endX > this.destLeft + this.destWidth) {
            this.activeObj.activePoint.endX = this.destLeft + this.destWidth;
        }
        if (this.activeObj.activePoint.endY > this.destTop + this.destHeight) {
            this.activeObj.activePoint.endY = this.destTop + this.destHeight;
        }
        if (this.activeObj.activePoint.startX === this.destLeft && this.destLeft + this.destWidth > this.lowerCanvas.clientWidth) {
            this.activeObj.activePoint.endX = this.lowerCanvas.clientWidth - 15;
        }
        if (this.activeObj.activePoint.startY === this.destTop && this.destTop + this.destHeight > this.lowerCanvas.clientHeight) {
            this.activeObj.activePoint.endY = this.lowerCanvas.clientHeight - 15;
        }
        this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
        this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
        this.updateActiveObject(this.activeObj.activePoint, this.activeObj);
        this.drawObject('duplicate', this.activeObj, null, null, true);
    };
    ImageEditor.prototype.clearOuterCanvas = function (context) {
        var destLeft = this.destLeft;
        var destTop = this.destTop;
        if (this.currFlipState !== '') {
            this.destLeft = this.lowerCanvas.clientWidth - (this.destWidth + this.destLeft);
            this.destTop = this.lowerCanvas.clientHeight - (this.destHeight + this.destTop);
        }
        if (this.destWidth < this.lowerCanvas.width) {
            var left = this.destLeft > 0 ? this.destLeft : 0;
            context.clearRect(0, 0, left, this.lowerCanvas.height);
            context.clearRect(this.destLeft + this.destWidth, 0, left, this.lowerCanvas.height);
        }
        if (this.destHeight < this.lowerCanvas.height) {
            var top_1 = this.destTop > 0 ? this.destTop : 0;
            context.clearRect(0, 0, this.lowerCanvas.width, top_1);
            context.clearRect(0, this.destTop + this.destHeight, this.lowerCanvas.width, top_1);
        }
        if (this.currFlipState !== '') {
            this.destLeft = destLeft;
            this.destTop = destTop;
        }
    };
    ImageEditor.prototype.cropCircle = function (context, isSave, isFlip) {
        if (isFlip && this.currFlipState !== '') {
            this.setTransform(context, this.currFlipState);
        }
        context.globalCompositeOperation = 'destination-in';
        context.beginPath();
        if (isNullOrUndefined(isSave)) {
            context.arc(this.destLeft + (this.destWidth / 2), this.destTop + (this.destHeight / 2), this.destWidth / 2, 0, Math.PI * 2);
        }
        else {
            context.arc(this.destWidth / 2, this.destHeight / 2, this.destWidth / 2, 0, Math.PI * 2);
        }
        context.closePath();
        context.fill();
        context.restore();
        context.globalCompositeOperation = 'source-over';
        this.currObjType.isActiveObj = this.isCircleCrop = true;
        if (isFlip && this.currFlipState !== '') {
            this.setTransform(context, this.currFlipState);
        }
    };
    ImageEditor.prototype.updateCropObj = function () {
        this.afterCropActions = [];
        var obj = this.getCurrentObj();
        this.cropObj = extend({}, obj, {}, true);
    };
    ImageEditor.prototype.setCurrentObj = function (obj) {
        var isObj = obj ? true : false;
        obj = obj ? obj : this.cropObj;
        this.cropZoomFactor = obj.cropZoom;
        this.defaultZoomFactor = obj.defaultZoom;
        if (!isObj) {
            this.zoomFactor = obj.cropZoom;
        }
        else {
            if (!isNullOrUndefined(obj.activeObj.shape) && obj.activeObj.shape.split('-')[0] === 'crop') {
                this.zoomFactor = obj.cropZoom;
            }
            else {
                this.zoomFactor = obj.defaultZoom;
            }
        }
        this.totalPannedPoint = extend({}, obj.totalPannedPoint, {}, true);
        this.totalPannedClientPoint = extend({}, obj.totalPannedClientPoint, {}, true);
        this.totalPannedInternalPoint = extend({}, obj.totalPannedInternalPoint, {}, true);
        this.tempFlipPanPoint = extend({}, obj.tempFlipPanPoint, {}, true);
        this.rotateFlipColl = extend([], obj.rotateFlipColl, [], true);
        this.degree = obj.degree;
        this.currFlipState = obj.currFlipState;
        this.destLeft = obj.destPoints.startX;
        this.destTop = obj.destPoints.startY;
        this.destWidth = obj.destPoints.width;
        this.destHeight = obj.destPoints.height;
        this.srcLeft = obj.srcPoints.startX;
        this.srcTop = obj.srcPoints.startY;
        this.srcWidth = obj.srcPoints.width;
        this.srcHeight = obj.srcPoints.height;
        this.lowerContext.filter = obj.filter;
        if (this.lowerContext.filter.split(' ').length > 1) {
            if (this.lowerContext.filter.split(' ')[0].split('(')[1].split(')')[0] === '1') {
                this.isBrightnessAdjusted = false;
            }
            else {
                this.isBrightnessAdjusted = true;
            }
        }
        var isCircleCrop = this.isCircleCrop;
        var currSelectionPoint = extend({}, this.currSelectionPoint, {}, true);
        this.currSelectionPoint = null;
        this.isCircleCrop = false;
        this.drawCropSelectionImage(obj, false);
        if (this.degree !== 0) {
            this.currentPannedPoint = { x: 0, y: 0 };
            this.rotatePan();
        }
        this.activeObj = extend({}, obj.activeObj, {}, true);
        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
        if (this.activeObj.activePoint.width !== 0 && this.activeObj.activePoint.height !== 0) {
            this.drawObject('duplicate');
        }
        var activeObj = extend({}, obj.activeObj, {}, true);
        var isAfterCropAction = false;
        this.afterCropActions = this.alignRotateFlipColl(this.afterCropActions);
        var afterCropActions = extend([], this.afterCropActions, [], true);
        if (!isObj && afterCropActions.length > 0) {
            isAfterCropAction = true;
            for (var i = 0; i < afterCropActions.length; i++) {
                if (this.degree % 90 === 0 && this.degree % 180 !== 0 &&
                    (afterCropActions[i] === 'horizontalflip' || afterCropActions[i] === 'verticalflip')) {
                    this.rotatedFlipCropSelection = true;
                }
                this.updateTransform(afterCropActions[i]);
                if (afterCropActions[i] === 'horizontalflip' || afterCropActions[i] === 'verticalflip') {
                    if (afterCropActions.length === 1) {
                        this.activeObj = extend({}, this.cropObj.activeObj, {}, true);
                        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                        this.drawObject('duplicate');
                    }
                }
            }
            activeObj = extend({}, this.activeObj, {}, true);
            this.totalPannedPoint = { x: 0, y: 0 };
            this.totalPannedClientPoint = { x: 0, y: 0 };
            this.totalPannedInternalPoint = { x: 0, y: 0 };
            this.activeObj = activeObj;
            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
            if (this.activeObj.activePoint.width !== 0 && this.activeObj.activePoint.height !== 0) {
                this.drawObject('duplicate');
            }
            if (obj.degree !== this.degree) {
                this.cropZoomFactor = this.zoomFactor = 0;
            }
            this.updateObjAndFreeHandDrawColl();
            if (this.rotatedFlipCropSelection) {
                // this.totalPannedInternalPoint = extend({}, this.cropObj.totalPannedInternalPoint, {}, true) as Point;
                this.rotatedFlipCropSelection = false;
            }
        }
        this.afterCropActions = afterCropActions;
        if (!this.isCancelAction && !isAfterCropAction) {
            this.updateObjAndFreeHandDrawColl();
            this.zoomFreehandDrawColl();
            this.destLeft = obj.destPoints.startX;
            this.destTop = obj.destPoints.startY;
        }
        this.activeObj = activeObj;
        this.isCircleCrop = isCircleCrop;
        this.currSelectionPoint = currSelectionPoint;
    };
    ImageEditor.prototype.drawCropSelectionImage = function (obj, isObj) {
        var temp = this.lowerContext.filter;
        this.upperContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
        this.reverseTransformedState();
        if (isObj) {
            this.updateCurrentTransformedState('initial');
        }
        else {
            this.iterateRotateFlipColl(this.lowerContext, 'initial');
        }
        this.setDestPointsForFlipState();
        this.updateBrightnessFilter();
        this.lowerContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, this.destLeft, this.destTop, this.destWidth, this.destHeight);
        if (isObj) {
            this.updateCurrentTransformedState('reverse');
        }
        else {
            this.iterateRotateFlipColl(this.lowerContext, 'reverse');
        }
        this.destLeft = this.cropObj.destPoints.startX;
        this.destTop = this.cropObj.destPoints.startY;
        var activeObj = extend({}, obj.activeObj, {}, true);
        this.lowerContext.filter = 'none';
        if (this.isCancelAction) {
            this.zoomObjColl();
            this.zoomFreehandDrawColl();
        }
        else {
            this.destLeft = obj.destPoints.startX;
            this.destTop = obj.destPoints.startY;
            this.destWidth = obj.destPoints.width;
            this.destHeight = obj.destPoints.height;
            this.srcLeft = obj.srcPoints.startX;
            this.srcTop = obj.srcPoints.startY;
            this.srcWidth = obj.srcPoints.width;
            this.srcHeight = obj.srcPoints.height;
            var destPoints = { startX: this.destLeft, startY: this.destTop, width: this.destWidth, height: this.destHeight };
            this.destLeft = obj.activeObj.activePoint.startX;
            this.destTop = obj.activeObj.activePoint.startY;
            this.destWidth = obj.activeObj.activePoint.width;
            this.destHeight = obj.activeObj.activePoint.height;
            this.zoomObjColl();
            this.zoomFreehandDrawColl();
            this.destLeft = destPoints.startX;
            this.destTop = destPoints.startY;
            this.destWidth = destPoints.width;
            this.destHeight = destPoints.height;
        }
        this.activeObj = activeObj;
        this.lowerContext.filter = temp;
    };
    ImageEditor.prototype.cropImg = function (isRotateCrop) {
        if (isNullOrUndefined(isRotateCrop)) {
            this.croppedDegree = this.degree;
        }
        if (isNullOrUndefined(isRotateCrop) && this.degree !== 0) {
            this.updateCropObj();
            this.currDestinationPoint = { startX: this.destLeft, startY: this.destTop, width: this.destWidth, height: this.destHeight };
            this.rotateCrop();
        }
        else if (isNullOrUndefined(isRotateCrop) && this.currFlipState !== '') {
            this.updateCropObj();
            this.currDestinationPoint = { startX: this.destLeft, startY: this.destTop, width: this.destWidth, height: this.destHeight };
            this.flipCrop();
        }
        else {
            this.tempZoomFactor = this.zoomFactor;
            var ratio = this.calcRatio();
            if (isNullOrUndefined(isRotateCrop) || !isRotateCrop) {
                this.updateCropObj();
                this.resetPanPoints();
                this.updateImageRatioForActObj();
                this.currDestinationPoint = { startX: this.destLeft, startY: this.destTop, width: this.destWidth, height: this.destHeight };
                this.currSelectionPoint = extend({}, this.activeObj, {}, true);
                this.cropDestPoints = { startX: this.destLeft, startY: this.destTop, width: this.destWidth, height: this.destHeight };
            }
            var maxDimension = this.calcMaxDimension(this.activeObj.activePoint.width *
                ratio.width, this.activeObj.activePoint.height * ratio.height);
            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
            this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
            this.srcLeft = (this.activeObj.activePoint.startX * ratio.width) - (this.destLeft * ratio.width);
            this.srcTop = (this.activeObj.activePoint.startY * ratio.height) - (this.destTop * ratio.height);
            this.srcWidth = (this.activeObj.activePoint.width * ratio.width);
            this.srcHeight = (this.activeObj.activePoint.height * ratio.height);
            this.destLeft = (this.lowerCanvas.clientWidth - maxDimension.width) / 2;
            this.destTop = (this.lowerCanvas.clientHeight - maxDimension.height) / 2;
            this.destWidth = maxDimension.width;
            this.destHeight = maxDimension.height;
            var temp = this.lowerContext.filter;
            this.updateBrightnessFilter();
            this.lowerContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, this.destLeft, this.destTop, this.destWidth, this.destHeight);
            this.lowerContext.filter = 'none';
            var activeObj = extend({}, this.activeObj, {}, true);
            this.cropObjColl();
            this.zoomObjColl();
            for (var i = 0; i < this.objColl.length; i++) {
                if (this.isObjInsideCropRegion(this.objColl[i])) {
                    this.apply(this.objColl[i].shape, this.objColl[i]);
                    this.refreshActiveObj();
                }
            }
            this.activeObj = activeObj;
            this.cropFreehandDrawColl();
            this.zoomFreehandDrawColl();
            this.clearOuterCanvas(this.lowerContext);
            this.clearOuterCanvas(this.upperContext);
            if (this.currSelectionPoint.shape === 'crop-circle') {
                this.cropCircle(this.lowerContext);
            }
            else {
                this.isCircleCrop = false;
            }
            this.lowerContext.filter = temp;
            this.refreshActiveObj();
            this.currObjType.isCustomCrop = false;
            this.pan(false);
            this.defaultZoomFactor = 0;
        }
    };
    ImageEditor.prototype.updateImageRatioForActObj = function () {
        this.activeObj.imageRatio = { startX: ((this.activeObj.activePoint.startX - this.destLeft) / this.destWidth),
            startY: ((this.activeObj.activePoint.startY - this.destTop) / this.destHeight),
            endX: ((this.activeObj.activePoint.endX - this.destLeft) / this.destWidth),
            endY: ((this.activeObj.activePoint.endY - this.destTop) / this.destHeight),
            width: this.destWidth / this.activeObj.activePoint.width, height: this.destHeight / this.activeObj.activePoint.height };
    };
    ImageEditor.prototype.drawImgToCanvas = function (maxDimension) {
        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
        this.destWidth = maxDimension.width;
        this.destHeight = maxDimension.height;
        if (this.isInitialLoading) {
            this.initializeFilter();
            this.isInitialLoading = false;
        }
        var temp = this.lowerContext.filter;
        this.updateBrightnessFilter();
        this.lowerContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, this.destLeft, this.destTop, this.destWidth, this.destHeight);
        if ((!isNullOrUndefined(this.currSelectionPoint) && this.currSelectionPoint.shape === 'crop-circle') || this.isCircleCrop) {
            this.cropCircle(this.lowerContext);
        }
        this.lowerContext.filter = temp;
    };
    ImageEditor.prototype.limitPan = function () {
        if (this.activeObj.activePoint) {
            if (this.destLeft > this.activeObj.activePoint.startX) {
                this.destLeft = this.activeObj.activePoint.startX;
            }
            if (this.destTop > this.activeObj.activePoint.startY) {
                this.destTop = this.activeObj.activePoint.startY;
            }
            if (this.destLeft + this.destWidth < this.activeObj.activePoint.endX) {
                this.destLeft = this.activeObj.activePoint.endX - this.destWidth;
            }
            if (this.destTop + this.destHeight < this.activeObj.activePoint.endY) {
                this.destTop = this.activeObj.activePoint.endY - this.destHeight;
            }
        }
    };
    ImageEditor.prototype.updatePanPoints = function (panRegion) {
        var tempDestLeft = this.destLeft;
        var tempDestTop = this.destTop;
        var xDiff = this.panMove.x - this.tempPanMove.x;
        var yDiff = this.panMove.y - this.tempPanMove.y;
        if (panRegion === '') {
            this.destLeft += xDiff;
            this.destTop += yDiff;
            this.limitPan();
        }
        else if (panRegion === 'horizontal') {
            var tempActObj = extend({}, this.activeObj, {}, true);
            this.updateFlipActiveObj(panRegion);
            xDiff = this.tempPanMove.x - this.panMove.x;
            this.destLeft += xDiff;
            this.destTop += yDiff;
            this.limitPan();
            this.activeObj = tempActObj;
        }
        else if (panRegion === 'vertical') {
            var tempActObj = extend({}, this.activeObj, {}, true);
            this.updateFlipActiveObj(panRegion);
            yDiff = this.tempPanMove.y - this.panMove.y;
            this.destLeft += xDiff;
            this.destTop += yDiff;
            this.limitPan();
            this.activeObj = tempActObj;
        }
        else if (panRegion === 'horizontalVertical') {
            var tempActObj = extend({}, this.activeObj, {}, true);
            this.updateFlipActiveObj(panRegion);
            xDiff = this.tempPanMove.x - this.panMove.x;
            this.destLeft += xDiff;
            this.destTop -= yDiff;
            this.limitPan();
            this.activeObj = tempActObj;
        }
        else if (panRegion === 'verticalHorizontal') {
            var tempActObj = extend({}, this.activeObj, {}, true);
            this.updateFlipActiveObj(panRegion);
            yDiff = this.tempPanMove.y - this.panMove.y;
            this.destLeft -= xDiff;
            this.destTop += yDiff;
            this.limitPan();
            this.activeObj = tempActObj;
        }
        // returns panned difference for manipulating object collection
        return { x: this.destLeft - tempDestLeft, y: this.destTop - tempDestTop };
    };
    ImageEditor.prototype.setCurrentPanRegion = function (region, type) {
        var panRegion = region;
        if (region === '') {
            if (type === 'horizontal') {
                panRegion = 'horizontal';
            }
            else if (type === 'vertical') {
                panRegion = 'vertical';
            }
        }
        else if (region === 'horizontal') {
            if (type === 'horizontal') {
                panRegion = 'horizontalVertical';
            }
            else if (type === 'vertical') {
                panRegion = 'verticalHorizontal';
            }
            else if (type === 90) {
                panRegion = 'vertical';
            }
            else if (type === -90) {
                panRegion = 'horizontal';
            }
        }
        else if (region === 'vertical') {
            if (type === 'horizontal') {
                panRegion = 'horizontalVertical';
            }
            else if (type === 'vertical') {
                panRegion = 'verticalHorizontal';
            }
            else if (type === 90) {
                panRegion = 'horizontal';
            }
            else if (type === -90) {
                panRegion = 'vertical';
            }
        }
        else {
            if (type === 'horizontal') {
                panRegion = 'vertical';
            }
            else if (type === 'vertical') {
                panRegion = 'horizontal';
            }
        }
        return panRegion;
    };
    ImageEditor.prototype.getCurrentPanRegion = function () {
        var panRegion = '';
        for (var i = 0; i < this.rotateFlipColl.length; i++) {
            panRegion = this.setCurrentPanRegion(panRegion, this.rotateFlipColl[i]);
        }
        return panRegion;
    };
    ImageEditor.prototype.drawPannImage = function (point) {
        var destPoints = { startX: this.destLeft, startY: this.destTop, width: this.destWidth, height: this.destHeight };
        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
        this.updateCurrentTransformedState('initial');
        this.destLeft = destPoints.startX;
        this.destTop = destPoints.startY;
        this.destWidth = destPoints.width;
        this.destHeight = destPoints.height;
        this.setDestPointsForFlipState();
        this.updateBrightnessFilter();
        this.lowerContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, this.destLeft, this.destTop, this.destWidth, this.destHeight);
        if ((!isNullOrUndefined(this.currSelectionPoint) && this.currSelectionPoint.shape === 'crop-circle') || this.isCircleCrop) {
            this.cropCircle(this.lowerContext, null, true);
        }
        this.updateCurrentTransformedState('reverse');
        this.destLeft = destPoints.startX;
        this.destTop = destPoints.startY;
        this.destWidth = destPoints.width;
        this.destHeight = destPoints.height;
        this.lowerContext.filter = 'none';
        this.panObjColl(point.x, point.y, '');
        this.panFreehandDrawColl(point.x, point.y, '');
        if (this.isCircleCrop) {
            this.cropCircle(this.lowerContext, null, true);
        }
    };
    ImageEditor.prototype.drawPannedImage = function (xDiff, yDiff) {
        var panEventArgs = { startPoint: this.panDown, endPoint: this.panMove };
        this.trigger('panning', panEventArgs);
        var isObjCreated = false;
        if (isNullOrUndefined(this.activeObj.shape)) {
            isObjCreated = true;
            this.activeObj.activePoint = { startX: this.destLeft, startY: this.destTop,
                endX: this.destLeft + this.destWidth, endY: this.destTop + this.destHeight };
            if (this.activeObj.activePoint.startX < 0) {
                this.activeObj.activePoint.startX = 0;
            }
            if (this.activeObj.activePoint.startY < 0) {
                this.activeObj.activePoint.startY = 0;
            }
            if (this.activeObj.activePoint.endX > this.lowerCanvas.width) {
                this.activeObj.activePoint.endX = this.lowerCanvas.width;
            }
            if (this.activeObj.activePoint.endY > this.lowerCanvas.height) {
                this.activeObj.activePoint.endY = this.lowerCanvas.height;
            }
            this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
            this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
            this.activeObj.shape = 'crop-custom';
            this.activeObj.strokeSettings = this.strokeSettings;
            this.updateActiveObject(this.activeObj.activePoint, this.activeObj);
            this.isCropTab = true;
        }
        if (this.degree === 0) {
            var point = void 0;
            if (isNullOrUndefined(xDiff) && isNullOrUndefined(yDiff)) {
                point = this.updatePanPoints('');
            }
            else {
                point = { x: xDiff, y: yDiff };
            }
            this.totalPannedPoint.x += point.x;
            this.totalPannedPoint.y += point.y;
            var tempSelectionObj = extend({}, this.activeObj, {}, true);
            var temp = this.lowerContext.filter;
            this.drawPannImage(point);
            this.lowerContext.filter = temp;
            this.tempPanMove = extend({}, this.panMove, {}, true);
            this.activeObj = extend({}, tempSelectionObj, {}, true);
            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
            if (!isNullOrUndefined(this.activeObj.shape)) {
                this.drawObject('duplicate', this.activeObj);
            }
        }
        else {
            var tempFlipState = this.currFlipState;
            this.isCropTab = true;
            if (isNullOrUndefined(xDiff) && isNullOrUndefined(yDiff)) {
                this.currentPannedPoint = this.updatePanPoints('');
            }
            else {
                this.currentPannedPoint = { x: xDiff, y: yDiff };
            }
            this.currFlipState = tempFlipState;
            this.rotatePan();
            this.isCropTab = false;
            this.tempPanMove = extend({}, this.panMove, {}, true);
        }
        if (isObjCreated) {
            this.refreshActiveObj();
            this.isCropTab = false;
            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
        }
    };
    ImageEditor.prototype.updateFlipPan = function (tempSelectionObj) {
        if (this.currFlipState !== '') {
            var temp = this.lowerContext.filter;
            this.refreshActiveObj();
            this.rotatedFlip();
            this.lowerContext.filter = 'none';
            this.freehandRedraw(this.lowerContext);
            this.lowerContext.filter = temp;
            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
            if (!isNullOrUndefined(tempSelectionObj)) {
                this.drawObject('duplicate', tempSelectionObj);
            }
        }
    };
    ImageEditor.prototype.updateFlipActiveObj = function (panRegion) {
        if (panRegion === 'horizontal') {
            if (this.activeObj.activePoint.startX > this.lowerCanvas.width / 2) {
                this.activeObj.activePoint.endX = (this.lowerCanvas.width / 2) -
                    (this.activeObj.activePoint.startX - (this.lowerCanvas.width / 2));
            }
            else {
                this.activeObj.activePoint.endX = (this.lowerCanvas.width / 2) + ((this.lowerCanvas.width / 2) -
                    this.activeObj.activePoint.startX);
            }
            this.activeObj.activePoint.startX = this.activeObj.activePoint.endX - this.activeObj.activePoint.width;
        }
        else if (panRegion === 'vertical') {
            if (this.activeObj.activePoint.startX > this.lowerCanvas.width / 2) {
                this.activeObj.activePoint.endY = (this.lowerCanvas.height / 2) -
                    (this.activeObj.activePoint.startY - (this.lowerCanvas.height / 2));
            }
            else {
                this.activeObj.activePoint.endY = (this.lowerCanvas.height / 2) +
                    ((this.lowerCanvas.height / 2) - this.activeObj.activePoint.startY);
            }
            this.activeObj.activePoint.startY = this.activeObj.activePoint.endY - this.activeObj.activePoint.height;
        }
        else if (panRegion === 'verticalHorizontal' || panRegion === 'horizontalVertical') {
            if (this.activeObj.activePoint.startX > this.lowerCanvas.width / 2) {
                this.activeObj.activePoint.endX = (this.lowerCanvas.width / 2) -
                    (this.activeObj.activePoint.startX - (this.lowerCanvas.width / 2));
                this.activeObj.activePoint.endY = (this.lowerCanvas.height / 2) -
                    (this.activeObj.activePoint.startY - (this.lowerCanvas.height / 2));
            }
            else {
                this.activeObj.activePoint.endX = (this.lowerCanvas.width / 2) + ((this.lowerCanvas.width / 2) -
                    this.activeObj.activePoint.startX);
                this.activeObj.activePoint.endY = (this.lowerCanvas.height / 2) +
                    ((this.lowerCanvas.height / 2) - this.activeObj.activePoint.startY);
            }
            this.activeObj.activePoint.startX = this.activeObj.activePoint.endX - this.activeObj.activePoint.width;
            this.activeObj.activePoint.startY = this.activeObj.activePoint.endY - this.activeObj.activePoint.height;
        }
        this.updateActiveObject(this.activeObj.activePoint, this.activeObj);
    };
    ImageEditor.prototype.resetPanPoints = function () {
        this.totalPannedPoint = { x: 0, y: 0 };
        this.totalPannedClientPoint = { x: 0, y: 0 };
        this.totalPannedInternalPoint = { x: 0, y: 0 };
    };
    ImageEditor.prototype.flipCrop = function () {
        this.isReverseFlip = true;
        this.totalPannedPoint.x += this.tempFlipPanPoint.x;
        this.totalPannedPoint.y += this.tempFlipPanPoint.y;
        var tempCurrFlipState = this.currFlipState;
        var tempFlipColl = this.flipColl;
        this.flipColl = [];
        this.updateImageRatioForActObj();
        this.objColl.push(this.activeObj);
        if (this.zoomFactor > 0) {
            var zoomFactor = this.zoomFactor;
            var isUndoRedo = this.isUndoRedo;
            for (var i = 0; i < (zoomFactor * 10); i++) {
                this.isUndoRedo = true;
                this.zoom(-0.1);
            }
            this.isUndoRedo = isUndoRedo;
            this.resetPanPoints();
        }
        this.currSelectionPoint = extend({}, this.objColl[this.objColl.length - 1], {}, true);
        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
        var temp = this.lowerContext.filter;
        this.updateBrightnessFilter();
        this.lowerContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, this.destLeft, this.destTop, this.destWidth, this.destHeight);
        for (var i = 0; i < this.objColl.length; i++) {
            this.objColl[i].shapeFlip = '';
        }
        for (var i = 0; i < this.freehandCounter; i++) {
            this.pointColl[i].shapeFlip = '';
        }
        this.redrawObj(this.getCurrentPanRegion());
        this.flipFreehandrawColl(this.getCurrentPanRegion());
        this.activeObj = extend({}, this.objColl[this.objColl.length - 1], {}, true);
        this.objColl.pop();
        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
        this.drawObject('duplicate');
        this.cropImg(true);
        this.isReverseRotate = true;
        this.reverseTransformedState();
        this.setDestinationPoints();
        this.currentTransformedState('initial');
        this.updateBrightnessFilter();
        this.lowerContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, this.destLeft, this.destTop, this.destWidth, this.destHeight);
        this.lowerContext.filter = temp;
        this.isRotateZoom = false;
        this.updateCurrentTransformedState('reverse');
        this.currFlipState = tempCurrFlipState;
        this.flipColl = tempFlipColl;
        this.lowerContext.filter = 'none';
        for (var i = 0; i < this.objColl.length; i++) {
            this.objColl[i].shapeFlip = '';
        }
        for (var i = 0; i < this.freehandCounter; i++) {
            this.pointColl[i].shapeFlip = '';
        }
        this.redrawObj(this.getCurrentPanRegion());
        this.flipFreehandrawColl(this.getCurrentPanRegion());
        this.zoomObjColl();
        this.zoomFreehandDrawColl();
        this.lowerContext.filter = temp;
        if ((!isNullOrUndefined(this.currSelectionPoint) && this.currSelectionPoint.shape === 'crop-circle') || this.isCircleCrop) {
            this.cropCircle(this.lowerContext);
        }
        this.refreshActiveObj();
        this.clearOuterCanvas(this.lowerContext);
        this.clearOuterCanvas(this.upperContext);
        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
        this.isReverseFlip = false;
        this.resetPanPoints();
        this.tempFlipPanPoint = { x: 0, y: 0 };
    };
    ImageEditor.prototype.rotateCrop = function () {
        var shape = '';
        if (!isNullOrUndefined(this.activeObj.shape)) {
            shape = this.activeObj.shape;
        }
        var tempDegree = this.degree;
        if (this.degree % 90 === 0 && this.degree % 180 !== 0) {
            this.rotatedDestPoints.startX = this.destLeft;
            this.rotatedDestPoints.startY = this.destTop;
            this.rotatedDestPoints.width = this.destWidth;
            this.rotatedDestPoints.height = this.destHeight;
            this.rotatedDestPoints.startX -= this.totalPannedClientPoint.x;
            this.rotatedDestPoints.startY -= this.totalPannedClientPoint.y;
        }
        this.updateImageRatioForActObj();
        this.currSelectionPoint = extend({}, this.activeObj, {}, true);
        this.objColl.push(this.activeObj);
        this.activeObj = extend({}, this.objColl[this.objColl.length - 1], {}, true);
        this.reverseTransformedState();
        this.setClientTransformedDimension();
        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
        var temp = this.lowerContext.filter;
        this.updateBrightnessFilter();
        this.lowerContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, this.destLeft, this.destTop, this.destWidth, this.destHeight);
        this.lowerContext.filter = temp;
        var length = 0;
        if (tempDegree === 90 || tempDegree === -270) {
            length = 3;
        }
        else if (tempDegree === 180 || tempDegree === -180) {
            length = 2;
        }
        else if (tempDegree === 270 || tempDegree === -90) {
            length = 1;
        }
        for (var i = 0; i < length; i++) {
            this.rotateObjColl();
            this.rotateFreehandDrawColl();
        }
        var activeObj = extend({}, this.objColl[this.objColl.length - 1], {}, true);
        if (this.currFlipState !== '') {
            for (var i = 0; i < this.objColl.length; i++) {
                this.objColl[i].shapeFlip = '';
            }
            for (var i = 0; i < this.freehandCounter; i++) {
                this.pointColl[i].shapeFlip = '';
            }
            var flipState = this.getCurrentCropState('initial');
            this.redrawObj(flipState);
            this.flipFreehandrawColl(flipState);
        }
        this.zoomObjColl();
        this.zoomFreehandDrawColl();
        activeObj = extend({}, this.objColl[this.objColl.length - 1], {}, true);
        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
        this.drawObject('duplicate', activeObj);
        this.objColl.pop();
        this.degree = 0;
        this.cropImg(true);
        this.isReverseRotate = true;
        this.reverseTransformedState();
        this.degree = tempDegree;
        this.setDestinationPoints();
        this.currentTransformedState('initial');
        this.updateBrightnessFilter();
        this.lowerContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, this.destLeft, this.destTop, this.destWidth, this.destHeight);
        this.lowerContext.filter = temp;
        this.currentTransformedState('reverse');
        length = 0;
        if (tempDegree === 90 || tempDegree === -270) {
            length = 1;
        }
        else if (tempDegree === 180 || tempDegree === -180) {
            length = 2;
        }
        else if (tempDegree === 270 || tempDegree === -90) {
            length = 3;
        }
        for (var i = 0; i < length; i++) {
            this.rotateObjColl();
            this.rotateFreehandDrawColl();
        }
        if (this.getCurrentPanRegion() !== '') {
            for (var i = 0; i < this.objColl.length; i++) {
                this.objColl[i].shapeFlip = '';
            }
            for (var i = 0; i < this.freehandCounter; i++) {
                this.pointColl[i].shapeFlip = '';
            }
            var flipState = this.getCurrentCropState('reverse');
            this.redrawObj(flipState);
            this.flipFreehandrawColl(flipState);
        }
        this.isReverseRotate = false;
        if (shape === 'crop-circle') {
            this.cropCircle(this.lowerContext);
        }
        this.lowerContext.filter = 'none';
        for (var i = 0; i < this.objColl.length; i++) {
            if (this.isObjInsideCropRegion(this.objColl[i])) {
                this.apply(this.objColl[i].shape, this.objColl[i]);
                this.refreshActiveObj();
            }
        }
        this.zoomFreehandDrawColl();
        this.lowerContext.filter = temp;
        this.clearOuterCanvas(this.lowerContext);
        this.clearOuterCanvas(this.upperContext);
        if (shape === 'crop-circle') {
            this.cropCircle(this.lowerContext);
        }
        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
        this.resetPanPoints();
    };
    ImageEditor.prototype.getCurrentCropState = function (type, isAllowInvert) {
        var flipState = '';
        var state = [];
        if (type === 'initial') {
            if (this.degree === 180 || this.degree === -180) {
                flipState = this.flipColl.length > 1 ? this.getCurrentPanRegion() : this.currFlipState;
            }
            else {
                for (var i = 0; i < this.rotateFlipColl.length; i++) {
                    if (typeof (this.rotateFlipColl[i]) === 'number') {
                        state.push('number');
                    }
                    else if (typeof (this.rotateFlipColl[i]) === 'string') {
                        state.push('string');
                    }
                }
                if (state.length > 1 && state[state.length - 1] === 'string' && state[state.length - 2] === 'number') {
                    if (this.currFlipState === 'horizontal') {
                        flipState = 'vertical';
                    }
                    else if (this.currFlipState === 'vertical') {
                        flipState = 'horizontal';
                    }
                }
                else if (state.length > 1 && state[state.length - 1] === 'number' && state[state.length - 2] === 'string') {
                    flipState = this.flipColl.length > 1 ? this.getCurrentPanRegion() : this.currFlipState;
                }
            }
        }
        else {
            flipState = this.getCurrentPanRegion();
            if (isAllowInvert || !this.isInitialRotate()) {
                if (this.degree === -90 || this.degree === -270) {
                    if (flipState === 'horizontal') {
                        flipState = 'vertical';
                    }
                    else if (flipState === 'vertical') {
                        flipState = 'horizontal';
                    }
                }
            }
        }
        if (flipState === '') {
            flipState = this.flipColl.length > 1 ? this.getCurrentPanRegion() : this.currFlipState;
        }
        return flipState;
    };
    ImageEditor.prototype.isInitialRotate = function () {
        var isRotate = false;
        if (this.rotateFlipColl.length > 0 && typeof (this.rotateFlipColl[0]) === 'number') {
            isRotate = true;
        }
        return isRotate;
    };
    ImageEditor.prototype.updateRotatePanPoints = function () {
        var panRegion = '';
        if (this.isInitialRotate() && this.degree < 0) {
            panRegion = this.getCurrentCropState('reverse', true);
        }
        else {
            panRegion = this.getCurrentPanRegion();
        }
        if (this.degree % 90 === 0 && this.degree % 180 !== 0) {
            if (this.degree === 90 || (this.degree === -90 && (panRegion === 'horizontal' || panRegion === 'vertical'))
                || (this.degree === -270 && (panRegion === '' || panRegion === 'verticalHorizontal' || panRegion === 'horizontalVertical'))) {
                if (panRegion === '') {
                    this.destLeft += this.currentPannedPoint.y;
                    this.destTop -= this.currentPannedPoint.x;
                }
                else if (panRegion === 'horizontal') {
                    this.destLeft += this.currentPannedPoint.y;
                    this.destTop += this.currentPannedPoint.x;
                }
                else if (panRegion === 'vertical') {
                    this.destLeft -= this.currentPannedPoint.y;
                    this.destTop -= this.currentPannedPoint.x;
                }
                else {
                    this.destLeft -= this.currentPannedPoint.y;
                    this.destTop += this.currentPannedPoint.x;
                }
            }
            else if (this.degree === 270 || (this.degree === -270 && (panRegion === 'horizontal' || panRegion === 'vertical'))
                || (this.degree === -90 && (panRegion === '' || panRegion === 'verticalHorizontal' || panRegion === 'horizontalVertical'))) {
                if (panRegion === '') {
                    this.destLeft -= this.currentPannedPoint.y;
                    this.destTop += this.currentPannedPoint.x;
                }
                else if (panRegion === 'horizontal') {
                    this.destLeft -= this.currentPannedPoint.y;
                    this.destTop -= this.currentPannedPoint.x;
                }
                else if (panRegion === 'vertical') {
                    this.destLeft += this.currentPannedPoint.y;
                    this.destTop += this.currentPannedPoint.x;
                }
                else {
                    this.destLeft += this.currentPannedPoint.y;
                    this.destTop -= this.currentPannedPoint.x;
                }
            }
        }
        else {
            if (this.degree === 180 || this.degree === -180) {
                if (panRegion === '') {
                    this.destLeft -= this.currentPannedPoint.x;
                    this.destTop -= this.currentPannedPoint.y;
                }
                else if (panRegion === 'horizontal') {
                    this.destLeft += this.currentPannedPoint.x;
                    this.destTop -= this.currentPannedPoint.y;
                }
                else if (panRegion === 'vertical') {
                    this.destLeft -= this.currentPannedPoint.x;
                    this.destTop += this.currentPannedPoint.y;
                }
                else {
                    this.destLeft += this.currentPannedPoint.x;
                    this.destTop += this.currentPannedPoint.y;
                }
            }
        }
    };
    ImageEditor.prototype.rotatePan = function (isCropSelection, isDefaultZoom) {
        this.isReverseRotate = true;
        var tempDegree = this.degree;
        var rotatePanActiveObj;
        if (!isNullOrUndefined(this.activeObj.activePoint) && !isNullOrUndefined(this.activeObj.shape)) {
            rotatePanActiveObj = extend({}, this.activeObj, {}, true);
        }
        var tempObjColl = extend([], this.objColl, [], true);
        var tempPointColl = extend([], this.pointColl, [], true);
        this.objColl = [];
        this.pointColl = [];
        this.freehandCounter = 0;
        this.refreshActiveObj();
        this.isRotateZoom = true;
        this.updateCurrentTransformedState('initial');
        var initialDestLeft = this.destLeft;
        var initialDestTop = this.destTop;
        if (this.isCropTab) {
            this.destLeft += this.totalPannedInternalPoint.x;
            this.destTop += this.totalPannedInternalPoint.y;
        }
        this.updateRotatePanPoints();
        if (this.isCropTab) {
            this.totalPannedInternalPoint.x = this.destLeft - initialDestLeft;
            this.totalPannedInternalPoint.y = this.destTop - initialDestTop;
        }
        var temp = this.lowerContext.filter;
        this.updateBrightnessFilter();
        this.lowerContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, this.destLeft, this.destTop, this.destWidth, this.destHeight);
        this.isRotateZoom = false;
        this.updateCurrentTransformedState('reverse', true, true);
        var destLeft = this.destLeft;
        var destTop = this.destTop;
        this.destLeft += this.totalPannedClientPoint.x;
        this.destTop += this.totalPannedClientPoint.y;
        this.destLeft += this.currentPannedPoint.x;
        this.destTop += this.currentPannedPoint.y;
        this.totalPannedClientPoint.x = this.destLeft - destLeft;
        this.totalPannedClientPoint.y = this.destTop - destTop;
        this.objColl = tempObjColl;
        this.pointColl = tempPointColl;
        this.freehandCounter = this.pointColl.length;
        this.degree = tempDegree;
        this.lowerContext.filter = 'none';
        if (isCropSelection) {
            if (isDefaultZoom) {
                this.totalPannedClientPoint.x = -this.totalPannedClientPoint.x;
                this.totalPannedClientPoint.y = -this.totalPannedClientPoint.y;
                this.currentPannedPoint = extend({}, this.totalPannedClientPoint, {}, true);
                this.totalPannedClientPoint = { x: 0, y: 0 };
                this.destLeft += this.currentPannedPoint.x;
                this.destTop += this.currentPannedPoint.y;
            }
            else {
                this.currentPannedPoint = extend({}, this.totalPannedClientPoint, {}, true);
            }
        }
        this.panObjColl(this.currentPannedPoint.x, this.currentPannedPoint.y, '');
        this.panFreehandDrawColl(this.currentPannedPoint.x, this.currentPannedPoint.y, '');
        this.lowerContext.filter = temp;
        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
        this.activeObj = extend({}, rotatePanActiveObj, {}, true);
        if (!isNullOrUndefined(this.activeObj.activePoint)) {
            this.drawObject('duplicate', this.activeObj, null, null, true);
        }
        this.isReverseRotate = false;
    };
    ImageEditor.prototype.rotateZoom = function (value) {
        var powerOften = Math.pow(10, 1);
        if ((Math.round(this.zoomFactor * powerOften) / powerOften) === 0.1 && value === -0.1) {
            this.zoomFactor = 0;
        }
        else {
            this.zoomFactor += value;
        }
        if (this.isCropTab) {
            this.cropZoomFactor = this.zoomFactor;
        }
        else {
            this.defaultZoomFactor = this.zoomFactor;
        }
        var tempObjColl = extend([], this.objColl, [], true);
        var tempActiveObj = extend({}, this.activeObj, {}, true);
        this.objColl = [];
        this.refreshActiveObj();
        this.updateCurrentTransformedState('initial');
        this.isRotateZoom = true;
        this.setDestinationPoints();
        var temp = this.lowerContext.filter;
        this.updateBrightnessFilter();
        this.lowerContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, this.destLeft, this.destTop, this.destWidth, this.destHeight);
        this.lowerContext.filter = temp;
        this.isRotateZoom = false;
        this.updateCurrentTransformedState('reverse');
        this.objColl = tempObjColl;
        this.activeObj = tempActiveObj;
    };
    ImageEditor.prototype.drawZoomImgToCanvas = function (value, selectionObj) {
        var powerOften = Math.pow(10, 1);
        if ((Math.round(this.zoomFactor * powerOften) / powerOften) === 0.1 && value === -0.1) {
            this.zoomFactor = 0;
        }
        else {
            this.zoomFactor += value;
        }
        if (this.isCropTab) {
            this.cropZoomFactor = this.zoomFactor;
        }
        else {
            this.defaultZoomFactor = this.zoomFactor;
        }
        var maxDimension = { width: 0, height: 0 };
        if (this.isCropTab) {
            maxDimension = this.cropZoom(value, selectionObj);
        }
        else {
            maxDimension = this.calcMaxDimension(this.srcWidth, this.srcHeight);
            maxDimension.width += (maxDimension.width * this.zoomFactor);
            maxDimension.height += (maxDimension.height * this.zoomFactor);
            this.destLeft = (this.lowerCanvas.clientWidth - maxDimension.width) / 2;
            this.destTop = (this.lowerCanvas.clientHeight - maxDimension.height) / 2;
        }
        this.drawImgToCanvas(maxDimension);
    };
    ImageEditor.prototype.cropZoom = function (value, selectionObj) {
        var destLeft = this.destLeft;
        var destTop = this.destTop;
        var maxDimension = { width: 0, height: 0 };
        if (this.srcLeft === 0 || this.srcTop === 0) {
            if (isNullOrUndefined(selectionObj)) {
                maxDimension = this.setZoomDimension(value, null);
            }
            else {
                maxDimension = this.setZoomDimension(value, selectionObj);
            }
        }
        else {
            if (this.degree % 90 === 0 && this.degree % 180 !== 0) {
                maxDimension = this.calcMaxDimension(this.srcHeight, this.srcWidth);
            }
            else {
                maxDimension = this.calcMaxDimension(this.srcWidth, this.srcHeight);
            }
            maxDimension.width += (maxDimension.width * this.zoomFactor);
            maxDimension.height += (maxDimension.height * this.zoomFactor);
        }
        this.destLeft = destLeft - ((maxDimension.width - this.destWidth) / 2);
        this.destTop = destTop - ((maxDimension.height - this.destHeight) / 2);
        destLeft = this.destLeft;
        destTop = this.destTop;
        if (!isNullOrUndefined(selectionObj)) {
            if (this.destLeft > selectionObj.activePoint.startX) {
                this.destLeft = selectionObj.activePoint.startX;
                if (this.degree === 0) {
                    this.totalPannedPoint.x -= (destLeft - this.destLeft);
                }
            }
            if (this.destTop > selectionObj.activePoint.startY) {
                this.destTop = selectionObj.activePoint.startY;
                if (this.degree === 0) {
                    this.totalPannedPoint.y -= (destTop - this.destTop);
                }
            }
            if (this.destLeft + maxDimension.width < selectionObj.activePoint.endX) {
                this.destLeft = selectionObj.activePoint.endX - maxDimension.width;
                if (this.degree === 0) {
                    this.totalPannedPoint.x -= (destLeft - this.destLeft);
                }
            }
            if (this.destTop + maxDimension.height < selectionObj.activePoint.endY) {
                this.destTop = selectionObj.activePoint.endY - maxDimension.height;
                if (this.degree === 0) {
                    this.totalPannedPoint.y -= (destTop - this.destTop);
                }
            }
        }
        return maxDimension;
    };
    ImageEditor.prototype.updateCanvas = function () {
        var fileOpened = { fileName: this.fileName, fileType: this.fileType };
        this.srcWidth = this.baseImg.width;
        this.srcHeight = this.baseImg.height;
        var maxDimension = this.calcMaxDimension(this.srcWidth, this.srcHeight);
        this.destLeft = (this.lowerCanvas.clientWidth - maxDimension.width) / 2;
        this.destTop = (this.lowerCanvas.clientHeight - maxDimension.height) / 2;
        this.drawImgToCanvas(maxDimension);
        this.cropDestPoints = { startX: this.destLeft, startY: this.destTop, width: this.destWidth, height: this.destHeight };
        var temp = this.lowerContext.filter;
        this.lowerContext.filter = 'none';
        this.iterateObjColl();
        this.zoomFreehandDrawColl();
        this.lowerContext.filter = temp;
        if (this.destWidth > 0 && this.destHeight > 0) {
            this.isImageLoaded = true;
        }
        if (this.isUndoRedo) {
            if (this.currFlipState !== '') {
                this.flip(this.toPascalCase(this.currFlipState));
            }
        }
        if (this.disabled) {
            this.element.setAttribute('class', 'e-disabled');
        }
        this.trigger('fileOpened', fileOpened);
    };
    ImageEditor.prototype.imageOnLoad = function (src) {
        var _this = this;
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var proxy = this;
        proxy.baseImg.src = src;
        this.baseImg.onload = function () {
            _this.lowerContext.drawImage(_this.baseImg, 0, 0, _this.lowerCanvas.width, _this.lowerCanvas.height);
            hideSpinner(_this.element);
            _this.element.style.opacity = '1';
            _this.updateCanvas();
            if (_this.currObjType.isUndoZoom) {
                _this.currObjType.isUndoZoom = false;
                _this.lowerCanvas.style.display = 'block';
            }
            _this.isUndoRedo = false;
            if (Browser.isDevice) {
                if (_this.isToolbar() && (!isNullOrUndefined(document.getElementById(_this.element.id + '_toolbar'))) &&
                    (!isNullOrUndefined(getComponent(document.getElementById(_this.element.id + '_toolbar'), 'toolbar')))) {
                    getComponent(document.getElementById(_this.element.id + '_toolbar'), 'toolbar').destroy();
                }
                if (!isNullOrUndefined(document.getElementById(_this.element.id + '_bottomToolbar')) &&
                    (!isNullOrUndefined(getComponent(document.getElementById(_this.element.id + '_bottomToolbar'), 'toolbar')))) {
                    getComponent(document.getElementById(_this.element.id + '_bottomToolbar'), 'toolbar').destroy();
                }
                _this.initToolbarItem(false, Browser.isDevice, null);
                _this.createBottomToolbar();
            }
            else {
                if (_this.isToolbar() && (!isNullOrUndefined(document.getElementById(_this.element.id + '_toolbar'))) &&
                    (!isNullOrUndefined(getComponent(document.getElementById(_this.element.id + '_toolbar'), 'toolbar')))) {
                    getComponent(document.getElementById(_this.element.id + '_toolbar'), 'toolbar').destroy();
                }
                _this.initToolbarItem(false, false, null);
            }
        };
    };
    ImageEditor.prototype.refreshActiveObj = function () {
        this.activeObj = {};
        this.activeObj.activePoint = { startX: 0, startY: 0, endX: 0, endY: 0, width: 0, height: 0 };
        this.activeObj.flipObjColl = [];
        this.activeObj.strokeSettings = this.strokeSettings;
        this.activeObj.textSettings = this.textSettings;
    };
    ImageEditor.prototype.redrawText = function () {
        if (this.activeObj.textSettings.bold) {
            this.upperContext.font = 'bold ' + this.activeObj.textSettings.fontSize + 'px' + ' ' + this.activeObj.textSettings.fontFamily;
        }
        if (this.activeObj.textSettings.italic) {
            this.upperContext.font = 'bold ' + this.activeObj.textSettings.fontSize + 'px' + ' ' + this.activeObj.textSettings.fontFamily;
        }
        if (this.activeObj.textSettings.bold && this.activeObj.textSettings.italic) {
            this.upperContext.font = 'italic bold ' + this.activeObj.textSettings.fontSize + 'px' + ' ' + this.activeObj.textSettings.fontFamily;
        }
        if (!this.activeObj.textSettings.bold && !this.activeObj.textSettings.italic) {
            this.upperContext.font = this.activeObj.textSettings.fontSize + 'px' + ' ' + this.activeObj.textSettings.fontFamily;
        }
        var rows = this.activeObj.keyHistory.split('\n');
        var text = this.textArea.style.display === 'block' ? this.getMaxText(true) : this.getMaxText();
        var width = this.upperContext.measureText(text).width + this.activeObj.textSettings.fontSize * 0.5;
        var height = rows.length * (this.activeObj.textSettings.fontSize + this.activeObj.textSettings.fontSize * 0.25);
        this.setTextSelection(width, height);
        this.updateActiveObject(this.activeObj.activePoint, this.activeObj);
        this.redrawShape(this.activeObj);
    };
    ImageEditor.prototype.setTextSelection = function (width, height) {
        var degree = this.degree;
        if (this.activeObj.shapeDegree === 0) {
            degree = this.degree;
        }
        else {
            degree = this.degree - this.activeObj.shapeDegree;
        }
        if (degree < 0) {
            degree = 360 + degree;
        }
        for (var i = 0; i < this.activeObj.flipObjColl.length; i++) {
            if (degree === 0) {
                if (this.activeObj.flipObjColl[i].toLowerCase() === 'horizontal') {
                    this.activeObj.activePoint = { startX: this.activeObj.activePoint.endX - width,
                        startY: this.activeObj.activePoint.startY,
                        endX: (this.activeObj.activePoint.endX),
                        endY: this.activeObj.activePoint.startY + (height ? height : 0) };
                }
                else if (this.activeObj.flipObjColl[i].toLowerCase() === 'vertical') {
                    this.activeObj.activePoint.startY = this.activeObj.activePoint.endY - height;
                    this.activeObj.activePoint = { startX: this.activeObj.activePoint.startX, startY: this.activeObj.activePoint.startY,
                        endX: (this.activeObj.activePoint.startX + (width ? width : 0)),
                        endY: this.activeObj.activePoint.endY };
                }
                else {
                    this.activeObj.activePoint = { startX: this.activeObj.activePoint.startX, startY: this.activeObj.activePoint.startY,
                        endX: (this.activeObj.activePoint.startX + (width ? width : 0)),
                        endY: this.activeObj.activePoint.startY + (height ? height : 0) };
                }
            }
            else if (degree === 90) {
                if (this.activeObj.flipObjColl[i].toLowerCase() === 'vertical') {
                    this.activeObj.activePoint.startX = this.activeObj.activePoint.endX - height;
                    this.activeObj.activePoint = { startX: this.activeObj.activePoint.startX,
                        startY: this.activeObj.activePoint.endY - width,
                        endX: (this.activeObj.activePoint.endX),
                        endY: this.activeObj.activePoint.endY };
                }
                else if (this.activeObj.flipObjColl[i].toLowerCase() === 'horizontal') {
                    this.activeObj.activePoint.endX = this.activeObj.activePoint.startX + height;
                    this.activeObj.activePoint = { startX: this.activeObj.activePoint.startX, startY: this.activeObj.activePoint.startY,
                        endX: (this.activeObj.activePoint.endX),
                        endY: this.activeObj.activePoint.startY + (width ? width : 0) };
                }
                else {
                    this.activeObj.activePoint.startX = this.activeObj.activePoint.endX - height;
                    this.activeObj.activePoint = { startX: this.activeObj.activePoint.startX, startY: this.activeObj.activePoint.startY,
                        endX: (this.activeObj.activePoint.endX),
                        endY: this.activeObj.activePoint.startY + (width ? width : 0) };
                }
            }
            else if (degree === 180) {
                if (this.activeObj.flipObjColl[i].toLowerCase() === 'horizontal') {
                    this.activeObj.activePoint.startY = this.activeObj.activePoint.endY - height;
                    this.activeObj.activePoint = { startX: this.activeObj.activePoint.startX,
                        startY: this.activeObj.activePoint.startY,
                        endX: (this.activeObj.activePoint.startX + width),
                        endY: this.activeObj.activePoint.endY };
                }
                else if (this.activeObj.flipObjColl[i].toLowerCase() === 'vertical') {
                    this.activeObj.activePoint.endY = this.activeObj.activePoint.startY + height;
                    this.activeObj.activePoint = { endX: this.activeObj.activePoint.endX, endY: this.activeObj.activePoint.endY,
                        startX: (this.activeObj.activePoint.endX - (width ? width : 0)),
                        startY: this.activeObj.activePoint.startY };
                }
                else {
                    this.activeObj.activePoint = { endX: this.activeObj.activePoint.endX, endY: this.activeObj.activePoint.endY,
                        startX: (this.activeObj.activePoint.endX - (width ? width : 0)),
                        startY: this.activeObj.activePoint.endY - (height ? height : 0) };
                }
            }
            else if (degree === 270) {
                if (this.activeObj.flipObjColl[i].toLowerCase() === 'vertical') {
                    this.activeObj.activePoint = { startX: this.activeObj.activePoint.startX,
                        startY: this.activeObj.activePoint.startY,
                        endX: (this.activeObj.activePoint.startX + height),
                        endY: this.activeObj.activePoint.startY + (width ? width : 0) };
                }
                else if (this.activeObj.flipObjColl[i].toLowerCase() === 'horizontal') {
                    this.activeObj.activePoint.startX = this.activeObj.activePoint.endX - height;
                    this.activeObj.activePoint = { startX: this.activeObj.activePoint.startX,
                        startY: this.activeObj.activePoint.endY - (width ? width : 0),
                        endX: this.activeObj.activePoint.endX,
                        endY: this.activeObj.activePoint.endY };
                }
                else {
                    this.activeObj.activePoint.endX = this.activeObj.activePoint.startX + height;
                    this.activeObj.activePoint = { startX: this.activeObj.activePoint.startX,
                        startY: this.activeObj.activePoint.endY - (width ? width : 0),
                        endX: this.activeObj.activePoint.endX,
                        endY: this.activeObj.activePoint.endY };
                }
            }
        }
        if (this.activeObj.flipObjColl.length === 0) {
            if (degree === 0) {
                this.activeObj.activePoint = { startX: this.activeObj.activePoint.startX, startY: this.activeObj.activePoint.startY,
                    endX: (this.activeObj.activePoint.startX + (width ? width : 0)),
                    endY: this.activeObj.activePoint.startY + (height ? height : 0) };
            }
            else if (degree === 90) {
                this.activeObj.activePoint.startX = this.activeObj.activePoint.endX - height;
                this.activeObj.activePoint = { startX: this.activeObj.activePoint.startX, startY: this.activeObj.activePoint.startY,
                    endX: (this.activeObj.activePoint.endX),
                    endY: this.activeObj.activePoint.startY + (width ? width : 0) };
            }
            else if (degree === 180) {
                this.activeObj.activePoint = { endX: this.activeObj.activePoint.endX, endY: this.activeObj.activePoint.endY,
                    startX: (this.activeObj.activePoint.endX - (width ? width : 0)),
                    startY: this.activeObj.activePoint.endY - (height ? height : 0) };
            }
            else if (degree === 270) {
                this.activeObj.activePoint.endX = this.activeObj.activePoint.startX + height;
                this.activeObj.activePoint = { startX: this.activeObj.activePoint.startX,
                    startY: this.activeObj.activePoint.endY - (width ? width : 0),
                    endX: this.activeObj.activePoint.endX,
                    endY: this.activeObj.activePoint.endY };
            }
        }
        this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
        this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
        if (this.degree === 360 || this.degree === -360) {
            this.degree = 0;
        }
    };
    ImageEditor.prototype.getCurrentObj = function () {
        var obj = { cropZoom: 0, defaultZoom: 0, totalPannedPoint: { x: 0, y: 0 }, totalPannedClientPoint: { x: 0, y: 0 },
            totalPannedInternalPoint: { x: 0, y: 0 }, tempFlipPanPoint: { x: 0, y: 0 }, activeObj: {},
            rotateFlipColl: [], degree: 0, currFlipState: '',
            destPoints: { startX: 0, startY: 0, width: 0, height: 0 },
            srcPoints: { startX: 0, startY: 0, width: 0, height: 0 }, filter: '' };
        obj.cropZoom = this.cropZoomFactor;
        obj.defaultZoom = this.defaultZoomFactor;
        obj.totalPannedPoint = extend({}, this.totalPannedPoint, {}, true);
        obj.totalPannedClientPoint = extend({}, this.totalPannedClientPoint, {}, true);
        obj.totalPannedInternalPoint = extend({}, this.totalPannedInternalPoint, {}, true);
        obj.tempFlipPanPoint = extend({}, this.tempFlipPanPoint, {}, true);
        obj.activeObj = extend({}, this.activeObj, {}, true);
        obj.rotateFlipColl = extend([], this.rotateFlipColl, [], true);
        obj.degree = this.degree;
        obj.currFlipState = this.currFlipState;
        obj.destPoints = { startX: this.destLeft, startY: this.destTop, endX: 0, endY: 0,
            width: this.destWidth, height: this.destHeight };
        obj.srcPoints = { startX: this.srcLeft, startY: this.srcTop, endX: 0, endY: 0,
            width: this.srcWidth, height: this.srcHeight };
        obj.filter = this.lowerContext.filter;
        return obj;
    };
    ImageEditor.prototype.updateUndoRedoColl = function (operation, previousObj, previousObjColl, previousPointColl, previousCropObj, previousText, currentText, previousFilter) {
        if (!this.isInitialLoading && this.allowUndoRedo) {
            if (this.currObjType.isUndoAction) {
                this.refreshUndoRedoColl();
            }
            this.undoRedoStep++;
            var currentObj = this.getCurrentObj();
            currentObj.objColl = extend([], this.objColl, [], true);
            currentObj.pointColl = extend([], this.pointColl, [], true);
            currentObj.afterCropActions = extend([], this.afterCropActions, [], true);
            this.undoRedoColl.push({ operation: operation, previousObj: previousObj, currentObj: currentObj,
                previousObjColl: previousObjColl, currentObjColl: currentObj.objColl,
                previousPointColl: previousPointColl, currentPointColl: currentObj.pointColl,
                previousCropObj: previousCropObj, currentCropObj: extend({}, this.cropObj, {}, true),
                previousText: previousText, currentText: currentText, filter: previousFilter });
            if (this.undoRedoColl.length > 16) {
                this.undoRedoColl.splice(0, 1);
                this.undoRedoStep--;
            }
            this.enableDisableToolbarBtn();
        }
    };
    ImageEditor.prototype.fileSelect = function (inputElement, args) {
        showSpinner(this.element);
        this.element.style.opacity = '0.5';
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        var filesData = args.target.files[0];
        if (this.isImageLoaded) {
            this.isImageLoaded = false;
            this.reset();
        }
        if (isNullOrUndefined(this.toolbarTemplate)) {
            this.reset();
            this.update();
        }
        this.fileName = inputElement.value.split('\\')[inputElement.value.split('\\').length - 1];
        this.fileName = this.fileName.split('.')[0];
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        var URL = window.URL;
        var url = URL.createObjectURL(filesData);
        this.imageOnLoad(url.toString());
        inputElement.value = '';
    };
    ImageEditor.prototype.findTextPoint = function (e) {
        if (this.activeObj.shape === 'text') {
            this.textArea.style.transformOrigin = '0 0';
            var degree = void 0;
            var scale = '';
            if (this.activeObj.shapeDegree === 0) {
                degree = this.degree;
            }
            else {
                degree = this.degree - this.activeObj.shapeDegree;
            }
            if (degree < 0) {
                degree = 360 + degree;
            }
            if (this.activeObj.flipObjColl.length > 0) {
                // need to add scale value according to length.
                for (var i = 0; i < this.activeObj.flipObjColl.length; i++) {
                    if (degree !== 0 && degree % 90 === 0 && degree !== 180) {
                        scale += this.activeObj.flipObjColl[i].toLowerCase() === 'horizontal' ? 'scale(1, -1)' :
                            'scale(-1, 1)';
                    }
                    else {
                        scale += this.activeObj.flipObjColl[i].toLowerCase() === 'horizontal' ? 'scale(-1, 1)' :
                            'scale(1, -1)';
                    }
                    if (this.activeObj.flipObjColl[i].toLowerCase() === 'horizontal') {
                        this.textArea.style.transform = 'rotate(' + degree + 'deg)' + scale;
                    }
                    else if (this.activeObj.flipObjColl[i].toLowerCase() === 'vertical') {
                        this.textArea.style.transform = 'rotate(' + degree + 'deg)' + scale;
                    }
                }
            }
            else {
                this.textArea.style.transform = 'rotate(' + degree + 'deg)';
            }
            this.findTextTarget(e);
        }
    };
    ImageEditor.prototype.getStrokeWidth = function (text) {
        var strokeWidth;
        var currentWidth = parseInt(text, 10) / 2;
        switch (currentWidth) {
            case 1:
                strokeWidth = this.l10n.getConstant('XSmall');
                break;
            case 2:
                strokeWidth = this.l10n.getConstant('Small');
                break;
            case 3:
                strokeWidth = this.l10n.getConstant('Medium');
                break;
            case 4:
                strokeWidth = this.l10n.getConstant('Large');
                break;
            case 5:
                strokeWidth = this.l10n.getConstant('XLarge');
                break;
        }
        return strokeWidth;
    };
    ImageEditor.prototype.updateToolbarItems = function () {
        var selFillElem = this.element.querySelector('.e-fill.e-template .e-dropdownbtn-preview');
        var selStrokeElem = this.element.querySelector('.e-stroke.e-template .e-dropdownbtn-preview');
        var selTextStrokeElem = this.element.querySelector('.e-text-font-color.e-template .e-dropdownbtn-preview');
        var selPenStrokeElem = this.element.querySelector('.e-pen-stroke-color.e-template .e-dropdownbtn-preview');
        var strokeWidthElem = this.element.querySelector('.e-shape-stroke-width');
        var fontFamilyElem = this.element.querySelector('.e-text-font-family');
        var fontSizeElem = this.element.querySelector('.e-text-font-size');
        var fontStyleElem = this.element.querySelector('.e-text-font-style');
        if (selFillElem) {
            if (this.activeObj.strokeSettings.fillColor === '') {
                selFillElem.classList.add('e-nocolor-item');
            }
            else {
                selFillElem.classList.remove('e-nocolor-item');
                selFillElem.style.background = this.activeObj.strokeSettings.fillColor;
            }
            getComponent(this.element.id + '_shape_fill', 'colorpicker').value
                = this.activeObj.strokeSettings.fillColor + 'ff';
        }
        if (selStrokeElem) {
            selStrokeElem.style.background = this.activeObj.strokeSettings.strokeColor;
            getComponent(this.element.id + '_shape_stroke', 'colorpicker').value
                = this.activeObj.strokeSettings.strokeColor + 'ff';
        }
        if (selTextStrokeElem) {
            selTextStrokeElem.style.background = this.activeObj.strokeSettings.strokeColor;
            getComponent(this.element.id + '_text_font', 'colorpicker').value
                = this.activeObj.strokeSettings.strokeColor + 'ff';
        }
        if (selPenStrokeElem) {
            selPenStrokeElem.style.background = this.activeObj.strokeSettings.strokeColor;
            getComponent(this.element.id + '_pen_stroke', 'colorpicker').value
                = this.activeObj.strokeSettings.strokeColor + 'ff';
        }
        if (fontFamilyElem) {
            if (Browser.isDevice) {
                fontFamilyElem.setAttribute('style', 'font-family:' + this.activeObj.textSettings.fontFamily.toLowerCase());
            }
            else {
                fontFamilyElem.textContent = this.activeObj.textSettings.fontFamily;
            }
        }
        if (fontSizeElem) {
            for (var i = 0; i < this.fontSizeColl.length; i++) {
                if (parseInt(this.fontSizeColl[i].text, 10) >= Math.round(this.activeObj.textSettings.fontSize)) {
                    fontSizeElem.textContent = (i + 1).toString();
                    break;
                }
            }
        }
        if (fontStyleElem) {
            if (Browser.isDevice) {
                if (!this.activeObj.textSettings.bold && !this.activeObj.textSettings.italic) {
                    fontStyleElem.setAttribute('style', '');
                }
                else if (this.activeObj.textSettings.bold && this.activeObj.textSettings.italic) {
                    fontStyleElem.setAttribute('style', 'font-style: italic;font-weight: bold');
                }
                else if (this.activeObj.textSettings.bold) {
                    fontStyleElem.setAttribute('style', 'font-weight: bold');
                }
                else {
                    fontStyleElem.setAttribute('style', 'font-style: italic');
                }
            }
            else {
                if (!this.activeObj.textSettings.bold && !this.activeObj.textSettings.italic) {
                    fontStyleElem.textContent = 'Default';
                }
                else if (this.activeObj.textSettings.bold && this.activeObj.textSettings.italic) {
                    fontStyleElem.textContent = 'Bold Italic';
                }
                else if (this.activeObj.textSettings.bold) {
                    fontStyleElem.textContent = 'Bold';
                }
                else {
                    fontStyleElem.textContent = 'Italic';
                }
            }
        }
        if (strokeWidthElem) {
            var strokeWidth = Math.round((this.activeObj.strokeSettings.strokeWidth)).toString();
            strokeWidthElem.textContent = this.getStrokeWidth(strokeWidth);
        }
    };
    ImageEditor.prototype.setTimer = function (e) {
        if (!this.isTimer && this.timer > 10) {
            this.findTextPoint(e);
            if (Browser.isDevice) {
                this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
            }
        }
    };
    // eslint-disable-next-line
    ImageEditor.prototype.targetTouches = function (touches) {
        var p1 = { x: touches[0].pageX, y: touches[0].pageY };
        var p2 = { x: touches[1].pageX, y: touches[1].pageY };
        var points = [p1, p2];
        return points;
    };
    ImageEditor.prototype.calculateScale = function (startTouches, endTouches) {
        var startDistance = this.getDistance(startTouches[0], startTouches[1]);
        var endDistance = this.getDistance(endTouches[0], endTouches[1]);
        return endDistance / startDistance;
    };
    ImageEditor.prototype.getDistance = function (a, b) {
        var x = 0;
        var y = 0;
        if (!isNullOrUndefined(a) && !isNullOrUndefined(b)) {
            x = a.x - b.x;
            y = a.y - b.y;
        }
        return Math.sqrt(x * x + y * y);
    };
    ImageEditor.prototype.setXYPoints = function (e) {
        e.preventDefault();
        var x;
        var y;
        if (e.type === 'mousedown') {
            x = e.clientX;
            y = e.clientY;
        }
        else {
            this.touchEndPoint.x = x = e.touches[0].clientX;
            this.touchEndPoint.y = y = e.touches[0].clientY;
        }
        var bbox = this.lowerCanvas.getBoundingClientRect();
        x -= bbox.left;
        y -= bbox.top;
        return { x: x, y: y };
    };
    ImageEditor.prototype.touchStartHandler = function (e) {
        e.preventDefault();
        if (e.touches.length === 2) {
            this.isFirstMove = true;
        }
        else {
            this.timer = setTimeout(this.setTimer.bind(this), 1000, e);
            this.mouseDownEventHandler(e);
        }
        EventHandler.add(this.lowerCanvas, 'touchend', this.mouseUpEventHandler, this);
        EventHandler.add(this.lowerCanvas, 'touchmove', this.mouseMoveEventHandler, this);
        EventHandler.add(this.upperCanvas, 'touchend', this.mouseUpEventHandler, this);
        EventHandler.add(this.upperCanvas, 'touchmove', this.mouseMoveEventHandler, this);
    };
    ImageEditor.prototype.isShapeTouch = function (e, isCropSelection) {
        var isShape = false;
        if (e.type === 'touchstart') {
            this.redrawActObj();
            var points = this.setXYPoints(e);
            var x = points.x;
            var y = points.y;
            isShape = this.findTargetObj(x, y, isCropSelection);
        }
        return isShape;
    };
    ImageEditor.prototype.isFreehandDrawTouch = function (e, isCropSelection) {
        var isFreehandDraw = false;
        if (e.type === 'touchstart' && !isCropSelection) {
            this.redrawActObj();
            var points = this.setXYPoints(e);
            var x = points.x;
            var y = points.y;
            this.setCursor(x, y);
            if (this.isFreehandDrawingPoint) {
                isFreehandDraw = true;
            }
        }
        return isFreehandDraw;
    };
    ImageEditor.prototype.selectFreehandDraw = function (index) {
        this.isFreehandDrawEditing = true;
        if (!isNullOrUndefined(index) || index === 0) {
            if (this.isFreehandDrawIndex(index)) {
                this.freehandDrawSelectedIndex = this.freehandDrawHoveredIndex = index;
                this.hoverFreehandraw();
                this.upperCanvas.style.cursor = 'pointer';
            }
            else {
                return;
            }
        }
        this.freehandDrawSelectedIndex = this.freehandDrawHoveredIndex;
        this.pointColl[this.freehandDrawSelectedIndex].isSelected = true;
        this.freehandDrawSelectedId = this.pointColl[this.freehandDrawSelectedIndex].id;
        if (this.pointColl[this.freehandDrawHoveredIndex].strokeColor !== '#42a5f5') {
            this.tempFreeHandDrawEditingStyles.strokeColor = this.pointColl[this.freehandDrawHoveredIndex].strokeColor;
        }
        this.tempFreeHandDrawEditingStyles.strokeWidth = this.pointColl[this.freehandDrawHoveredIndex].strokeWidth;
        if (this.isFreehandDrawEditing) {
            this.refreshToolbar('pen');
        }
        else {
            this.okBtn();
        }
    };
    ImageEditor.prototype.closeContextualToolbar = function () {
        var isContextualToolbar = false;
        if ((!isNullOrUndefined(this.element.querySelector('#' + this.element.id + '_contextualToolbar')) &&
            !this.element.querySelector('#' + this.element.id + '_contextualToolbar').parentElement.classList.contains('e-hide')) ||
            (!isNullOrUndefined(this.element.querySelector('#' + this.element.id + '_headWrapper'))
                && !this.element.querySelector('#' + this.element.id + '_headWrapper').parentElement.classList.contains('e-hide'))) {
            this.element.querySelector('.e-contextual-toolbar-wrapper').classList.add('e-hide');
            this.okBtn();
            this.refreshToolbar('main');
            isContextualToolbar = true;
        }
        return isContextualToolbar;
    };
    ImageEditor.prototype.mouseDownEventHandler = function (e) {
        if (e.type === 'touchstart') {
            this.isTouch = true;
        }
        if (e.type === 'touchstart' && e.currentTarget === this.lowerCanvas && !this.isImageLoaded) {
            return;
        }
        var isCropSelection = false;
        var splitWords;
        var isPan = true;
        if (this.activeObj.shape !== undefined) {
            splitWords = this.activeObj.shape.split('-');
        }
        if (splitWords !== undefined && splitWords[0] === 'crop') {
            isCropSelection = true;
        }
        if (isCropSelection) {
            this.dragCanvas = this.togglePan = true;
        }
        if (isCropSelection && this.dragCanvas) {
            var points = this.setXYPoints(e);
            var x = points.x;
            var y = points.y;
            this.setCursor(x, y);
            if (this.upperCanvas.style.cursor !== 'move' && this.upperCanvas.style.cursor !== 'crosshair' &&
                this.upperCanvas.style.cursor !== 'default' && this.upperCanvas.style.cursor !== 'grab') {
                isPan = false;
            }
        }
        var isShape = this.isShapeTouch(e, isCropSelection);
        var isFreehandDraw = this.isFreehandDrawTouch(e, isCropSelection);
        if (!isShape && !this.togglePen && !isCropSelection) {
            this.refreshToolbar('main');
            this.closeContextualToolbar();
        }
        if (this.dragCanvas && isPan && (this.upperCanvas.style.cursor === 'grab' || this.isTouch)
            && !isShape && !isFreehandDraw && !this.togglePen) {
            if (this.isFreehandDrawEditing) {
                this.applyFreehandDraw();
            }
            this.applyShape();
            this.canvasMouseDownHandler(e);
        }
        else {
            var points = this.setXYPoints(e);
            var x = points.x;
            var y = points.y;
            this.redrawActObj(x, y);
            if (this.isFreehandDrawingPoint || (this.isFreehandDrawCustomized && !this.togglePen)) {
                if (!isNullOrUndefined(this.freehandDrawSelectedIndex) &&
                    this.freehandDrawSelectedIndex !== this.freehandDrawHoveredIndex) {
                    var tempHoveredIndex = this.freehandDrawHoveredIndex;
                    this.okBtn();
                    this.isFreehandDrawCustomized = false;
                    this.freehandDrawHoveredIndex = tempHoveredIndex;
                    if (this.freehandDrawHoveredIndex > -1) {
                        var strokeColor = this.pointColl[this.freehandDrawHoveredIndex].strokeColor === '#fff' ? '#42a5f5' : this.pointColl[this.freehandDrawHoveredIndex].strokeColor;
                        this.hoverFreehandraw(strokeColor, this.pointColl[this.freehandDrawHoveredIndex].strokeWidth);
                    }
                }
                if (!isNullOrUndefined(this.freehandDrawHoveredIndex) && this.freehandDrawHoveredIndex > -1) {
                    this.selectFreehandDraw();
                }
                else if (this.freehandDrawSelectedIndex) {
                    this.okBtn();
                    var strokeColor = this.pointColl[this.freehandDrawSelectedIndex].strokeColor;
                    this.hoverFreehandraw(strokeColor, this.pointColl[this.freehandDrawSelectedIndex].strokeWidth);
                }
            }
            else {
                if (this.isFreehandDrawEditing) {
                    this.cancelFreehandDraw();
                }
                this.closeContextualToolbar();
                this.isFreehandDrawEditing = false;
                if (this.upperCanvas.style.cursor === 'crosshair' || (Browser.isDevice && this.togglePen)) {
                    if (this.togglePen) {
                        if (isNullOrUndefined(this.activeObj.strokeSettings)) {
                            this.activeObj.strokeSettings = this.strokeSettings;
                        }
                        if (isNullOrUndefined(this.penStrokeWidth)) {
                            this.penStrokeWidth = 2;
                        }
                        this.upperContext.strokeStyle = this.activeObj.strokeSettings.strokeColor;
                        this.upperContext.fillStyle = this.activeObj.strokeSettings.strokeColor;
                        this.freehandDownHandler(e, this.upperCanvas); // To handle Freehand drawing
                    }
                    else {
                        this.refreshActiveObj();
                        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                    }
                    this.currObjType.isActiveObj = false;
                    this.dragElement = '';
                    this.dragPoint.startX = this.dragPoint.startY = this.dragPoint.endX = this.dragPoint.endY = 0;
                }
                if ((this.upperCanvas.style.cursor !== 'crosshair' && e.type.toLowerCase() === 'touchstart') ||
                    (this.currObjType.isActiveObj && this.upperCanvas.style.cursor !== 'default' && !this.togglePen)) {
                    if (this.currObjType.isUndoAction) {
                        this.refreshUndoRedoColl();
                    }
                    this.findTarget(x, y, e.type);
                }
                else if ((this.currObjType.shape === '' || this.currObjType.isCustomCrop) && !this.togglePen && this.upperCanvas.style.cursor !== 'default') {
                    this.setActivePoint(x, y);
                }
                if (!isNullOrUndefined(this.activeObj)) {
                    var isCropSelection_1 = false;
                    var splitWords_1;
                    if (this.activeObj.shape !== undefined) {
                        splitWords_1 = this.activeObj.shape.split('-');
                    }
                    if (splitWords_1 === undefined && (this.currObjType.isCustomCrop || this.togglePen)) {
                        isCropSelection_1 = true;
                    }
                    else if (splitWords_1 !== undefined && splitWords_1[0] === 'crop') {
                        isCropSelection_1 = true;
                    }
                    if ((this.activeObj.shape === 'rectangle') || (this.activeObj.shape === 'ellipse')
                        || (this.activeObj.shape === 'line')) {
                        this.refreshToolbar('shapes');
                    }
                    else if (this.activeObj.shape === 'text') {
                        this.refreshToolbar('text');
                    }
                    else if (!isCropSelection_1) {
                        this.callMainToolbar();
                    }
                    this.updateToolbarItems();
                }
            }
        }
        this.isShapeInserted = false;
        this.tempActiveObj = extend({}, this.activeObj, {}, true);
    };
    ImageEditor.prototype.mouseMoveEventHandler = function (e) {
        e.preventDefault();
        if (e.type === 'touchmove' && e.touches.length === 2) {
            if (this.isFirstMove) {
                this.startTouches = this.targetTouches(e.touches);
                this.tempTouches = [];
                this.tempTouches.push({ x: e.touches[0].clientX || (e.touches[0].pageX - this.lowerCanvas.offsetLeft),
                    y: e.touches[0].clientY || (e.touches[0].pageY - this.lowerCanvas.offsetTop) });
                this.tempTouches.push({ x: e.touches[1].clientX || (e.touches[1].pageX - this.lowerCanvas.offsetLeft),
                    y: e.touches[1].clientY || (e.touches[1].pageY - this.lowerCanvas.offsetTop) });
            }
            else {
                var firstFingerX = e.touches[0].clientX || (e.touches[0].pageX - this.lowerCanvas.offsetLeft);
                var firstFingerY = e.touches[0].clientY || (e.touches[0].pageY - this.lowerCanvas.offsetTop);
                var secondFingerX = e.touches[1].clientX || (e.touches[1].pageX - this.lowerCanvas.offsetLeft);
                var secondFingerY = e.touches[1].clientY || (e.touches[1].pageY - this.lowerCanvas.offsetTop);
                var scale = this.calculateScale(this.startTouches, this.targetTouches(e.touches));
                // Need to set lastX and lastY points
                if (this.tempTouches[0].x !== firstFingerX && this.tempTouches[0].y !== firstFingerY &&
                    this.tempTouches[1].x !== secondFingerX && this.tempTouches[1].y !== secondFingerY) {
                    if (scale > 1) {
                        this.zoom(1.1);
                    }
                    else {
                        this.zoom(-1.1);
                    }
                    this.tempTouches = [];
                    this.tempTouches.push({ x: e.touches[0].clientX || (e.touches[0].pageX - this.lowerCanvas.offsetLeft),
                        y: e.touches[0].clientY || (e.touches[0].pageY - this.lowerCanvas.offsetTop) });
                    this.tempTouches.push({ x: e.touches[1].clientX || (e.touches[1].pageX - this.lowerCanvas.offsetLeft),
                        y: e.touches[1].clientY || (e.touches[1].pageY - this.lowerCanvas.offsetTop) });
                }
            }
            this.isFirstMove = false;
            return;
        }
        if (this.textArea.style.display === 'none') {
            this.isTimer = true;
        }
        var x;
        var y;
        if (e.type === 'mousemove') {
            x = e.clientX;
            y = e.clientY;
        }
        else {
            this.touchEndPoint.x = x = e.touches[0].clientX;
            this.touchEndPoint.y = y = e.touches[0].clientY;
        }
        var bbox = this.lowerCanvas.getBoundingClientRect();
        x -= bbox.left;
        y -= bbox.top;
        this.canvasMouseMoveHandler(e);
        var isCropSelection = false;
        var splitWords;
        if (this.activeObj.shape !== undefined) {
            splitWords = this.activeObj.shape.split('-');
        }
        if (splitWords !== undefined && splitWords[0] === 'crop') {
            isCropSelection = true;
        }
        if (isCropSelection && this.zoomFactor > 0) {
            this.disableZoomOutBtn();
        }
        if (this.currObjType.isActiveObj && (this.activeObj.activePoint !== undefined || this.objColl.length > 0) &&
            !this.dragCanvas || this.activeObj.activePoint !== undefined) {
            if (this.dragElement === '') {
                this.setCursor(x, y);
                if ((!isNullOrUndefined(this.activeObj.activePoint) && this.activeObj.activePoint.width === 0) && this.upperCanvas.style.cursor !== 'default' &&
                    this.upperCanvas.style.cursor !== 'move' && this.upperCanvas.style.cursor !== 'crosshair'
                    && this.upperCanvas.style.cursor !== 'grab' && this.upperCanvas.style.cursor !== 'pointer') {
                    this.upperCanvas.style.cursor = 'move';
                }
                this.findTarget(x, y, e.type);
            }
        }
        if (this.currObjType.isDragging) {
            this.upperContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
            this.updateActivePoint(x, y, isCropSelection);
            if (this.isPreventDragging) {
                if ((this.activeObj.activePoint.startX > this.destLeft) &&
                    (this.activeObj.activePoint.endX < this.destLeft + this.destWidth) && (this.activeObj.activePoint.startY > this.destTop)
                    && (this.activeObj.activePoint.endY < this.destTop + this.destHeight)) {
                    this.isPreventDragging = false;
                }
                this.drawObject('duplicate', null, null, null, true);
            }
            else {
                this.drawObject('duplicate');
            }
            if (isCropSelection) {
                this.dragCanvas = this.togglePan = true;
            }
        }
    };
    ImageEditor.prototype.mouseUpEventHandler = function (e) {
        if (e.type === 'touchstart') {
            this.isTouch = false;
        }
        e.preventDefault();
        if (this.togglePan) {
            this.canvasMouseUpHandler(e);
        }
        var x;
        var y;
        if (e.type === 'mouseup') {
            x = e.clientX;
            y = e.clientY;
        }
        else {
            x = this.touchEndPoint.x;
            y = this.touchEndPoint.y;
        }
        var bbox = this.lowerCanvas.getBoundingClientRect();
        x -= bbox.left;
        y -= bbox.top;
        if (e.type === 'touchend') {
            this.startTouches = this.tempTouches = [];
            this.isFirstMove = false;
            if (this.textArea.style.display === 'none') {
                this.isTimer = false;
                this.timer = 0;
            }
        }
        var isCropSelection = false;
        var splitWords;
        if (this.activeObj.shape !== undefined) {
            splitWords = this.activeObj.shape.split('-');
        }
        if (splitWords !== undefined && splitWords[0] === 'crop') {
            isCropSelection = true;
        }
        if (e.currentTarget === this.upperCanvas) {
            this.currObjType.shape = this.currObjType.shape.toLowerCase();
            var prevCropObj = extend({}, this.cropObj, {}, true);
            var prevObj = this.getCurrentObj();
            prevObj.objColl = extend([], this.objColl, [], true);
            prevObj.pointColl = extend([], this.pointColl, [], true);
            prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
            if (!this.togglePen && !isCropSelection) {
                if (!isNullOrUndefined(this.tempObjColl) && this.activeObj.activePoint.width !== 0) {
                    this.objColl.push(this.activeObj);
                    if (JSON.stringify(this.activeObj.activePoint) !== JSON.stringify(this.tempActiveObj.activePoint)) {
                        this.updateUndoRedoColl('shapeTransform', prevObj, this.tempObjColl, prevObj.pointColl, prevCropObj);
                    }
                    this.redrawShape(this.objColl[this.objColl.length - 1]);
                    this.tempObjColl = undefined;
                }
                if (!this.isFreehandDrawEditing) {
                    this.applyCurrActObj(x, y);
                }
            }
            else if (isCropSelection && !this.togglePen) {
                if (JSON.stringify(this.activeObj.activePoint) !== JSON.stringify(this.tempActiveObj.activePoint)) {
                    prevObj.activeObj = extend([], this.tempActiveObj, {}, true);
                    this.updateUndoRedoColl('selectionTransform', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
                }
            }
        }
        if (this.togglePen && e.currentTarget === this.upperCanvas) {
            this.freehandUpHandler(e, this.upperCanvas, this.upperContext);
        }
        else {
            this.currObjType.shape = '';
        }
        this.dragElement = '';
        this.currObjType.isInitialLine = this.currObjType.isDragging = false;
        this.oldPoint.x = undefined;
        this.oldPoint.y = undefined;
    };
    ImageEditor.prototype.keyDownEventHandler = function (e) {
        var _this = this;
        var shapeChangingArgs = {};
        var previousShapeSettings = {};
        var beforeSave = { fileName: this.fileName, fileType: this.fileType, cancel: false };
        var splitWords;
        switch (e.key) {
            case (e.ctrlKey && 's'):
                this.trigger('beforeSave', beforeSave, function (observableSaveArgs) {
                    if (!beforeSave.cancel) {
                        _this.export(observableSaveArgs.fileType, observableSaveArgs.fileName);
                    }
                });
                e.preventDefault();
                e.stopImmediatePropagation();
                break;
            // case (e.ctrlKey && 'z'):
            //     if (this.allowUndoRedo) {
            //         this.callUndo();
            //     }
            //     break;
            // case (e.ctrlKey && 'y'):
            //     if (this.allowUndoRedo) {
            //         this.callRedo();
            //     }
            //     break;
            case 'Delete':
                if (this.isFreehandDrawEditing) {
                    this.updateFreehandDrawColorChange();
                    var prevCropObj = extend({}, this.cropObj, {}, true);
                    var prevObj = this.getCurrentObj();
                    prevObj.objColl = extend([], this.objColl, [], true);
                    prevObj.pointColl = extend([], this.pointColl, [], true);
                    prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
                    this.deleteFreehandDraw(parseInt(this.freehandDrawSelectedId.split('_')[1], 10) - 1, true);
                    this.updateUndoRedoColl('deleteFreehandDrawing', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
                }
                else if (this.textArea.style.display === 'none') {
                    this.objColl.push(this.activeObj);
                    var prevCropObj = extend({}, this.cropObj, {}, true);
                    var prevObj = this.getCurrentObj();
                    prevObj.objColl = extend([], this.objColl, [], true);
                    prevObj.pointColl = extend([], this.pointColl, [], true);
                    prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
                    this.objColl.pop();
                    previousShapeSettings = this.updatePreviousShapeSettings();
                    shapeChangingArgs = { action: 'delete', previousShapeSettings: previousShapeSettings, currentShapeSettings: null };
                    this.keyHistory = '';
                    this.clearSelection();
                    this.trigger('shapeChanging', shapeChangingArgs);
                    this.refreshToolbar('main');
                    this.updateUndoRedoColl('deleteObj', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
                }
                break;
            case 'Escape':
                if (this.togglePan) {
                    this.refreshToolbar(this.currentToolbar);
                    this.pan(false);
                }
                else if (this.textArea.style.display === 'block') {
                    this.redrawActObj();
                }
                else {
                    this.performCancel();
                }
                break;
            case 'Enter':
                if (this.activeObj.shape !== undefined) {
                    splitWords = this.activeObj.shape.split('-');
                }
                if (this.activeObj.horTopLine !== undefined && (this.activeObj.shape !== undefined && splitWords[0] === 'crop')) {
                    this.crop();
                }
                break;
            default:
                if (Browser.isDevice && this.textArea.style.display === 'block') {
                    setTimeout(this.textKeyDown.bind(this), 1, e);
                }
                break;
        }
    };
    ImageEditor.prototype.keyUpEventHandler = function (e) {
        // eslint-disable-next-line
        if (this.textArea.style.display === 'block' && e.target.id === this.element.id + '_textArea') {
            setTimeout(this.textKeyDown.bind(this), 1, e);
        }
    };
    ImageEditor.prototype.canvasMouseDownHandler = function (e) {
        e.preventDefault();
        var x;
        var y;
        if (e.type === 'mousedown') {
            x = e.offsetX || (e.pageX - this.lowerCanvas.offsetLeft);
            y = e.offsetY || (e.pageY - this.lowerCanvas.offsetTop);
        }
        else {
            x = e.touches[0].clientX || (e.touches[0].pageX - this.lowerCanvas.offsetLeft);
            y = e.touches[0].clientY || (e.touches[0].pageY - this.lowerCanvas.offsetTop);
        }
        var bbox = this.lowerCanvas.getBoundingClientRect();
        x -= bbox.left;
        y -= bbox.top;
        this.panDown = { x: x, y: y };
        this.lastPan = { x: this.destLeft, y: this.destTop };
        if (isNullOrUndefined(this.tempPanMove)) {
            this.tempPanMove = { x: x, y: y };
            this.panStartObj = this.getCurrentObj();
            this.panStartObj.objColl = extend([], this.objColl, [], true);
            this.panStartObj.pointColl = extend([], this.pointColl, [], true);
            this.panStartObj.afterCropActions = this.afterCropActions;
        }
    };
    ImageEditor.prototype.canvasMouseMoveHandler = function (e) {
        if (this.dragCanvas) {
            this.lowerCanvas.style.cursor = 'grab';
        }
        else {
            this.dragCanvas = this.togglePan = false;
            this.lowerCanvas.style.cursor = this.upperCanvas.style.cursor = 'default';
        }
        var x;
        var y;
        if (e.type === 'mousemove') {
            x = e.offsetX || (e.pageX - this.lowerCanvas.offsetLeft);
            y = e.offsetY || (e.pageY - this.lowerCanvas.offsetTop);
        }
        else {
            x = e.touches[0].clientX || (e.touches[0].pageX - this.lowerCanvas.offsetLeft);
            y = e.touches[0].clientY || (e.touches[0].pageY - this.lowerCanvas.offsetTop);
        }
        var bbox = this.lowerCanvas.getBoundingClientRect();
        x -= bbox.left;
        y -= bbox.top;
        this.panMove = { x: x, y: y };
        if (this.panDown && this.panMove && this.togglePan && this.dragCanvas) {
            this.drawPannedImage();
        }
    };
    ImageEditor.prototype.canvasMouseUpHandler = function (e) {
        e.preventDefault();
        if (this.togglePan) {
            if (this.panDown && this.panMove && this.togglePan && this.dragCanvas) {
                var prevCropObj = extend({}, this.cropObj, {}, true);
                this.updateUndoRedoColl('pan', this.panStartObj, this.panStartObj.objColl, this.panStartObj.pointColl, prevCropObj);
                this.panDown = null;
                this.panMove = null;
                this.tempPanMove = null;
                this.panStartObj = null;
            }
        }
        this.currObjType.isDragging = false;
    };
    ImageEditor.prototype.handleScroll = function (e) {
        var x;
        var y;
        var isInsideCanvas = false;
        if (e.type === 'mousewheel') {
            // eslint-disable-next-line
            x = e.clientX;
            y = e.clientY;
        }
        var bbox = this.lowerCanvas.getBoundingClientRect();
        x -= bbox.left;
        y -= bbox.top;
        if (x > this.destLeft && x < this.destLeft + this.destWidth && y > this.destTop && y < this.destTop + this.destHeight) {
            isInsideCanvas = true;
        }
        if (e.ctrlKey === true && isInsideCanvas) {
            e.preventDefault();
        }
    };
    ImageEditor.prototype.textKeyDown = function (e) {
        if (String.fromCharCode(e.which) === '\r') {
            this.textRow += 1;
        }
        this.textArea.setAttribute('rows', this.textRow.toString());
        this.textArea.style.height = 'auto';
        this.textArea.style.height = this.textArea.scrollHeight + 'px';
        this.setTextBoxWidth(e);
        if (Browser.isDevice) {
            this.textArea.style.width = parseFloat(this.textArea.style.width) + this.textArea.style.fontSize + 'px';
        }
        var rows = this.textArea.value.split('\n');
        this.textRow = rows.length;
        this.textArea.setAttribute('rows', this.textRow.toString());
    };
    ImageEditor.prototype.adjustToScreen = function () {
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var proxy = this;
        if ((!isNullOrUndefined(this.element.querySelector('#' + this.element.id + '_contextualToolbar')) &&
            !this.element.querySelector('#' + this.element.id + '_contextualToolbar').parentElement.classList.contains('e-hide')) ||
            (!isNullOrUndefined(this.element.querySelector('#' + this.element.id + '_headWrapper'))
                && !this.element.querySelector('#' + this.element.id + '_headWrapper').parentElement.classList.contains('e-hide'))) {
            this.element.querySelector('.e-contextual-toolbar-wrapper').classList.add('e-hide');
            this.okBtn();
            this.refreshToolbar('main');
        }
        var splitWords;
        var isSelectionCrop = false;
        if (this.activeObj.shape !== undefined) {
            splitWords = this.activeObj.shape.split('-');
        }
        if (splitWords !== undefined && splitWords[0] === 'crop') {
            isSelectionCrop = true;
            this.updateImageRatioForActObj();
            this.objColl.push(this.activeObj);
            this.refreshActiveObj();
        }
        if (this.textArea.style.display === 'block') {
            this.redrawActObj();
        }
        var tempFilter = this.lowerContext.filter;
        this.update();
        this.applyActObj();
        this.refreshActiveObj();
        this.lowerContext.filter = this.initialAdjustmentValue = tempFilter;
        if (this.isImageLoaded) {
            showSpinner(this.element);
            this.element.style.opacity = '0.5';
        }
        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
        var canvasWrapper = document.querySelector('#' + this.element.id + '_canvasWrapper');
        if (!isNullOrUndefined(canvasWrapper)) {
            canvasWrapper.style.width = this.element.offsetWidth + 'px';
            canvasWrapper.style.height = this.element.offsetHeight + 'px';
            if (Browser.isDevice) {
                canvasWrapper.style.height = (parseFloat(canvasWrapper.style.height) - (2 * this.toolbarHeight)) - 3 + 'px';
            }
            else {
                canvasWrapper.style.height = (parseFloat(canvasWrapper.style.height) - this.toolbarHeight) - 3 + 'px';
            }
        }
        var maxDimension = this.calcMaxDimension(this.srcWidth, this.srcHeight);
        if (this.defaultZoomFactor > 0) {
            maxDimension.width += (maxDimension.width * this.defaultZoomFactor);
            maxDimension.height += (maxDimension.height * this.defaultZoomFactor);
        }
        this.destLeft = (this.lowerCanvas.clientWidth - maxDimension.width) / 2;
        this.destTop = (this.lowerCanvas.clientHeight - maxDimension.height) / 2;
        if (this.degree === 0 && this.currFlipState === '') {
            if (this.defaultZoomFactor > 0) {
                this.destLeft += this.totalPannedPoint.x;
                this.destTop += this.totalPannedPoint.y;
            }
            this.drawImgToCanvas(maxDimension);
        }
        else {
            this.drawImgToCanvas(maxDimension);
            this.updateCurrentTransformedState('initial');
            var temp = this.lowerContext.filter;
            this.updateBrightnessFilter();
            this.lowerContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, this.destLeft, this.destTop, this.destWidth, this.destHeight);
            this.lowerContext.filter = temp;
            this.updateCurrentTransformedState('reverse');
        }
        this.zoomObjColl();
        this.zoomFreehandDrawColl();
        if (this.isCircleCrop) {
            this.cropCircle(this.lowerContext);
        }
        hideSpinner(this.element);
        this.element.style.opacity = '1';
        if (this.defToolbarItems.length > 0 && (!isNullOrUndefined(document.getElementById(this.element.id + '_toolbar')))) {
            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
            var toolbar_10 = getComponent(proxy.element.id + '_toolbar', 'toolbar');
            toolbar_10.refreshOverflow();
            if (!isNullOrUndefined(this.element.querySelector('.e-contextual-toolbar-wrapper'))) {
                this.element.querySelector('.e-contextual-toolbar-wrapper').classList.add('e-hide');
            }
        }
        this.refreshActiveObj();
        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
        if (isSelectionCrop) {
            this.activeObj = extend({}, this.objColl[this.objColl.length - 1], null, true);
            this.objColl.pop();
            this.drawObject('duplicate', this.activeObj);
        }
        if ((this.degree !== 0 || this.currFlipState !== '') && this.defaultZoomFactor > 0) {
            var totalPannedPoint = extend({}, this.totalPannedPoint, null, true);
            var totalPannedInternalPoint = extend({}, this.totalPannedInternalPoint, null, true);
            var totalPannedClientPoint = extend({}, this.totalPannedClientPoint, null, true);
            this.zoom(.1);
            this.zoom(-.1);
            if (this.degree === 0) {
                this.destLeft += totalPannedPoint.x;
                this.destTop += totalPannedPoint.y;
                this.totalPannedPoint = totalPannedPoint;
                this.updateFlipPan();
            }
            else {
                this.totalPannedInternalPoint = totalPannedInternalPoint;
                this.totalPannedClientPoint = totalPannedClientPoint;
                this.currentPannedPoint = { x: 0, y: 0 };
                this.isCropTab = true;
                this.rotatePan();
                this.isCropTab = false;
            }
        }
        else if (this.degree !== 0 && this.cropZoomFactor > 0) {
            this.zoomFactor = this.cropZoomFactor = 0;
            this.enableDisableToolbarBtn();
        }
    };
    ImageEditor.prototype.screenOrientation = function () {
        if (Browser.isDevice) {
            setTimeout(this.adjustToScreen.bind(this), 100);
        }
    };
    ImageEditor.prototype.windowResizeHandler = function () {
        if (!Browser.isDevice) {
            this.adjustToScreen();
        }
    };
    ImageEditor.prototype.updatePreviousShapeSettings = function () {
        var fontStyle = [];
        if (this.activeObj.shape === 'text' && !isNullOrUndefined(this.activeObj.textSettings)) {
            if (this.activeObj.textSettings.bold) {
                fontStyle.push('bold');
            }
            if (this.activeObj.textSettings.italic) {
                fontStyle.push('italic');
            }
            if (this.activeObj.textSettings.underline) {
                fontStyle.push('underline');
            }
        }
        return { id: !isNullOrUndefined(this.activeObj.currIndex) ? this.activeObj.currIndex : null,
            type: this.toPascalCase(this.activeObj.shape),
            startX: this.activeObj.activePoint.startX, startY: this.activeObj.activePoint.startY,
            width: this.activeObj.activePoint.width, height: this.activeObj.activePoint.height,
            strokeColor: !isNullOrUndefined(this.activeObj.strokeSettings) ? this.activeObj.strokeSettings.strokeColor : null,
            strokeWidth: !isNullOrUndefined(this.activeObj.strokeSettings) ? this.activeObj.strokeSettings.strokeWidth : null,
            fillColor: !isNullOrUndefined(this.activeObj.strokeSettings) ? this.activeObj.strokeSettings.fillColor : null,
            radius: this.activeObj.shape === 'ellipse' ? this.activeObj.activePoint.width / 2 : null,
            length: this.activeObj.shape === 'line' ? this.activeObj.activePoint.width : null,
            text: this.activeObj.shape === 'text' ? (!isNullOrUndefined(this.activeObj.keyHistory) ? this.activeObj.keyHistory : null) : null,
            fontSize: this.activeObj.shape === 'text' ? (!isNullOrUndefined(this.activeObj.textSettings) ? this.activeObj.textSettings.fontSize : null) : null,
            fontStyle: this.activeObj.shape === 'text' ? fontStyle : null,
            color: this.activeObj.shape === 'text' ? (!isNullOrUndefined(this.activeObj.strokeSettings) ? this.activeObj.strokeSettings.strokeColor : null) : null
        };
    };
    ImageEditor.prototype.disableZoomOutBtn = function () {
        var isDisabled = false;
        var zoomOut = document.querySelector('#' + this.element.id + '_zoomOut');
        var destLeft = this.destLeft;
        var destTop = this.destTop;
        var destWidth = this.destWidth;
        var destHeight = this.destHeight;
        if (this.degree === 0 || this.degree === 180) {
            if (!isNullOrUndefined(this.activeObj.shape)) {
                this.setZoomDimension(-0.1, this.activeObj);
                if (this.destLeft > this.activeObj.activePoint.startX || this.destTop > this.activeObj.activePoint.startY ||
                    this.destLeft + this.destWidth < this.activeObj.activePoint.endX || this.destTop + this.destHeight <
                    this.activeObj.activePoint.endY) {
                    zoomOut.classList.add('e-disabled');
                    zoomOut.parentElement.classList.add('e-overlay');
                    isDisabled = true;
                }
                else {
                    zoomOut.classList.remove('e-disabled');
                    zoomOut.parentElement.classList.remove('e-overlay');
                    isDisabled = false;
                }
            }
            else {
                this.setZoomDimension(-0.1, null);
            }
        }
        this.destLeft = destLeft;
        this.destTop = destTop;
        this.destWidth = destWidth;
        this.destHeight = destHeight;
        return isDisabled;
    };
    ImageEditor.prototype.setZoomDimension = function (value, selectionObj) {
        var maxDimension = { width: 0, height: 0 };
        if (this.degree % 90 === 0 && this.degree % 180 !== 0) {
            maxDimension = this.calcMaxDimension(this.srcHeight, this.srcWidth);
        }
        else {
            maxDimension = this.calcMaxDimension(this.srcWidth, this.srcHeight);
        }
        maxDimension.width += (maxDimension.width * this.zoomFactor);
        maxDimension.height += (maxDimension.height * this.zoomFactor);
        this.destLeft += ((this.destWidth - maxDimension.width) / 2);
        this.destTop += ((this.destHeight - maxDimension.height) / 2);
        // While zoom out limit image to draw inside the selection range
        if (value < 0 && !isNullOrUndefined(selectionObj)) {
            if (this.destLeft > selectionObj.activePoint.startX) {
                this.destLeft = selectionObj.activePoint.startX;
            }
            if (this.destTop > selectionObj.activePoint.startY) {
                this.destTop = selectionObj.activePoint.startY;
            }
            if (this.destLeft + maxDimension.width < selectionObj.activePoint.startX + selectionObj.activePoint.width) {
                this.destLeft = this.destLeft + (selectionObj.activePoint.startX + selectionObj.activePoint.width) -
                    (this.destLeft + maxDimension.width);
            }
            if (this.destTop + maxDimension.height < selectionObj.activePoint.startY + selectionObj.activePoint.height) {
                this.destTop = this.destTop + (selectionObj.activePoint.startY + selectionObj.activePoint.height) -
                    (this.destTop + maxDimension.height);
            }
        }
        else if (value < 0 && isNullOrUndefined(selectionObj)) {
            if (this.destLeft > 0) {
                this.destLeft = 0;
            }
            if (this.destTop > 0) {
                this.destTop = 0;
            }
            if (this.destLeft + maxDimension.width < this.lowerCanvas.width) {
                this.destLeft = this.lowerCanvas.width - this.destWidth;
            }
            if (this.destTop + maxDimension.height < this.lowerCanvas.height) {
                this.destTop = this.lowerCanvas.height - this.destHeight;
            }
        }
        return maxDimension;
    };
    ImageEditor.prototype.applyCurrActObj = function (x, y) {
        var isInside = false;
        var actObj = extend({}, this.activeObj, {}, true);
        if (isNullOrUndefined(actObj.activePoint)) {
            return;
        }
        if ((x >= Math.floor(actObj.activePoint.startX) && x <= Math.ceil(actObj.activePoint.endX) &&
            y >= Math.floor(actObj.activePoint.startY) && y <= Math.ceil(actObj.activePoint.endY))) {
            isInside = true;
        }
        if (!isInside) {
            this.updateImageRatioForActObj();
            if (this.activeObj.horTopLine !== undefined && this.activeObj.horTopLine.startX !== 0 && this.activeObj.horTopLine.endX !== 0
                && !this.currObjType.isCustomCrop && this.currObjType.shape !== '') {
                this.objColl.push(extend({}, this.activeObj, {}, true));
            }
            if (this.activeObj.shape === 'text' || (this.currObjType.shape === 'ellipse' || this.currObjType.shape === 'rectangle' ||
                this.currObjType.shape === 'line')) {
                var tempFilter = this.lowerContext.filter;
                this.lowerContext.filter = this.getDefaultFilter();
                for (var i = 0; i < this.objColl.length; i++) {
                    if (this.isObjInsideCropRegion(this.objColl[i])) {
                        this.apply(this.objColl[i].shape, this.objColl[i]);
                        this.refreshActiveObj();
                    }
                }
                this.zoomFreehandDrawColl();
                this.lowerContext.filter = tempFilter;
                this.apply('shape');
                this.clearOuterCanvas(this.lowerContext);
                this.clearOuterCanvas(this.upperContext);
                if (this.isCircleCrop) {
                    this.cropCircle(this.lowerContext);
                }
            }
            this.refreshToolbar('main');
        }
    };
    ImageEditor.prototype.updateTextFromTextArea = function () {
        if (this.activeObj.keyHistory !== this.textArea.value) {
            var prevCropObj = extend({}, this.cropObj, {}, true);
            var prevObj = this.getCurrentObj();
            prevObj.objColl = extend([], this.objColl, [], true);
            prevObj.pointColl = extend([], this.pointColl, [], true);
            prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
            this.updateUndoRedoColl('text', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj, this.activeObj.keyHistory, this.textArea.value);
        }
        this.activeObj.keyHistory = this.textArea.value;
        this.textArea.style.display = 'none';
        this.textArea.value = '';
        this.updateFontStyles();
        var width = this.upperContext.measureText(this.activeObj.keyHistory).width +
            this.activeObj.textSettings.fontSize * 0.5;
        var height = this.activeObj.textSettings.fontSize + this.activeObj.textSettings.fontSize * 0.25;
        var rows = this.activeObj.keyHistory.split('\n');
        if (rows.length > 1) {
            height *= rows.length;
            var widthColl = [];
            for (var i = 0; i < rows.length; i++) {
                widthColl.push(this.upperContext.measureText(rows[i]).width +
                    this.activeObj.textSettings.fontSize * 0.5);
            }
            width = Math.max.apply(Math, widthColl);
        }
        this.setTextSelection(width, height);
        this.updateActiveObject(this.activeObj.activePoint, this.activeObj);
        this.updateImageRatioForActObj();
    };
    ImageEditor.prototype.setTextBoxStylesToActObj = function () {
        this.activeObj.textSettings.fontFamily = this.textArea.style.fontFamily;
        this.activeObj.strokeSettings.strokeColor = this.textArea.style.color;
        if (this.textArea.style.fontWeight === 'bold') {
            this.activeObj.textSettings.bold = true;
        }
        else {
            this.activeObj.textSettings.bold = false;
        }
        if (this.textArea.style.fontStyle === 'italic') {
            this.activeObj.textSettings.italic = true;
        }
        else {
            this.activeObj.textSettings.italic = false;
        }
        this.activeObj.textSettings.fontSize = (parseFloat(this.textArea.style.fontSize));
    };
    ImageEditor.prototype.redrawActObj = function (x, y) {
        var splitWords;
        if (this.activeObj.shape !== undefined) {
            splitWords = this.activeObj.shape.split('-');
        }
        if (this.activeObj.horTopLine !== undefined && (this.activeObj.shape !== undefined && splitWords[0] !== 'crop')) {
            if (this.textArea.style.display === 'block') {
                this.setTextBoxStylesToActObj();
                this.updateFontRatio(this.activeObj, true);
                if (x && y) {
                    if ((x !== this.activeObj.activePoint.startX) && (y !== this.activeObj.activePoint.startY)) {
                        this.updateTextFromTextArea();
                        this.applyActObj();
                    }
                }
                else {
                    this.updateTextFromTextArea();
                    this.apply(this.activeObj.shape, this.activeObj);
                    this.objColl.push(this.activeObj);
                    this.refreshActiveObj();
                    this.textArea.style.transform = '';
                    this.refreshToolbar('main');
                }
            }
            else {
                this.applyActObj();
            }
        }
    };
    ImageEditor.prototype.setTextBoxPos = function (actObj, degree, flip, x, y) {
        var point = { x: x, y: y };
        if (degree === 0) {
            if (flip.toLowerCase() === 'horizontal') {
                point.x = actObj.activePoint.endX;
                point.y = actObj.activePoint.startY;
            }
            else if (flip.toLowerCase() === 'vertical') {
                point.x = actObj.activePoint.startX;
                point.y = actObj.activePoint.endY;
            }
            else {
                point.x = actObj.activePoint.startX;
                point.y = actObj.activePoint.startY;
            }
        }
        else if (degree === 90) {
            if (flip.toLowerCase() === 'horizontal') {
                point.x = actObj.activePoint.startX;
                point.y = actObj.activePoint.startY;
            }
            else if (flip.toLowerCase() === 'vertical') {
                point.x = actObj.activePoint.endX;
                point.y = actObj.activePoint.endY;
            }
            else {
                point.x = actObj.activePoint.endX;
                point.y = actObj.activePoint.startY;
            }
        }
        else if (degree === 180) {
            if (flip.toLowerCase() === 'horizontal') {
                point.x = actObj.activePoint.startX;
                point.y = actObj.activePoint.endY;
            }
            else if (flip.toLowerCase() === 'vertical') {
                point.x = actObj.activePoint.endX;
                point.y = actObj.activePoint.startY;
            }
            else {
                point.x = actObj.activePoint.endX;
                point.y = actObj.activePoint.endY;
            }
        }
        else if (degree === 270) {
            if (flip.toLowerCase() === 'horizontal') {
                point.x = actObj.activePoint.endX;
                point.y = actObj.activePoint.endY;
            }
            else if (flip.toLowerCase() === 'vertical') {
                point.x = actObj.activePoint.startX;
                point.y = actObj.activePoint.startY;
            }
            else {
                point.x = actObj.activePoint.startX;
                point.y = actObj.activePoint.endY;
            }
        }
        return point;
    };
    ImageEditor.prototype.setTextBoxPoints = function (actObj, degree, flip, x, y) {
        var point = { x: x, y: y };
        if (degree === 0) {
            if (actObj.flipObjColl[0].toLowerCase() === 'horizontal') {
                if (flip.toLowerCase() === 'horizontal') {
                    point.x = (actObj.activePoint.startX);
                    point.y = (actObj.activePoint.startY);
                }
                else if (flip.toLowerCase() === 'vertical') {
                    point.x = (actObj.activePoint.endX);
                    point.y = (actObj.activePoint.endY);
                }
            }
            else {
                if (flip.toLowerCase() === 'horizontal') {
                    point.x = (actObj.activePoint.endX);
                    point.y = (actObj.activePoint.endY);
                }
                else if (flip.toLowerCase() === 'vertical') {
                    point.x = (actObj.activePoint.endX);
                    point.y = (actObj.activePoint.startY);
                }
            }
        }
        else if (degree === 90) {
            if (actObj.flipObjColl[0].toLowerCase() === 'horizontal') {
                if (flip.toLowerCase() === 'horizontal') {
                    point.x = (actObj.activePoint.endX);
                    point.y = (actObj.activePoint.endY);
                }
                else if (flip.toLowerCase() === 'vertical') {
                    point.x = (actObj.activePoint.startX);
                    point.y = (actObj.activePoint.endY);
                }
            }
            else {
                if (flip.toLowerCase() === 'horizontal') {
                    point.x = (actObj.activePoint.startX);
                    point.y = (actObj.activePoint.endY);
                }
                else if (flip.toLowerCase() === 'vertical') {
                    point.x = (actObj.activePoint.startX);
                    point.y = (actObj.activePoint.startY);
                }
            }
        }
        else if (degree === 180) {
            if (actObj.flipObjColl[0].toLowerCase() === 'horizontal') {
                if (flip.toLowerCase() === 'horizontal') {
                    point.x = (actObj.activePoint.startX);
                    point.y = (actObj.activePoint.startY);
                }
                else if (flip.toLowerCase() === 'vertical') {
                    point.x = (actObj.activePoint.startX);
                    point.y = (actObj.activePoint.startY);
                }
            }
            else {
                if (flip.toLowerCase() === 'horizontal') {
                    point.x = (actObj.activePoint.startX);
                    point.y = (actObj.activePoint.startY);
                }
                else if (flip.toLowerCase() === 'vertical') {
                    point.x = (actObj.activePoint.startX);
                    point.y = (actObj.activePoint.endY);
                }
            }
        }
        else if (degree === 270) {
            if (actObj.flipObjColl[0].toLowerCase() === 'horizontal') {
                if (flip.toLowerCase() === 'horizontal') {
                    point.x = (actObj.activePoint.startX);
                    point.y = (actObj.activePoint.startY);
                }
                else if (flip.toLowerCase() === 'vertical') {
                    point.x = (actObj.activePoint.endX);
                    point.y = (actObj.activePoint.startY);
                }
            }
            else {
                if (flip.toLowerCase() === 'horizontal') {
                    point.x = (actObj.activePoint.endX);
                    point.y = (actObj.activePoint.startY);
                }
                else if (flip.toLowerCase() === 'vertical') {
                    point.x = (actObj.activePoint.endX);
                    point.y = (actObj.activePoint.endY);
                }
            }
        }
        return point;
    };
    ImageEditor.prototype.findTextTarget = function (e) {
        var x;
        var y;
        if (e.type === 'dblclick') {
            x = e.clientX;
            y = e.clientY;
        }
        else if (e.type === 'touchstart') {
            this.touchEndPoint.x = x = e.touches[0].clientX;
            this.touchEndPoint.y = y = e.touches[0].clientY;
        }
        this.preventZoomBtn = true;
        this.refreshToolbar('text');
        this.preventZoomBtn = false;
        this.updateToolbarItems();
        if (!isNullOrUndefined(x) && !isNullOrUndefined(y)) {
            var bbox = this.lowerCanvas.getBoundingClientRect();
            x -= bbox.left;
            y -= bbox.top;
            var degree = void 0;
            var flip = '';
            if (this.activeObj.shapeDegree === 0) {
                degree = this.degree;
            }
            else {
                degree = this.degree - this.activeObj.shapeDegree;
            }
            if (degree < 0) {
                degree = 360 + degree;
            }
            if (this.activeObj.textFlip === '') {
                if (this.activeObj.textFlip === this.currFlipState) {
                    flip = '';
                }
                else {
                    flip = this.currFlipState;
                }
            }
            else {
                if (this.activeObj.textFlip === this.currFlipState) {
                    flip = '';
                }
                else if (this.currFlipState === '') {
                    flip = this.activeObj.textFlip;
                }
                else {
                    flip = this.currFlipState;
                }
            }
            var temp = void 0;
            if (this.textArea.style.display === 'none') {
                temp = extend({}, this.activeObj, {}, true);
                for (var i = 0; i < this.objColl.length; i++) {
                    if (JSON.stringify(this.activeObj) === JSON.stringify(this.objColl[i])) {
                        this.objColl.splice(i, 1);
                    }
                }
                this.refreshActiveObj();
                this.lowerContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                this.redrawImgWithObj();
                if ((!isNullOrUndefined(this.currSelectionPoint) && this.currSelectionPoint.shape === 'crop-circle') || this.isCircleCrop) {
                    this.cropCircle(this.lowerContext);
                }
                this.activeObj = temp;
                this.updateFontStyles();
                var actObj = extend({}, this.activeObj, {}, true);
                if (x >= (actObj.activePoint.startX - (actObj.topLeftCircle.radius * 2)) &&
                    x <= (actObj.activePoint.endX + (actObj.topLeftCircle.radius * 2)) &&
                    y >= (actObj.activePoint.startY - (actObj.topLeftCircle.radius * 2)) &&
                    y <= (actObj.activePoint.endY + (actObj.topLeftCircle.radius * 2))) {
                    this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                    if (actObj.flipObjColl.length === 4) {
                        actObj.flipObjColl = [];
                        flip = '';
                    }
                    if (flip === '' && actObj.flipObjColl.length > 1) {
                        flip = actObj.flipObjColl[actObj.flipObjColl.length - 1];
                    }
                    if (actObj.flipObjColl.length <= 1) {
                        var points = this.setTextBoxPos(actObj, degree, flip, x, y);
                        x = points.x;
                        y = points.y;
                    }
                    else {
                        var points = this.setTextBoxPoints(actObj, degree, flip, x, y);
                        x = points.x;
                        y = points.y;
                    }
                    this.textArea.style.display = 'block';
                    this.textArea.style.left = x + 'px';
                    this.textArea.style.top = y + 'px';
                    this.textArea.style.fontFamily = actObj.textSettings.fontFamily;
                    this.textArea.style.fontSize = actObj.textSettings.fontSize + 'px';
                    this.textArea.style.color = actObj.strokeSettings.strokeColor;
                    this.textArea.style.fontWeight = actObj.textSettings.bold ? 'bold' : 'normal';
                    this.textArea.style.fontStyle = actObj.textSettings.italic ? 'italic' : 'normal';
                    this.textArea.style.border = '2px solid ' + this.themeColl[this.theme]['primaryColor'];
                    this.textArea.value = actObj.keyHistory;
                    this.textArea.style.overflow = 'hidden';
                    this.textArea.style.height = 'auto';
                    this.textArea.focus();
                    if (degree % 90 === 0 && degree % 180 !== 0 && degree !== 0) {
                        if (this.zoomFactor === 0) {
                            this.textArea.style.width = (actObj.activePoint.height) + 'px';
                            this.textArea.style.height = (actObj.activePoint.width) + 'px';
                        }
                        else {
                            this.textArea.style.width = actObj.activePoint.height + 'px';
                            this.textArea.style.height = actObj.activePoint.width + 'px';
                        }
                    }
                    else {
                        if (this.zoomFactor === 0) {
                            this.textArea.style.width = (actObj.activePoint.width) + 'px';
                            this.textArea.style.height = (actObj.activePoint.height) + 'px';
                        }
                        else {
                            this.textArea.style.width = actObj.activePoint.width + 'px';
                            this.textArea.style.height = actObj.activePoint.height + 'px';
                        }
                    }
                    this.setTextBoxWidth();
                    if (this.flipColl.length <= 1) {
                        this.setTextBoxHeight();
                    }
                }
                else {
                    this.applyActObj();
                }
            }
        }
        else if (this.textArea.style.display === 'block' && this.selectedText() !== '' && e.type === 'mousedown') {
            var temp = this.textArea.value;
            this.textArea.value += 'a';
            this.textArea.value = temp;
        }
    };
    ImageEditor.prototype.selectedText = function () {
        var start = this.textArea.selectionStart;
        var finish = this.textArea.selectionEnd;
        return this.textArea.value.substring(start, finish);
    };
    ImageEditor.prototype.setTextBoxHeight = function () {
        var textAreaTop;
        var degree;
        var flip = '';
        var actObj = extend({}, this.activeObj, {}, true);
        if (actObj.shapeDegree === 0) {
            degree = this.degree;
        }
        else {
            degree = this.degree - actObj.shapeDegree;
        }
        if (degree < 0) {
            degree = 360 + degree;
        }
        if (actObj.textFlip === '') {
            if (actObj.textFlip === this.currFlipState) {
                flip = '';
            }
            else {
                flip = this.currFlipState;
            }
        }
        else {
            if (actObj.textFlip === this.currFlipState) {
                flip = '';
            }
            else if (this.currFlipState === '') {
                flip = actObj.textFlip;
            }
            else {
                flip = this.currFlipState;
            }
        }
        if (degree === 0) {
            if (flip.toLowerCase() === 'vertical') {
                this.textArea.style.maxHeight = (this.destHeight - (this.destHeight
                    - parseFloat(this.textArea.style.top))) + 'px';
            }
            else {
                textAreaTop = parseFloat(this.textArea.style.top) - this.destTop;
                this.textArea.style.maxHeight = (this.destHeight - textAreaTop) + 'px';
            }
        }
        else if (degree === 90) {
            if (flip.toLowerCase() === 'horizontal') {
                this.textArea.style.maxHeight = (this.destWidth - (parseFloat(this.textArea.style.left)
                    - this.destLeft)) + 'px';
            }
            else {
                this.textArea.style.maxHeight = (parseFloat(this.textArea.style.left)
                    - this.destLeft) + 'px';
            }
        }
        else if (degree === 180) {
            if (flip.toLowerCase() === 'vertical') {
                textAreaTop = parseFloat(this.textArea.style.top) - this.destTop;
                this.textArea.style.maxHeight = (this.destHeight - textAreaTop) + 'px';
            }
            else {
                this.textArea.style.maxHeight = (parseFloat(this.textArea.style.top)
                    - this.destTop) + 'px';
            }
        }
        else if (degree === 270) {
            if (flip.toLowerCase() === 'horizontal') {
                this.textArea.style.maxHeight = (parseFloat(this.textArea.style.left)
                    - this.destLeft) + 'px';
            }
            else {
                this.textArea.style.maxHeight = this.destWidth - (parseFloat(this.textArea.style.left)
                    - this.destLeft) + 'px';
            }
        }
        //this.textArea.style.maxHeight = ((parseFloat(this.textArea.style.maxHeight) - parseFloat(this.textArea.style.fontSize) * 0.5)) + 'px';
    };
    ImageEditor.prototype.setTextBoxWidth = function (e) {
        var text = this.getMaxText(true);
        if (this.textArea.style.display === 'block') {
            this.updateFontStyles(true);
        }
        else {
            this.updateFontStyles();
        }
        var textAreaWidth = (this.upperContext.measureText(text).width + (parseFloat(this.textArea.style.fontSize) / 2));
        var letterWidth = e ? this.upperContext.measureText(String.fromCharCode(e.which)).width : 0;
        var actObj = extend({}, this.activeObj, {}, true);
        var degree;
        var flip = '';
        if (actObj.shapeDegree === 0) {
            degree = this.degree;
        }
        else {
            degree = this.degree - actObj.shapeDegree;
        }
        if (degree < 0) {
            degree = 360 + degree;
        }
        if (actObj.shapeFlip !== this.currFlipState) {
            flip = '';
        }
        else {
            flip = this.currFlipState;
        }
        if ((!isNullOrUndefined(e) && parseFloat(this.textArea.style.width) < (textAreaWidth + letterWidth)) || isNullOrUndefined(e)) {
            if (degree === 0) {
                if (flip.toLowerCase() === 'horizontal') {
                    if ((parseFloat(this.textArea.style.left) - this.destLeft) - textAreaWidth - letterWidth > 0) {
                        this.textArea.style.width = (textAreaWidth + letterWidth) + 'px';
                    }
                }
                else {
                    if ((this.destWidth - (parseFloat(this.textArea.style.left)
                        - this.destLeft)) > (textAreaWidth + letterWidth)) {
                        this.textArea.style.width = (textAreaWidth + letterWidth) + 'px';
                    }
                }
            }
            else if (degree === 90) {
                if (flip.toLowerCase() === 'vertical') {
                    if ((parseFloat(this.textArea.style.top) - this.destTop) - textAreaWidth - letterWidth > 0) {
                        this.textArea.style.width = (textAreaWidth + letterWidth) + 'px';
                    }
                }
                else {
                    if ((this.destWidth - (parseFloat(this.textArea.style.top)
                        - this.destTop)) > (textAreaWidth + letterWidth)) {
                        this.textArea.style.width = (textAreaWidth + letterWidth) + 'px';
                    }
                }
            }
            else if (degree === 180) {
                if (flip.toLowerCase() === 'horizontal') {
                    if ((this.destWidth - (parseFloat(this.textArea.style.left)
                        - this.destLeft)) > (textAreaWidth + letterWidth)) {
                        this.textArea.style.width = (textAreaWidth + letterWidth) + 'px';
                    }
                }
                else {
                    if ((parseFloat(this.textArea.style.left) - this.destLeft) - textAreaWidth - letterWidth > 0) {
                        this.textArea.style.width = (textAreaWidth + letterWidth) + 'px';
                    }
                }
            }
            else if (degree === 270) {
                if (flip.toLowerCase() === 'vertical') {
                    if ((this.destHeight - (parseFloat(this.textArea.style.top)
                        - this.destTop)) > (textAreaWidth + letterWidth)) {
                        this.textArea.style.width = (textAreaWidth + letterWidth) + 'px';
                    }
                }
                else {
                    if ((parseFloat(this.textArea.style.top) - this.destTop) - textAreaWidth - letterWidth > 0) {
                        this.textArea.style.width = (textAreaWidth + letterWidth) + 'px';
                    }
                }
            }
        }
    };
    ImageEditor.prototype.setActivePoint = function (startX, startY) {
        if (isNullOrUndefined(this.activeObj.activePoint)) {
            return;
        }
        if (this.currObjType.isText) {
            var textWidth = startX ? startX : 0;
            var textHeight = startY ? startY : this.activeObj.textSettings.fontSize;
            if (this.activeObj.textSettings.fontSize === undefined) {
                this.activeObj.textSettings.fontSize = (Math.abs(this.baseImg.width - this.baseImg.height)) * 0.1;
            }
            this.setTextSelection(textWidth, textHeight);
            this.mouseDownPoint.x = this.activeObj.activePoint.endX;
            this.mouseDownPoint.y = this.activeObj.activePoint.endY;
            if (this.activeObj.horTopLine !== undefined) {
                this.activeObj.activePoint = extend({}, this.activeObj.activePoint, {}, true);
            }
            this.drawObject('duplicate');
        }
        else if (startX && startY) {
            this.activeObj.activePoint.startX = this.mouseDownPoint.x = startX;
            this.activeObj.activePoint.startY = this.mouseDownPoint.y = startY;
            this.currObjType.isDragging = true;
        }
        else {
            var selectInfo = this.activeObj;
            this.activeObj.activePoint = { startX: selectInfo.horTopLine.startX, startY: selectInfo.horTopLine.startY,
                endX: selectInfo.horTopLine.endX, endY: selectInfo.horTopLine.endY };
            this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
            this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
        }
    };
    ImageEditor.prototype.setDragWidth = function (width) {
        var tempWidth = width;
        if (tempWidth >= 0) {
            for (var i = 0; i < tempWidth; i++) {
                width = tempWidth - i;
                this.activeObj.activePoint.startX += width;
                this.activeObj.activePoint.endX += width;
                if (this.activeObj.activePoint.startX >= this.destLeft &&
                    this.activeObj.activePoint.endX <= this.destLeft + this.destWidth) {
                    break;
                }
                else {
                    this.activeObj.activePoint.startX -= width;
                    this.activeObj.activePoint.endX -= width;
                }
            }
        }
        else {
            for (var i = 1; i < Math.abs(tempWidth); i++) {
                width = tempWidth + i;
                this.activeObj.activePoint.startX += width;
                this.activeObj.activePoint.endX += width;
                if (this.activeObj.activePoint.startX >= this.destLeft &&
                    this.activeObj.activePoint.endX <= this.destLeft + this.destWidth) {
                    break;
                }
                else {
                    this.activeObj.activePoint.startX -= width;
                    this.activeObj.activePoint.endX -= width;
                }
            }
        }
    };
    ImageEditor.prototype.setDragHeight = function (height) {
        var tempHeight = height;
        if (tempHeight >= 0) {
            for (var i = 1; i < tempHeight; i++) {
                height = tempHeight - i;
                this.activeObj.activePoint.startY += height;
                this.activeObj.activePoint.endY += height;
                if (this.activeObj.activePoint.startY >= this.destTop &&
                    this.activeObj.activePoint.endY <= this.destTop + this.destHeight) {
                    break;
                }
                else {
                    this.activeObj.activePoint.startY -= height;
                    this.activeObj.activePoint.endY -= height;
                }
            }
        }
        else {
            for (var i = 0; i < Math.abs(tempHeight); i++) {
                height = tempHeight + i;
                this.activeObj.activePoint.startY += height;
                this.activeObj.activePoint.endY += height;
                if (this.activeObj.activePoint.startY >= this.destTop &&
                    this.activeObj.activePoint.endY <= this.destTop + this.destHeight) {
                    break;
                }
                else {
                    this.activeObj.activePoint.startY -= height;
                    this.activeObj.activePoint.endY -= height;
                }
            }
        }
    };
    ImageEditor.prototype.triggerShapeChange = function (shapeResizingArgs, shapeMovingArgs, type) {
        this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
        this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
        var currentShapeSettings = this.updatePreviousShapeSettings();
        shapeResizingArgs.currentShapeSettings = currentShapeSettings;
        shapeMovingArgs.currentShapeSettings = currentShapeSettings;
        if (type === 'resize') {
            this.trigger('shapeChanging', shapeResizingArgs);
            this.updateShapeChangeEventArgs(shapeResizingArgs.currentShapeSettings);
        }
        else {
            this.trigger('shapeChanging', shapeMovingArgs);
            this.updateShapeChangeEventArgs(shapeMovingArgs.currentShapeSettings);
        }
    };
    ImageEditor.prototype.updateActivePoint = function (x, y, isCropSelection) {
        var maxDimension = this.calcMaxDimension(this.activeObj.activePoint.width, this.activeObj.activePoint.height);
        var previousShapeSettings = this.updatePreviousShapeSettings();
        var shapeResizingArgs = { action: 'resize', previousShapeSettings: previousShapeSettings };
        var shapeMovingArgs = { action: 'move', previousShapeSettings: previousShapeSettings };
        if (this.activeObj.shape === 'text' && this.dragElement !== '') {
            this.updateFontRatio(this.activeObj);
        }
        switch (this.dragElement.toLowerCase()) {
            case 'nw-resize':
                this.updateNWPoints(x, y, maxDimension);
                this.triggerShapeChange(shapeResizingArgs, shapeMovingArgs, 'resize');
                break;
            case 'n-resize':
                this.updateNPoints(x, y);
                this.triggerShapeChange(shapeResizingArgs, shapeMovingArgs, 'resize');
                break;
            case 'ne-resize':
                this.updateNEPoints(x, y, maxDimension);
                this.triggerShapeChange(shapeResizingArgs, shapeMovingArgs, 'resize');
                break;
            case 'w-resize':
                this.updateWPoints(x, y);
                this.triggerShapeChange(shapeResizingArgs, shapeMovingArgs, 'resize');
                break;
            case 'e-resize':
                this.updateEPoints(x, y);
                this.triggerShapeChange(shapeResizingArgs, shapeMovingArgs, 'resize');
                break;
            case 'sw-resize':
                this.updateSWPoints(x, y, maxDimension);
                this.triggerShapeChange(shapeResizingArgs, shapeMovingArgs, 'resize');
                break;
            case 's-resize':
                this.updateSPoints(x, y);
                this.triggerShapeChange(shapeResizingArgs, shapeMovingArgs, 'resize');
                break;
            case 'se-resize':
                this.updateSEPoints(x, y, maxDimension);
                this.triggerShapeChange(shapeResizingArgs, shapeMovingArgs, 'resize');
                break;
            default:
                if (!isCropSelection && !this.currObjType.isCustomCrop) {
                    if (this.dragPoint.startX) {
                        var width = (this.dragPoint.endX - this.previousPoint.x);
                        var height = (this.dragPoint.endY - this.previousPoint.y);
                        this.activeObj.activePoint.startX += width;
                        this.activeObj.activePoint.endX += width;
                        this.activeObj.activePoint.startY += height;
                        this.activeObj.activePoint.endY += height;
                        if (!this.isPreventDragging && (this.activeObj.activePoint.startX < this.destLeft ||
                            this.activeObj.activePoint.startY < this.destTop || this.activeObj.activePoint.endX >
                            this.destLeft + this.destWidth || this.activeObj.activePoint.endY > this.destTop + this.destHeight)) {
                            this.activeObj.activePoint.startX -= width;
                            this.activeObj.activePoint.endX -= width;
                            this.activeObj.activePoint.startY -= height;
                            this.activeObj.activePoint.endY -= height;
                            this.setDragWidth(width);
                            this.setDragHeight(height);
                        }
                    }
                    else {
                        this.activeObj.activePoint.startX = x < this.mouseDownPoint.x ? x : this.mouseDownPoint.x;
                        this.activeObj.activePoint.startY = y < this.mouseDownPoint.y ? y : this.mouseDownPoint.y;
                        x = x < this.mouseDownPoint.x ? this.mouseDownPoint.x : x;
                        y = y < this.mouseDownPoint.y ? this.mouseDownPoint.y : y;
                        this.activeObj.activePoint.endX = x;
                        this.activeObj.activePoint.endY = y;
                    }
                    this.triggerShapeChange(shapeResizingArgs, shapeMovingArgs, 'move');
                }
                break;
        }
    };
    ImageEditor.prototype.preventDraggingInvertly = function () {
        if (!this.isPreventDragging) {
            if (this.activeObj.activePoint.startX < this.destLeft) {
                this.activeObj.activePoint.startX = this.destLeft;
            }
            if (this.activeObj.activePoint.startY < this.destTop) {
                this.activeObj.activePoint.startY = this.destTop;
            }
            if (this.activeObj.activePoint.endX > this.destLeft + this.destWidth) {
                this.activeObj.activePoint.endX = this.destLeft + this.destWidth;
            }
            if (this.activeObj.activePoint.endY > this.destTop + this.destHeight) {
                this.activeObj.activePoint.endY = this.destTop + this.destHeight;
            }
        }
    };
    ImageEditor.prototype.updateNWPoints = function (x, y, maxDimension) {
        var diff;
        var width;
        var height;
        var scale;
        var percentage;
        var prevDiffX = this.diffPoint.x;
        var prevDiffY = this.diffPoint.y;
        var tempActiveObj = extend({}, this.activeObj, null, true);
        if (this.activeObj.shape === 'text') {
            if (this.oldPoint.x === undefined && this.oldPoint.y === undefined) {
                this.diffPoint.x = this.activeObj.activePoint.startX - x;
                this.diffPoint.y = this.activeObj.activePoint.startY - y;
            }
            else {
                this.diffPoint.x = this.oldPoint.x - x;
                this.diffPoint.y = this.oldPoint.y - y;
            }
            this.oldPoint.x = x;
            this.oldPoint.y = y;
            if (this.diffPoint.x <= prevDiffX && this.diffPoint.y >= prevDiffY) {
                diff = Math.min(this.diffPoint.x, this.diffPoint.y);
            }
            else {
                diff = Math.max(this.diffPoint.x, this.diffPoint.y);
            }
            percentage = (diff / 10);
            this.activeObj.activePoint.startX -= (maxDimension.width / 100) * percentage;
            this.activeObj.activePoint.startY -= (maxDimension.height / 100) * percentage;
            this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
            this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
            this.updateFontSize(this.activeObj);
        }
        else {
            var splitWords = void 0;
            if (this.activeObj.shape !== undefined) {
                splitWords = this.activeObj.shape.split('-');
            }
            if (this.activeObj.shape === 'crop-custom' || (this.activeObj.shape !== undefined && splitWords[0] !== 'crop')) {
                this.activeObj.activePoint.startX = x;
                this.activeObj.activePoint.startY = y;
                if (this.activeObj.activePoint.startX > this.activeObj.activePoint.endX) {
                    var temp = this.activeObj.activePoint.startX;
                    this.activeObj.activePoint.startX = this.activeObj.activePoint.endX;
                    this.activeObj.activePoint.endX = temp;
                    this.dragElement = 'ne-resize';
                }
                if (this.activeObj.activePoint.startY > this.activeObj.activePoint.endY) {
                    var temp = this.activeObj.activePoint.startY;
                    this.activeObj.activePoint.startY = this.activeObj.activePoint.endY;
                    this.activeObj.activePoint.endY = temp;
                    this.dragElement = 'sw-resize';
                }
                this.preventDraggingInvertly();
            }
            else {
                if (this.activeObj.activePoint.startX < x && this.activeObj.activePoint.startY < y) {
                    width = x - this.activeObj.activePoint.startX;
                    height = y - this.activeObj.activePoint.startY;
                    scale = Math.min(width, height);
                    var newScale = this.getScaleRatio(scale);
                    this.activeObj.activePoint.startX += newScale.x;
                    this.activeObj.activePoint.startY += newScale.y;
                    var left = this.destLeft > 0 ? this.destLeft : 0;
                    var top_2 = this.destTop > 0 ? this.destTop : 0;
                    if (this.activeObj.activePoint.startX < left || this.activeObj.activePoint.startY < top_2) {
                        this.activeObj.activePoint.startX -= newScale.x;
                        this.activeObj.activePoint.startY -= newScale.y;
                    }
                }
                else {
                    width = this.activeObj.activePoint.startX - x;
                    height = y - this.activeObj.activePoint.endY;
                    scale = Math.max(width, height);
                    var newScale = this.getScaleRatio(scale);
                    this.activeObj.activePoint.startX -= newScale.x;
                    this.activeObj.activePoint.startY -= newScale.y;
                    var left = this.destLeft > 0 ? this.destLeft : 0;
                    var top_3 = this.destTop > 0 ? this.destTop : 0;
                    if (this.activeObj.activePoint.startX < left || this.activeObj.activePoint.startY < top_3) {
                        this.activeObj.activePoint.startX += newScale.x;
                        this.activeObj.activePoint.startY += newScale.y;
                    }
                }
            }
            this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
            this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
            this.preventInverseResize(tempActiveObj);
        }
    };
    ImageEditor.prototype.updateNPoints = function (x, y) {
        var width;
        var height;
        var scale;
        if (this.activeObj.shape !== 'text') {
            var splitWords = void 0;
            if (this.activeObj.shape !== undefined) {
                splitWords = this.activeObj.shape.split('-');
            }
            if (this.activeObj.shape === 'crop-custom' || (this.activeObj.shape !== undefined && splitWords[0] !== 'crop')) {
                this.activeObj.activePoint.startY = y;
                this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
                if (this.activeObj.activePoint.startY > this.activeObj.activePoint.endY) {
                    var temp = this.activeObj.activePoint.startY;
                    this.activeObj.activePoint.startY = this.activeObj.activePoint.endY;
                    this.activeObj.activePoint.endY = temp;
                    this.dragElement = 's-resize';
                }
                this.preventDraggingInvertly();
            }
            else {
                if (this.activeObj.activePoint.endX > x && this.activeObj.activePoint.startY < y) {
                    width = this.activeObj.activePoint.endX - x;
                    height = y - this.activeObj.activePoint.startY;
                    scale = Math.min(width, height);
                    var newScale = this.getScaleRatio(scale);
                    this.activeObj.activePoint.endX -= newScale.x;
                    this.activeObj.activePoint.startY += newScale.y;
                    if (this.activeObj.activePoint.endX > (this.destLeft + this.destWidth) ||
                        this.activeObj.activePoint.startY < this.destTop) {
                        this.activeObj.activePoint.endX += newScale.x;
                        this.activeObj.activePoint.startY -= newScale.y;
                    }
                }
                else {
                    width = x - this.activeObj.activePoint.endX;
                    height = this.activeObj.activePoint.startY - y;
                    scale = Math.max(width, height);
                    var newScale = this.getScaleRatio(scale);
                    this.activeObj.activePoint.endX += newScale.x;
                    this.activeObj.activePoint.startY -= newScale.y;
                    if (this.activeObj.activePoint.endX > (this.destLeft + this.destWidth) ||
                        this.activeObj.activePoint.startY < this.destTop) {
                        this.activeObj.activePoint.endX -= newScale.x;
                        this.activeObj.activePoint.startY += newScale.y;
                    }
                }
                this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
                this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
            }
        }
    };
    ImageEditor.prototype.updateNEPoints = function (x, y, maxDimension) {
        var diff;
        var width;
        var height;
        var scale;
        var percentage;
        var prevDiffX = this.diffPoint.x;
        var prevDiffY = this.diffPoint.y;
        var tempActiveObj = extend({}, this.activeObj, null, true);
        if (this.activeObj.shape === 'text') {
            if (this.oldPoint.x === undefined && this.oldPoint.y === undefined) {
                this.diffPoint.x = x - this.activeObj.activePoint.endX;
                this.diffPoint.y = this.activeObj.activePoint.startY - y;
            }
            else {
                this.diffPoint.x = x - this.oldPoint.x;
                this.diffPoint.y = this.oldPoint.y - y;
            }
            this.oldPoint.x = x;
            this.oldPoint.y = y;
            if (this.diffPoint.x <= prevDiffX && this.diffPoint.y >= prevDiffY) {
                diff = Math.min(this.diffPoint.x, this.diffPoint.y);
            }
            else {
                diff = Math.max(this.diffPoint.x, this.diffPoint.y);
            }
            percentage = (diff / 10);
            this.activeObj.activePoint.endX += (maxDimension.width / 100) * percentage;
            this.activeObj.activePoint.startY -= (maxDimension.height / 100) * percentage;
            this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
            this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
            this.updateFontSize(this.activeObj);
        }
        else {
            var splitWords = void 0;
            if (this.activeObj.shape !== undefined) {
                splitWords = this.activeObj.shape.split('-');
            }
            if (this.currObjType.isCustomCrop || (this.activeObj.shape !== undefined && splitWords[0] !== 'crop')) {
                this.activeObj.activePoint.endX = x;
                this.activeObj.activePoint.startY = y;
                if (this.activeObj.activePoint.endX < this.activeObj.activePoint.startX) {
                    var temp = this.activeObj.activePoint.endX;
                    this.activeObj.activePoint.endX = this.activeObj.activePoint.startX;
                    this.activeObj.activePoint.startX = temp;
                    this.dragElement = 'nw-resize';
                }
                if (this.activeObj.activePoint.startY > this.activeObj.activePoint.endY) {
                    var temp = this.activeObj.activePoint.startY;
                    this.activeObj.activePoint.startY = this.activeObj.activePoint.endY;
                    this.activeObj.activePoint.endY = temp;
                    this.dragElement = 'se-resize';
                }
                this.preventDraggingInvertly();
            }
            else {
                if (this.activeObj.activePoint.endX > x && this.activeObj.activePoint.startY < y) {
                    width = this.activeObj.activePoint.endX - x;
                    height = y - this.activeObj.activePoint.startY;
                    scale = Math.min(width, height);
                    var newScale = this.getScaleRatio(scale);
                    this.activeObj.activePoint.endX -= newScale.x;
                    this.activeObj.activePoint.startY += newScale.y;
                    var endX = this.destLeft + this.destWidth < this.lowerCanvas.width ?
                        this.destLeft + this.destWidth : this.lowerCanvas.width;
                    var endY = this.destTop > 0 ? this.destTop : 0;
                    if (this.activeObj.activePoint.endX > endX || this.activeObj.activePoint.startY < endY) {
                        this.activeObj.activePoint.endX += newScale.x;
                        this.activeObj.activePoint.startY -= newScale.y;
                    }
                }
                else {
                    width = x - this.activeObj.activePoint.endX;
                    height = this.activeObj.activePoint.startY - y;
                    scale = Math.max(width, height);
                    var newScale = this.getScaleRatio(scale);
                    this.activeObj.activePoint.endX += newScale.x;
                    this.activeObj.activePoint.startY -= newScale.y;
                    var endX = this.destLeft + this.destWidth < this.lowerCanvas.width ?
                        this.destLeft + this.destWidth : this.lowerCanvas.width;
                    var endY = this.destTop > 0 ? this.destTop : 0;
                    if (this.activeObj.activePoint.endX > endX || this.activeObj.activePoint.startY < endY) {
                        this.activeObj.activePoint.endX -= newScale.x;
                        this.activeObj.activePoint.startY += newScale.y;
                    }
                }
            }
            this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
            this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
            this.preventInverseResize(tempActiveObj);
        }
    };
    ImageEditor.prototype.updateWPoints = function (x, y) {
        var width;
        var height;
        var scale;
        if (this.activeObj.shape !== 'text') {
            var splitWords = void 0;
            if (this.activeObj.shape !== undefined) {
                splitWords = this.activeObj.shape.split('-');
            }
            if (this.activeObj.shape === 'crop-custom' || (this.activeObj.shape !== undefined && splitWords[0] !== 'crop')) {
                this.activeObj.activePoint.startX = x;
                this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
                if (this.activeObj.activePoint.startX > this.activeObj.activePoint.endX) {
                    var temp = this.activeObj.activePoint.startX;
                    this.activeObj.activePoint.startX = this.activeObj.activePoint.endX;
                    this.activeObj.activePoint.endX = temp;
                    this.dragElement = 'e-resize';
                }
                this.preventDraggingInvertly();
            }
            else {
                if (this.activeObj.activePoint.startX < x && this.activeObj.activePoint.endY > y) {
                    width = x - this.activeObj.activePoint.startX;
                    height = this.activeObj.activePoint.endY - y;
                    scale = Math.min(width, height);
                    var newScale = this.getScaleRatio(scale);
                    this.activeObj.activePoint.startX += newScale.x;
                    this.activeObj.activePoint.endY -= newScale.y;
                    if (this.activeObj.activePoint.startX < this.destLeft || this.activeObj.activePoint.endY >
                        (this.destTop + this.destHeight)) {
                        this.activeObj.activePoint.startX -= newScale.x;
                        this.activeObj.activePoint.endY += newScale.y;
                    }
                }
                else {
                    width = this.activeObj.activePoint.startX - x;
                    height = y - this.activeObj.activePoint.endY;
                    scale = Math.max(width, height);
                    var newScale = this.getScaleRatio(scale);
                    this.activeObj.activePoint.startX -= newScale.x;
                    this.activeObj.activePoint.endY += newScale.y;
                    if (this.activeObj.activePoint.startX < this.destLeft || this.activeObj.activePoint.endY >
                        (this.destTop + this.destHeight)) {
                        this.activeObj.activePoint.startX += newScale.x;
                        this.activeObj.activePoint.endY -= newScale.y;
                    }
                }
                this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
                this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
            }
        }
    };
    ImageEditor.prototype.updateEPoints = function (x, y) {
        var width;
        var height;
        var scale;
        if (this.activeObj.shape !== 'text') {
            var splitWords = void 0;
            if (this.activeObj.shape !== undefined) {
                splitWords = this.activeObj.shape.split('-');
            }
            if (this.activeObj.shape === 'crop-custom' || (this.activeObj.shape !== undefined && splitWords[0] !== 'crop')) {
                this.activeObj.activePoint.endX = x;
                this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
                if (this.activeObj.activePoint.endX < this.activeObj.activePoint.startX) {
                    var temp = this.activeObj.activePoint.endX;
                    this.activeObj.activePoint.endX = this.activeObj.activePoint.startX;
                    this.activeObj.activePoint.startX = temp;
                    this.dragElement = 'w-resize';
                }
                this.preventDraggingInvertly();
            }
            else {
                if (this.activeObj.activePoint.endX > x && this.activeObj.activePoint.endY > y) {
                    width = this.activeObj.activePoint.endX - x;
                    height = this.activeObj.activePoint.endY - y;
                    scale = Math.min(width, height);
                    var newScale = this.getScaleRatio(scale);
                    this.activeObj.activePoint.endX -= newScale.x;
                    this.activeObj.activePoint.endY -= newScale.y;
                    if (this.activeObj.activePoint.endX > (this.destLeft + this.destWidth) ||
                        this.activeObj.activePoint.endY > (this.destTop + this.destHeight)) {
                        this.activeObj.activePoint.endX += newScale.x;
                        this.activeObj.activePoint.endY += newScale.y;
                    }
                }
                else {
                    width = x - this.activeObj.activePoint.endX;
                    height = y - this.activeObj.activePoint.endY;
                    scale = Math.max(width, height);
                    var newScale = this.getScaleRatio(scale);
                    this.activeObj.activePoint.endX += newScale.x;
                    this.activeObj.activePoint.endY += newScale.y;
                    if (this.activeObj.activePoint.endX > (this.destLeft + this.destWidth) || this.activeObj.activePoint.endY >
                        (this.destTop + this.destHeight)) {
                        this.activeObj.activePoint.endX -= newScale.x;
                        this.activeObj.activePoint.endY -= newScale.y;
                    }
                }
                this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
                this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
            }
        }
    };
    ImageEditor.prototype.updateSWPoints = function (x, y, maxDimension) {
        var diff;
        var width;
        var height;
        var scale;
        var percentage;
        var prevDiffX = this.diffPoint.x;
        var prevDiffY = this.diffPoint.y;
        var tempActiveObj = extend({}, this.activeObj, null, true);
        if (this.activeObj.shape === 'text') {
            if (this.oldPoint.x === undefined && this.oldPoint.y === undefined) {
                this.diffPoint.x = this.activeObj.activePoint.startX - x;
                this.diffPoint.y = y - this.activeObj.activePoint.endY;
            }
            else {
                this.diffPoint.x = this.oldPoint.x - x;
                this.diffPoint.y = y - this.oldPoint.y;
            }
            this.oldPoint.x = x;
            this.oldPoint.y = y;
            if (this.diffPoint.x <= prevDiffX && this.diffPoint.y >= prevDiffY) {
                diff = Math.min(this.diffPoint.x, this.diffPoint.y);
            }
            else {
                diff = Math.max(this.diffPoint.x, this.diffPoint.y);
            }
            percentage = (diff / 10);
            this.activeObj.activePoint.startX -= (maxDimension.width / 100) * percentage;
            this.activeObj.activePoint.endY += (maxDimension.height / 100) * percentage;
            this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
            this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
            this.updateFontSize(this.activeObj);
        }
        else {
            var splitWords = void 0;
            if (this.activeObj.shape !== undefined) {
                splitWords = this.activeObj.shape.split('-');
            }
            if (this.activeObj.shape === 'crop-custom' || (this.activeObj.shape !== undefined && splitWords[0] !== 'crop')) {
                this.activeObj.activePoint.startX = x;
                this.activeObj.activePoint.endY = y;
                if (this.activeObj.activePoint.startX > this.activeObj.activePoint.endX) {
                    var temp = this.activeObj.activePoint.startX;
                    this.activeObj.activePoint.startX = this.activeObj.activePoint.endX;
                    this.activeObj.activePoint.endX = temp;
                    this.dragElement = 'se-resize';
                }
                if (this.activeObj.activePoint.endY < this.activeObj.activePoint.startY) {
                    var temp = this.activeObj.activePoint.endY;
                    this.activeObj.activePoint.endY = this.activeObj.activePoint.startY;
                    this.activeObj.activePoint.startY = temp;
                    this.dragElement = 'nw-resize';
                }
                this.preventDraggingInvertly();
            }
            else {
                if (this.activeObj.activePoint.startX < x && this.activeObj.activePoint.endY > y) {
                    width = x - this.activeObj.activePoint.startX;
                    height = this.activeObj.activePoint.endY - y;
                    scale = Math.min(width, height);
                    var newScale = this.getScaleRatio(scale);
                    this.activeObj.activePoint.startX += newScale.x;
                    this.activeObj.activePoint.endY -= newScale.y;
                    var endX = this.destLeft > 0 ? this.destLeft : 0;
                    var endY = this.destTop + this.destHeight < this.lowerCanvas.height ? this.destTop +
                        this.destHeight : this.lowerCanvas.height;
                    if (this.activeObj.activePoint.startX < endX || this.activeObj.activePoint.endY > endY) {
                        this.activeObj.activePoint.startX -= newScale.x;
                        this.activeObj.activePoint.endY += newScale.y;
                    }
                }
                else {
                    width = this.activeObj.activePoint.startX - x;
                    height = y - this.activeObj.activePoint.endY;
                    scale = Math.max(width, height);
                    var newScale = this.getScaleRatio(scale);
                    this.activeObj.activePoint.startX -= newScale.x;
                    this.activeObj.activePoint.endY += newScale.y;
                    var endX = this.destLeft > 0 ? this.destLeft : 0;
                    var endY = this.destTop + this.destHeight < this.lowerCanvas.height ? this.destTop +
                        this.destHeight : this.lowerCanvas.height;
                    if (this.activeObj.activePoint.startX < endX || this.activeObj.activePoint.endY > endY) {
                        this.activeObj.activePoint.startX += newScale.x;
                        this.activeObj.activePoint.endY -= newScale.y;
                    }
                }
            }
            this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
            this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
            this.preventInverseResize(tempActiveObj);
        }
    };
    ImageEditor.prototype.updateSPoints = function (x, y) {
        var width;
        var height;
        var scale;
        if (this.activeObj.shape !== 'text') {
            var splitWords = void 0;
            if (this.activeObj.shape !== undefined) {
                splitWords = this.activeObj.shape.split('-');
            }
            if (this.activeObj.shape === 'crop-custom' || (this.activeObj.shape !== undefined && splitWords[0] !== 'crop')) {
                this.activeObj.activePoint.endY = y;
                this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
                if (this.activeObj.activePoint.endY < this.activeObj.activePoint.startY) {
                    var temp = this.activeObj.activePoint.endY;
                    this.activeObj.activePoint.endY = this.activeObj.activePoint.startY;
                    this.activeObj.activePoint.startY = temp;
                    this.dragElement = 'n-resize';
                }
                this.preventDraggingInvertly();
            }
            else {
                if (this.activeObj.activePoint.endX > x && this.activeObj.activePoint.endY > y) {
                    width = this.activeObj.activePoint.endX - x;
                    height = this.activeObj.activePoint.endY - y;
                    scale = Math.min(width, height);
                    var newScale = this.getScaleRatio(scale);
                    this.activeObj.activePoint.endX -= newScale.x;
                    this.activeObj.activePoint.endY -= newScale.y;
                    if (this.activeObj.activePoint.endX > (this.destLeft + this.destWidth) ||
                        this.activeObj.activePoint.endY > (this.destTop + this.destHeight)) {
                        this.activeObj.activePoint.endX += newScale.x;
                        this.activeObj.activePoint.endY += newScale.y;
                    }
                }
                else {
                    width = x - this.activeObj.activePoint.endX;
                    height = y - this.activeObj.activePoint.endY;
                    scale = Math.max(width, height);
                    var newScale = this.getScaleRatio(scale);
                    this.activeObj.activePoint.endX += newScale.x;
                    this.activeObj.activePoint.endY += newScale.x;
                    if (this.activeObj.activePoint.endX > (this.destLeft + this.destWidth) ||
                        this.activeObj.activePoint.endY > (this.destTop + this.destHeight)) {
                        this.activeObj.activePoint.endX -= newScale.x;
                        this.activeObj.activePoint.endY -= newScale.y;
                    }
                }
                this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
                this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
            }
        }
    };
    ImageEditor.prototype.updateSEPoints = function (x, y, maxDimension) {
        var diff;
        var width;
        var height;
        var scale;
        var percentage;
        var prevDiffX = this.diffPoint.x;
        var prevDiffY = this.diffPoint.y;
        var tempActiveObj = extend({}, this.activeObj, null, true);
        if (this.activeObj.shape === 'text') {
            if (this.oldPoint.x === undefined && this.oldPoint.y === undefined) {
                this.diffPoint.x = x - this.activeObj.activePoint.endX;
                this.diffPoint.y = y - this.activeObj.activePoint.endY;
            }
            else {
                this.diffPoint.x = x - this.oldPoint.x;
                this.diffPoint.y = y - this.oldPoint.y;
            }
            this.oldPoint.x = x;
            this.oldPoint.y = y;
            if (this.diffPoint.x >= prevDiffX && this.diffPoint.y >= prevDiffY) {
                diff = Math.max(this.diffPoint.x, this.diffPoint.y);
            }
            else {
                diff = Math.min(this.diffPoint.x, this.diffPoint.y);
            }
            percentage = (diff / 10);
            this.activeObj.activePoint.endX += (maxDimension.width / 50) * percentage;
            this.activeObj.activePoint.endY += (maxDimension.height / 50) * percentage;
            this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
            this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
            this.updateFontSize(this.activeObj);
        }
        else {
            var splitWords = void 0;
            if (this.activeObj.shape !== undefined) {
                splitWords = this.activeObj.shape.split('-');
            }
            if (this.activeObj.shape === 'crop-custom' || (this.activeObj.shape !== undefined && splitWords[0] !== 'crop')) {
                this.activeObj.activePoint.endX = x;
                this.activeObj.activePoint.endY = y;
                if (this.activeObj.activePoint.endX < this.activeObj.activePoint.startX) {
                    var temp = this.activeObj.activePoint.endX;
                    this.activeObj.activePoint.endX = this.activeObj.activePoint.startX;
                    this.activeObj.activePoint.startX = temp;
                    this.dragElement = 'sw-resize';
                }
                if (this.activeObj.activePoint.endY < this.activeObj.activePoint.startY) {
                    var temp = this.activeObj.activePoint.endY;
                    this.activeObj.activePoint.endY = this.activeObj.activePoint.startY;
                    this.activeObj.activePoint.startY = temp;
                    this.dragElement = 'ne-resize';
                }
                this.preventDraggingInvertly();
            }
            else {
                if (this.activeObj.activePoint.endX > x && this.activeObj.activePoint.endY > y) {
                    width = this.activeObj.activePoint.endX - x;
                    height = this.activeObj.activePoint.endY - y;
                    scale = Math.min(width, height);
                    var newScale = this.getScaleRatio(scale);
                    this.activeObj.activePoint.endX -= newScale.x;
                    this.activeObj.activePoint.endY -= newScale.y;
                    var endX = this.destLeft + this.destWidth < this.lowerCanvas.width ?
                        this.destLeft + this.destWidth : this.lowerCanvas.width;
                    var endY = this.destTop + this.destHeight < this.lowerCanvas.height ?
                        this.destTop + this.destHeight : this.lowerCanvas.height;
                    if (this.activeObj.activePoint.endX > endX || this.activeObj.activePoint.endY > endY) {
                        this.activeObj.activePoint.endX += newScale.x;
                        this.activeObj.activePoint.endY += newScale.y;
                    }
                }
                else {
                    width = x - this.activeObj.activePoint.endX;
                    height = y - this.activeObj.activePoint.endY;
                    scale = Math.max(width, height);
                    var newScale = this.getScaleRatio(scale);
                    this.activeObj.activePoint.endX += newScale.x;
                    this.activeObj.activePoint.endY += newScale.y;
                    var endX = this.destLeft + this.destWidth < this.lowerCanvas.width ? this.destLeft +
                        this.destWidth : this.lowerCanvas.width;
                    var endY = this.destTop + this.destHeight < this.lowerCanvas.height ? this.destTop +
                        this.destHeight : this.lowerCanvas.height;
                    if (this.activeObj.activePoint.endX > endX || this.activeObj.activePoint.endY > endY) {
                        this.activeObj.activePoint.endX -= newScale.x;
                        this.activeObj.activePoint.endY -= newScale.y;
                    }
                }
            }
            this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
            this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
            this.preventInverseResize(tempActiveObj);
        }
    };
    ImageEditor.prototype.updateFontRatio = function (obj, isTextArea) {
        var degree;
        if (obj.shapeDegree === 0) {
            degree = this.degree;
        }
        else {
            degree = this.degree - obj.shapeDegree;
        }
        if (isNullOrUndefined(isTextArea)) {
            if (degree === 0 || degree === 180) {
                obj.textSettings.fontRatio = obj.activePoint.width / obj.textSettings.fontSize;
            }
            else {
                obj.textSettings.fontRatio = obj.activePoint.height / obj.textSettings.fontSize;
            }
        }
        else if (isTextArea) {
            if (degree === 0 || degree === 180) {
                obj.textSettings.fontRatio = this.textArea.clientWidth / parseFloat(this.textArea.style.fontSize);
            }
            else {
                obj.textSettings.fontRatio = this.textArea.clientHeight / parseFloat(this.textArea.style.fontSize);
            }
        }
    };
    ImageEditor.prototype.updateFontSize = function (obj) {
        var degree;
        if (obj.shapeDegree === 0) {
            degree = this.degree;
        }
        else {
            degree = this.degree - obj.shapeDegree;
        }
        if (degree === 0 || degree === 180) {
            obj.textSettings.fontSize = (obj.activePoint.width / obj.textSettings.fontRatio);
        }
        else {
            obj.textSettings.fontSize = (obj.activePoint.height / obj.textSettings.fontRatio);
        }
    };
    ImageEditor.prototype.preventInverseResize = function (tempActiveObj) {
        if (this.activeObj.activePoint.width < 0) {
            this.activeObj.activePoint.width = 0;
            this.activeObj.activePoint.startX = tempActiveObj.activePoint.startX;
            this.activeObj.activePoint.endX = tempActiveObj.activePoint.endX;
        }
        if (this.activeObj.activePoint.height < 0) {
            this.activeObj.activePoint.height = 0;
            this.activeObj.activePoint.startY = tempActiveObj.activePoint.startY;
            this.activeObj.activePoint.endY = tempActiveObj.activePoint.endY;
        }
    };
    ImageEditor.prototype.getScaleRatio = function (scale) {
        var point = { x: scale, y: scale };
        if (this.activeObj.shape !== 'crop-custom' && this.activeObj.shape !== 'crop-circle' && this.activeObj.shape !== 'crop-square') {
            var ratio = this.activeObj.shape.split('-');
            ratio = ratio[1].split(':');
            var newScale = scale / (parseInt(ratio[1], 10));
            point.x = newScale * (parseInt(ratio[0], 10));
            point.y = newScale * (parseInt(ratio[1], 10));
        }
        return point;
    };
    ImageEditor.prototype.getMaxText = function (isTextBox, text) {
        if (isNullOrUndefined(text)) {
            text = isTextBox ? this.textArea.value : this.activeObj.keyHistory;
        }
        var maxi;
        var rows = text.split('\n');
        var maxStr = rows[0].length;
        var maxText = rows[0];
        for (var i = 1; i < rows.length; i++) {
            maxi = rows[i].length;
            if (maxi > maxStr) {
                maxText = rows[i];
                maxStr = maxi;
            }
        }
        return maxText;
    };
    ImageEditor.prototype.setDragLimit = function () {
        if (this.activeObj.activePoint) {
            if (this.activeObj.activePoint.startX < this.destLeft) {
                this.activeObj.activePoint.startX = this.destLeft;
                this.activeObj.activePoint.endX = this.activeObj.activePoint.startX + this.activeObj.activePoint.width;
            }
            else if (this.activeObj.activePoint.endX > this.destLeft + this.destWidth) {
                this.activeObj.activePoint.endX = this.destLeft + this.destWidth;
                this.activeObj.activePoint.startX = this.activeObj.activePoint.endX - this.activeObj.activePoint.width;
            }
            if (this.activeObj.activePoint.startY < this.destTop) {
                this.activeObj.activePoint.startY = this.destTop;
            }
            else if (this.activeObj.activePoint.endY > this.destTop + this.destHeight) {
                this.activeObj.activePoint.endY = this.destTop + this.destHeight;
                this.activeObj.activePoint.startY = this.activeObj.activePoint.endY - this.activeObj.activePoint.height;
            }
            this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
            this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
        }
    };
    ImageEditor.prototype.lineDraw = function () {
        if (this.activeObj.activePoint.height < 10) {
            this.activeObj.activePoint.startY -= 10;
            this.activeObj.activePoint.endY += 10;
            this.activeObj.lineDraw = 'horizontal';
        }
        else if (this.activeObj.activePoint.width < 10) {
            this.activeObj.activePoint.startX -= 10;
            this.activeObj.activePoint.endX += 10;
            this.activeObj.lineDraw = 'vertical';
        }
        else if (this.currObjType.isInitialLine) {
            this.activeObj.lineDraw = 'normal';
            this.currObjType.isInitialLine = false;
        }
        this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
        this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
    };
    ImageEditor.prototype.shapeCircle = function (canvasDraw, selectionWidth, selectionHeight) {
        canvasDraw.strokeStyle = this.themeColl[this.theme]['primaryColor'];
        canvasDraw.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
        canvasDraw.fillStyle = 'rgb(0, 0, 0, 0.5)';
        canvasDraw.fillRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
        var tempWidth = canvasDraw.lineWidth;
        canvasDraw.lineWidth = (2);
        canvasDraw.beginPath();
        canvasDraw.ellipse(this.activeObj.horTopLine.startX + (selectionWidth / 2), this.activeObj.horTopLine.startY
            + (selectionHeight / 2), selectionWidth / 2, selectionHeight / 2, 0, 0, 2 * Math.PI, false);
        canvasDraw.stroke();
        canvasDraw.closePath();
        canvasDraw.save();
        canvasDraw.beginPath();
        canvasDraw.arc(((this.activeObj.activePoint.endX - this.activeObj.activePoint.startX) / 2) + this.activeObj.activePoint.startX, ((this.activeObj.activePoint.endY - this.activeObj.activePoint.startY) / 2) + this.activeObj.activePoint.startY, (this.activeObj.activePoint.width / 2), 0, Math.PI * 2);
        canvasDraw.closePath();
        canvasDraw.clip();
        canvasDraw.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
        canvasDraw.restore();
        canvasDraw.lineWidth = tempWidth;
        this.drawOuterSelection(canvasDraw, true);
        this.currObjType.shape = '';
    };
    ImageEditor.prototype.drawOuterSelection = function (canvasDraw, isCropCircle) {
        var splitWords;
        canvasDraw.lineWidth = (0.5);
        if (this.activeObj.shape !== undefined) {
            splitWords = this.activeObj.shape.split('-');
        }
        var tempObj = extend({}, this.activeObj, {}, true);
        if (this.activeObj.shape !== undefined) {
            splitWords = this.activeObj.shape.split('-');
        }
        if (((splitWords !== undefined && splitWords[0] === 'crop') || this.activeObj.shape === undefined) && !isCropCircle) {
            this.upperContext.fillStyle = 'rgb(0, 0, 0, 0.5)';
            this.upperContext.fillRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
            this.upperContext.clearRect(this.activeObj.activePoint.startX, this.activeObj.activePoint.startY, this.activeObj.activePoint.width, this.activeObj.activePoint.height);
        }
        canvasDraw.strokeStyle = this.themeColl[this.theme]['primaryColor'];
        canvasDraw.fillStyle = this.themeColl[this.theme]['secondaryColor'];
        if (this.activeObj.shape !== 'rectangle') {
            canvasDraw.beginPath();
            canvasDraw.rect(tempObj.activePoint.startX, tempObj.activePoint.startY, tempObj.activePoint.width, tempObj.activePoint.height);
            canvasDraw.stroke();
            canvasDraw.closePath();
        }
        canvasDraw.lineWidth *= 2;
        canvasDraw.beginPath();
        canvasDraw.moveTo(tempObj.topLeftCircle.startX, tempObj.topLeftCircle.startY);
        canvasDraw.arc(tempObj.topLeftCircle.startX, tempObj.topLeftCircle.startY, tempObj.topLeftCircle.radius, 0, 2 * Math.PI);
        canvasDraw.moveTo(tempObj.topRightCircle.startX, tempObj.topRightCircle.startY);
        canvasDraw.arc(tempObj.topRightCircle.startX, tempObj.topRightCircle.startY, tempObj.topRightCircle.radius, 0, 2 * Math.PI);
        canvasDraw.moveTo(tempObj.bottomLeftCircle.startX, tempObj.bottomLeftCircle.startY);
        canvasDraw.arc(tempObj.bottomLeftCircle.startX, tempObj.bottomLeftCircle.startY, tempObj.bottomLeftCircle.radius, 0, 2 * Math.PI);
        canvasDraw.moveTo(tempObj.bottomRightCircle.startX, tempObj.bottomRightCircle.startY);
        canvasDraw.arc(tempObj.bottomRightCircle.startX, tempObj.bottomRightCircle.startY, tempObj.bottomRightCircle.radius, 0, 2 * Math.PI);
        canvasDraw.stroke();
        canvasDraw.fill();
        canvasDraw.closePath();
        canvasDraw.lineWidth /= 2;
        if ((splitWords === undefined || splitWords[0] !== 'crop') && this.activeObj.shape !== 'text') {
            this.drawCenterCircles(canvasDraw);
        }
        this.activeObj = extend({}, tempObj, {}, true);
    };
    ImageEditor.prototype.drawObject = function (canvas, obj, isCropRatio, points, isPreventDrag, saveContext) {
        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
        var canvasDraw;
        if (canvas.toLowerCase() === 'original') {
            canvasDraw = this.lowerContext;
        }
        else if (canvas.toLowerCase() === 'duplicate') {
            canvasDraw = this.upperContext;
        }
        else if (!isNullOrUndefined(saveContext)) {
            canvasDraw = saveContext;
        }
        if (!isPreventDrag && !isNullOrUndefined(this.activeObj.shape)) {
            this.setDragLimit();
        }
        if (this.currObjType.isLine && canvas !== 'original' && !obj) {
            this.lineDraw();
        }
        var splitWords = this.currObjType.shape.split('-');
        if (splitWords[0].toLowerCase() === 'crop' && isCropRatio) {
            this.drawCropRatio();
        }
        if (points) {
            this.activeObj.activePoint.startX = points.startX;
            this.activeObj.activePoint.startY = points.startY;
            this.activeObj.activePoint.endX = points.endX;
            this.activeObj.activePoint.endY = points.endY;
            this.activeObj.activePoint.width = points.width;
            this.activeObj.activePoint.height = points.height;
        }
        if (isNullOrUndefined(this.activeObj.strokeSettings)) {
            this.activeObj.strokeSettings = this.strokeSettings;
        }
        if (isNullOrUndefined(this.activeObj.strokeSettings.strokeWidth)) {
            this.activeObj.strokeSettings.strokeWidth = 4;
        }
        if (obj) {
            this.activeObj = extend({}, obj, {}, true);
        }
        this.updateActiveObject();
        if (this.currObjType.isText) {
            this.activeObj.keyHistory = this.keyHistory;
        }
        if (canvas.toLowerCase() !== 'original') {
            var splitWords_2;
            var isCrop = false;
            if (this.activeObj.shape) {
                splitWords_2 = this.activeObj.shape.split('-');
                if (splitWords_2[0] === 'crop') {
                    isCrop = true;
                }
            }
            if (isCrop) {
                this.upperContext.fillStyle = 'rgb(0, 0, 0, 0.5)';
                this.upperContext.fillRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
                this.upperContext.clearRect(this.activeObj.activePoint.startX, this.activeObj.activePoint.startY, this.activeObj.activePoint.width, this.activeObj.activePoint.height);
            }
            if (canvasDraw === this.lowerContext || canvasDraw === this.upperContext) {
                this.drawOuterSelection(canvasDraw);
            }
        }
        this.currObjType.isActiveObj = true;
        if (obj) {
            this.drawShapeObj(canvas, obj.shape, saveContext);
        }
        else if (this.keyHistory !== '' && this.currObjType.isText) {
            this.drawShapeObj(canvas, 'text', saveContext);
        }
        else if (this.activeObj.shape) {
            this.drawShapeObj(canvas, this.activeObj.shape, saveContext);
        }
        else {
            this.drawShapeObj(canvas, undefined, saveContext);
        }
        if (this.isAllowCropPan) {
            this.isAllowCropPan = false;
            this.tempPanMove = extend({}, this.panMove, {}, true);
            this.currentPannedPoint = this.updatePanPoints(this.getCurrentPanRegion());
            this.rotatePan();
        }
    };
    ImageEditor.prototype.rotateShape = function (canvasDraw) {
        canvasDraw.beginPath();
        canvasDraw.moveTo(this.activeObj.horTopLine.startX, this.activeObj.horTopLine.startY);
        canvasDraw.lineTo(this.activeObj.horTopLine.endX, this.activeObj.horTopLine.endY);
        canvasDraw.moveTo(this.activeObj.horBottomLine.startX, this.activeObj.horBottomLine.startY);
        canvasDraw.lineTo(this.activeObj.horBottomLine.endX, this.activeObj.horBottomLine.endY);
        canvasDraw.moveTo(this.activeObj.verLeftLine.startX, this.activeObj.verLeftLine.startY);
        canvasDraw.lineTo(this.activeObj.verLeftLine.endX, this.activeObj.verLeftLine.endY);
        canvasDraw.moveTo(this.activeObj.verRightLine.startX, this.activeObj.verRightLine.startY);
        canvasDraw.lineTo(this.activeObj.verRightLine.endX, this.activeObj.verRightLine.endY);
        canvasDraw.stroke();
    };
    ImageEditor.prototype.updateActiveObject = function (actPoint, obj, isMouseMove, x, y) {
        actPoint = actPoint ? actPoint : extend({}, this.activeObj.activePoint, {}, true);
        obj = obj ? obj : extend({}, this.activeObj, {}, true);
        actPoint.width = actPoint.endX - actPoint.startX;
        actPoint.height = actPoint.endY - actPoint.startY;
        x = x ? x : 0;
        y = y ? y : 0;
        var horCircleWidth = actPoint.width / 2;
        var verCircleHeight = actPoint.height / 2;
        var radius = 7.5;
        obj.horTopLine = { startX: actPoint.startX + x, startY: actPoint.startY - y,
            endX: actPoint.endX + x, endY: actPoint.endY + y };
        obj.horBottomLine = { startX: actPoint.startX - x, startY: actPoint.endY - y,
            endX: actPoint.endX - x, endY: actPoint.endY + y };
        obj.verLeftLine = { startX: actPoint.startX + x, startY: actPoint.startY - y,
            endX: actPoint.startX - y, endY: actPoint.endY - y };
        obj.verRightLine = { startX: actPoint.endX + x, startY: actPoint.startY + y,
            endX: actPoint.endX - x, endY: actPoint.endY + y };
        obj.topLeftCircle = { startX: actPoint.startX, startY: actPoint.startY,
            radius: obj.horTopLine.endX ? (radius) : 0 };
        obj.topCenterCircle = { startX: actPoint.startX + horCircleWidth, startY: actPoint.startY,
            radius: obj.horTopLine.endX ? (radius) : 0 };
        obj.topRightCircle = { startX: actPoint.endX, startY: actPoint.startY,
            radius: obj.horTopLine.endX ? (radius) : 0 };
        obj.centerLeftCircle = { startX: actPoint.startX, startY: actPoint.startY + verCircleHeight,
            radius: obj.horTopLine.endX ? (radius) : 0 };
        obj.centerRightCircle = { startX: actPoint.endX, startY: actPoint.startY + verCircleHeight,
            radius: obj.horTopLine.endX ? (radius) : 0 };
        obj.bottomLeftCircle = { startX: actPoint.startX, startY: actPoint.endY,
            radius: obj.horTopLine.endX ? (radius) : 0 };
        obj.bottomCenterCircle = { startX: actPoint.startX + horCircleWidth, startY: actPoint.endY,
            radius: obj.horTopLine.endX ? (radius) : 0 };
        obj.bottomRightCircle = { startX: actPoint.endX, startY: actPoint.endY,
            radius: obj.horTopLine.endX ? (radius) : 0 };
        obj.activePoint = actPoint;
        if (isNullOrUndefined(isMouseMove)) {
            this.activeObj = extend({}, obj, {}, true);
        }
    };
    ImageEditor.prototype.drawShapeObj = function (canvas, shape, saveContext) {
        var currentShape = shape !== undefined ? shape : this.currObjType.shape;
        this.currObjType.shape = currentShape;
        var canvasDraw;
        if (canvas.toLowerCase() === 'original') {
            canvasDraw = this.lowerContext;
        }
        else if (canvas.toLowerCase() === 'duplicate') {
            canvasDraw = this.upperContext;
        }
        else if (!isNullOrUndefined(saveContext)) {
            canvasDraw = saveContext;
        }
        if (this.currObjType.shape.toLowerCase() === 'rectangle' || this.currObjType.shape.toLowerCase() === 'ellipse'
            || this.currObjType.shape.toLowerCase() === 'line') {
            this.activeObj.shape = this.currObjType.shape;
        }
        canvasDraw.strokeStyle = this.activeObj.strokeSettings.strokeColor;
        if (shape === 'text' || shape === 'freehanddraw') {
            canvasDraw.fillStyle = this.activeObj.strokeSettings.strokeColor;
        }
        else {
            canvasDraw.fillStyle = this.activeObj.strokeSettings.fillColor;
        }
        var horLineWidth = this.activeObj.activePoint.width / 3;
        var verLineHeight = this.activeObj.activePoint.height / 3;
        var selectionWidth = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
        var selectionHeight = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
        switch (this.currObjType.shape.toLowerCase()) {
            case 'rectangle':
                this.drawSquareLines(canvasDraw);
                if (canvasDraw === this.upperContext) {
                    this.drawOuterSelection(canvasDraw);
                }
                break;
            case 'ellipse':
                selectionWidth = Math.abs(selectionWidth);
                selectionHeight = Math.abs(selectionHeight);
                canvasDraw.beginPath();
                canvasDraw.ellipse(this.activeObj.activePoint.startX + (selectionWidth / 2), this.activeObj.activePoint.startY + (selectionHeight / 2), selectionWidth / 2, selectionHeight / 2, 0, 0, 2 * Math.PI, false);
                if (this.activeObj.strokeSettings.fillColor !== '') {
                    canvasDraw.fillStyle = this.activeObj.strokeSettings.fillColor;
                    canvasDraw.fill();
                }
                canvasDraw.ellipse(this.activeObj.activePoint.startX + (selectionWidth / 2), this.activeObj.activePoint.startY + (selectionHeight / 2), Math.abs((selectionWidth / 2) - (this.activeObj.strokeSettings.strokeWidth)), Math.abs((selectionHeight / 2) - (this.activeObj.strokeSettings.strokeWidth)), 0, 0, 2 * Math.PI, false);
                canvasDraw.fillStyle = this.activeObj.strokeSettings.strokeColor;
                canvasDraw.fill('evenodd');
                canvasDraw.closePath();
                if (canvasDraw === this.upperContext) {
                    this.drawOuterSelection(canvasDraw);
                }
                break;
            case 'crop-circle':
                if (canvasDraw === this.lowerContext) {
                    canvasDraw = this.upperContext;
                }
                this.shapeCircle(canvasDraw, selectionWidth, selectionHeight);
                break;
            case 'line':
                this.shapeLine(canvasDraw, selectionWidth, selectionHeight);
                if (canvasDraw === this.upperContext) {
                    this.drawOuterSelection(canvasDraw);
                }
                break;
            case 'text':
                this.shapeText(canvasDraw);
                break;
            case 'crop-square':
            case 'crop-3:4':
            case 'crop-4:3':
            case 'crop-6:9':
            case 'crop-9:6':
            case 'crop-9:16':
            case 'crop-16:9':
                if (canvasDraw === this.lowerContext) {
                    canvasDraw = this.upperContext;
                }
                this.drawSelection(horLineWidth, verLineHeight);
                this.currObjType.shape = '';
                break;
            default:
                this.drawSelection(horLineWidth, verLineHeight);
                break;
        }
    };
    ImageEditor.prototype.shapeLine = function (canvasDraw, selectionWidth, selectionHeight) {
        var startX;
        var startY;
        var endX;
        var endY;
        var degree;
        if (this.activeObj.shapeDegree === 0) {
            degree = this.degree;
        }
        else {
            degree = this.degree - this.activeObj.shapeDegree;
        }
        if (degree === 0 || degree % 180 === 0) {
            startX = this.activeObj.activePoint.startX;
            startY = this.activeObj.activePoint.startY + (selectionHeight / 2);
            endX = this.activeObj.activePoint.endX;
            endY = this.activeObj.activePoint.startY + (selectionHeight / 2);
        }
        else {
            startX = this.activeObj.activePoint.startX + (selectionWidth / 2);
            startY = this.activeObj.activePoint.startY;
            endX = this.activeObj.activePoint.startX + (selectionWidth / 2);
            endY = this.activeObj.activePoint.endY;
        }
        var tempLineWidth = canvasDraw.lineWidth;
        canvasDraw.lineWidth = (this.activeObj.strokeSettings.strokeWidth);
        canvasDraw.beginPath();
        switch (this.activeObj.lineDraw.toLowerCase()) {
            case 'horizontal':
            case 'vertical':
                canvasDraw.moveTo(startX, startY);
                canvasDraw.lineTo(endX, endY);
                break;
            case 'normal':
                canvasDraw.moveTo(this.activeObj.horTopLine.startX, this.activeObj.horTopLine.startY);
                canvasDraw.lineTo(this.activeObj.horBottomLine.endX, this.activeObj.horBottomLine.endY);
                break;
        }
        canvasDraw.stroke();
        canvasDraw.lineWidth = tempLineWidth;
    };
    ImageEditor.prototype.shapeText = function (canvasDraw) {
        var rows = this.activeObj.keyHistory.split('\n');
        var height = this.activeObj.textSettings.fontSize + this.activeObj.textSettings.fontSize * 0.25;
        var lineHeight = ((height * rows.length) - (this.activeObj.textSettings.fontSize * rows.length)) / rows.length;
        for (var i = 0; i < rows.length; i++) {
            var text = rows[i];
            var yPoint = ((i + 1) * this.activeObj.textSettings.fontSize * 0.85) + (i * lineHeight);
            if (this.degree === -360) {
                this.degree = 0;
            }
            if (this.degree === 0 || this.degree === 180) {
                if (this.activeObj.textSettings.fontSize > this.activeObj.activePoint.height) {
                    this.activeObj.textSettings.fontSize = this.activeObj.activePoint.height -
                        (this.activeObj.activePoint.height * 0.1);
                }
            }
            else {
                if (this.activeObj.textSettings.fontSize > this.activeObj.activePoint.width) {
                    this.activeObj.textSettings.fontSize = this.activeObj.activePoint.width -
                        (this.activeObj.activePoint.width * 0.1);
                }
            }
            canvasDraw.strokeStyle = this.activeObj.strokeSettings.strokeColor;
            canvasDraw.fillStyle = this.activeObj.strokeSettings.strokeColor;
            var textStyle = '';
            if (this.activeObj.textSettings.bold) {
                textStyle = 'bold ';
            }
            if (this.activeObj.textSettings.italic) {
                textStyle = 'italic ';
            }
            if (this.activeObj.textSettings.bold && this.activeObj.textSettings.italic) {
                textStyle = 'italic bold ';
            }
            canvasDraw.font = textStyle + this.activeObj.textSettings.fontSize + 'px' + ' ' + this.activeObj.textSettings.fontFamily;
            if (this.activeObj.flipObjColl.length === 4) {
                this.activeObj.flipObjColl = [];
            }
            for (var j = 0; j < this.activeObj.flipObjColl.length; j++) {
                if (this.activeObj.flipObjColl[j].toLowerCase() === 'horizontal') {
                    canvasDraw.translate(canvasDraw.canvas.width, 0);
                    canvasDraw.scale(-1, 1);
                    this.updateActPoint('horizontal', canvasDraw);
                }
                else if (this.activeObj.flipObjColl[j].toLowerCase() === 'vertical') {
                    canvasDraw.translate(0, canvasDraw.canvas.height);
                    canvasDraw.scale(1, -1);
                    this.updateActPoint('vertical', canvasDraw);
                }
            }
            if (this.activeObj.shapeDegree !== this.degree) {
                this.rotateText(canvasDraw);
            }
            else {
                canvasDraw.fillText(text, this.activeObj.activePoint.startX + this.activeObj.textSettings.fontSize * 0.1, this.activeObj.activePoint.startY + yPoint);
            }
            for (var k = 0; k < this.activeObj.flipObjColl.length; k++) {
                if (this.activeObj.flipObjColl[k].toLowerCase() === 'horizontal') {
                    canvasDraw.translate(canvasDraw.canvas.width, 0);
                    canvasDraw.scale(-1, 1);
                    this.updateActPoint('horizontal', canvasDraw);
                }
                else if (this.activeObj.flipObjColl[k].toLowerCase() === 'vertical') {
                    canvasDraw.translate(0, canvasDraw.canvas.height);
                    canvasDraw.scale(1, -1);
                    this.updateActPoint('vertical', canvasDraw);
                }
            }
        }
        this.currObjType.isText = false;
    };
    ImageEditor.prototype.updateActPoint = function (degree, canvasDraw) {
        if (degree.toLowerCase() === 'horizontal') {
            if (this.activeObj.activePoint.startX <= canvasDraw.canvas.width / 2) {
                this.activeObj.activePoint.startX = canvasDraw.canvas.width / 2 + ((canvasDraw.canvas.width / 2) -
                    this.activeObj.activePoint.endX);
                this.activeObj.activePoint.endX = this.activeObj.activePoint.startX + this.activeObj.activePoint.width;
                this.updateActiveObject(this.activeObj.activePoint, this.activeObj);
            }
            else if (this.activeObj.activePoint.startX >= canvasDraw.canvas.width / 2) {
                this.activeObj.activePoint.startX = canvasDraw.canvas.width - this.activeObj.activePoint.endX;
                this.activeObj.activePoint.endX = this.activeObj.activePoint.startX + this.activeObj.activePoint.width;
                this.updateActiveObject(this.activeObj.activePoint, this.activeObj);
            }
        }
        else if (degree.toLowerCase() === 'vertical') {
            if (this.activeObj.activePoint.startY <= canvasDraw.canvas.height / 2) {
                this.activeObj.activePoint.startY = canvasDraw.canvas.height / 2 + ((canvasDraw.canvas.height / 2) -
                    this.activeObj.activePoint.endY);
                this.activeObj.activePoint.endY = this.activeObj.activePoint.startY + this.activeObj.activePoint.height;
                this.updateActiveObject(this.activeObj.activePoint, this.activeObj);
            }
            else if (this.activeObj.activePoint.startY >= canvasDraw.canvas.height / 2) {
                this.activeObj.activePoint.startY = canvasDraw.canvas.height - this.activeObj.activePoint.endY;
                this.activeObj.activePoint.endY = this.activeObj.activePoint.startY + this.activeObj.activePoint.height;
                this.updateActiveObject(this.activeObj.activePoint, this.activeObj);
            }
        }
    };
    ImageEditor.prototype.drawSquareLines = function (canvasDraw) {
        var splitWords;
        if (this.activeObj.shape !== undefined) {
            splitWords = this.activeObj.shape.split('-');
        }
        if (splitWords[0] === 'crop') {
            canvasDraw.strokeStyle = '#fff';
        }
        else {
            canvasDraw.strokeStyle = this.activeObj.strokeSettings.strokeColor;
        }
        canvasDraw.beginPath();
        canvasDraw.rect(this.activeObj.activePoint.startX, this.activeObj.activePoint.startY, this.activeObj.activePoint.width, this.activeObj.activePoint.height);
        if (this.activeObj.strokeSettings.fillColor !== '') {
            canvasDraw.fillStyle = this.activeObj.strokeSettings.fillColor;
            canvasDraw.fill();
        }
        canvasDraw.rect(this.activeObj.activePoint.startX + this.activeObj.strokeSettings.strokeWidth, this.activeObj.activePoint.startY + this.activeObj.strokeSettings.strokeWidth, this.activeObj.activePoint.width - (2 * this.activeObj.strokeSettings.strokeWidth), this.activeObj.activePoint.height - (2 * this.activeObj.strokeSettings.strokeWidth));
        canvasDraw.fillStyle = this.activeObj.strokeSettings.strokeColor;
        canvasDraw.fill('evenodd');
        canvasDraw.closePath();
    };
    ImageEditor.prototype.drawSelection = function (horLineWidth, verLineHeight) {
        this.upperContext.strokeStyle = this.themeColl[this.theme]['primaryColor'];
        this.upperContext.beginPath();
        this.activeObj.horTopInnerLine = { startX: this.activeObj.activePoint.startX, startY: this.activeObj.activePoint.startY +
                verLineHeight, endX: this.activeObj.activePoint.endX, endY: this.activeObj.activePoint.endY + verLineHeight };
        this.activeObj.horBottomInnerLine = { startX: this.activeObj.activePoint.startX, startY: this.activeObj.activePoint.startY +
                (2 * verLineHeight), endX: this.activeObj.activePoint.endX, endY: this.activeObj.activePoint.endY + (2 * verLineHeight) };
        this.activeObj.verLeftInnerLine = { startX: this.activeObj.activePoint.startX + horLineWidth,
            startY: this.activeObj.activePoint.startY, endX: this.activeObj.activePoint.startX + horLineWidth,
            endY: this.activeObj.activePoint.endY };
        this.activeObj.verRightInnerLine = { startX: this.activeObj.activePoint.startX + (2 * horLineWidth),
            startY: this.activeObj.activePoint.startY, endX: this.activeObj.activePoint.startX + (2 * horLineWidth),
            endY: this.activeObj.activePoint.endY };
        this.upperContext.moveTo(this.activeObj.horTopInnerLine.startX, this.activeObj.horTopInnerLine.startY);
        this.upperContext.lineTo(this.activeObj.horTopInnerLine.endX, this.activeObj.horTopInnerLine.startY);
        this.upperContext.moveTo(this.activeObj.horBottomInnerLine.startX, this.activeObj.horBottomInnerLine.startY);
        this.upperContext.lineTo(this.activeObj.horBottomInnerLine.endX, this.activeObj.horBottomInnerLine.startY);
        this.upperContext.moveTo(this.activeObj.verLeftInnerLine.startX, this.activeObj.verLeftInnerLine.startY);
        this.upperContext.lineTo(this.activeObj.verLeftInnerLine.endX, this.activeObj.verLeftInnerLine.endY);
        this.upperContext.moveTo(this.activeObj.verRightInnerLine.startX, this.activeObj.verRightInnerLine.startY);
        this.upperContext.lineTo(this.activeObj.verRightInnerLine.endX, this.activeObj.verRightInnerLine.endY);
        this.upperContext.stroke();
        this.upperContext.closePath();
    };
    ImageEditor.prototype.drawCenterCircles = function (canvasDraw) {
        canvasDraw.lineWidth *= 2;
        canvasDraw.beginPath();
        canvasDraw.moveTo(this.activeObj.topCenterCircle.startX, this.activeObj.topCenterCircle.startY);
        canvasDraw.arc(this.activeObj.topCenterCircle.startX, this.activeObj.topCenterCircle.startY, this.activeObj.topCenterCircle.radius, 0, 2 * Math.PI);
        canvasDraw.moveTo(this.activeObj.centerLeftCircle.startX, this.activeObj.centerLeftCircle.startY);
        canvasDraw.arc(this.activeObj.centerLeftCircle.startX, this.activeObj.centerLeftCircle.startY, this.activeObj.centerLeftCircle.radius, 0, 2 * Math.PI);
        canvasDraw.moveTo(this.activeObj.centerRightCircle.startX, this.activeObj.centerRightCircle.startY);
        canvasDraw.arc(this.activeObj.centerRightCircle.startX, this.activeObj.centerRightCircle.startY, this.activeObj.centerRightCircle.radius, 0, 2 * Math.PI);
        canvasDraw.moveTo(this.activeObj.bottomCenterCircle.startX, this.activeObj.bottomCenterCircle.startY);
        canvasDraw.arc(this.activeObj.bottomCenterCircle.startX, this.activeObj.bottomCenterCircle.startY, this.activeObj.bottomCenterCircle.radius, 0, 2 * Math.PI);
        canvasDraw.stroke();
        canvasDraw.fill();
        canvasDraw.closePath();
        canvasDraw.lineWidth /= 2;
    };
    ImageEditor.prototype.findTarget = function (x, y, type) {
        if (type.toLowerCase() === 'mousedown' || type.toLowerCase() === 'touchstart') {
            var splitWords = void 0;
            var isCrop = false;
            if (this.activeObj.shape) {
                splitWords = this.activeObj.shape.split('-');
                if (splitWords[0] === 'crop') {
                    isCrop = true;
                }
            }
            this.findTargetObj(x, y, isCrop);
            this.updateCursorStyles(x, y, type);
        }
        else {
            switch (this.dragElement.toLowerCase()) {
                case 'nw-resize':
                    this.activeObj.topLeftCircle.startX = x;
                    this.activeObj.topLeftCircle.startY = y;
                    break;
                case 'n-resize':
                    this.activeObj.topCenterCircle.startX = x;
                    this.activeObj.topCenterCircle.startY = y;
                    break;
                case 'ne-resize':
                    this.activeObj.topRightCircle.startX = x;
                    this.activeObj.topRightCircle.startY = y;
                    break;
                case 'w-resize':
                    this.activeObj.centerLeftCircle.startX = x;
                    this.activeObj.centerLeftCircle.startY = y;
                    break;
                case 'e-resize':
                    this.activeObj.centerRightCircle.startX = x;
                    this.activeObj.centerRightCircle.startY = y;
                    break;
                case 'sw-resize':
                    this.activeObj.bottomLeftCircle.startX = x;
                    this.activeObj.bottomLeftCircle.startY = y;
                    break;
                case 's-resize':
                    this.activeObj.bottomCenterCircle.startX = x;
                    this.activeObj.bottomCenterCircle.startY = y;
                    break;
                case 'se-resize':
                    this.activeObj.bottomRightCircle.startX = x;
                    this.activeObj.bottomRightCircle.startY = y;
                    break;
                default:
                    if (this.dragPoint.startX && this.dragPoint.startY) {
                        this.previousPoint.x = this.dragPoint.endX;
                        this.previousPoint.y = this.dragPoint.endY;
                        this.dragPoint.endX = x;
                        this.dragPoint.endY = y;
                    }
                    break;
            }
        }
    };
    ImageEditor.prototype.findTargetObj = function (x, y, isCrop) {
        var isShape;
        if (this.objColl.length !== 0 && !this.currObjType.isCustomCrop && !isCrop) {
            var diffX = 0;
            var i = void 0;
            for (var index = 0; index < this.objColl.length; index++) {
                var actObj = extend({}, this.objColl[index], {}, true);
                if (x >= (actObj.activePoint.startX - (actObj.topLeftCircle.radius * 2)) &&
                    x <= (actObj.activePoint.endX + (actObj.topLeftCircle.radius * 2)) &&
                    y >= (actObj.activePoint.startY - (actObj.topLeftCircle.radius * 2)) &&
                    y <= (actObj.activePoint.endY + (actObj.topLeftCircle.radius * 2))) {
                    if (this.isTouch || this.upperCanvas.style.cursor === 'move' || this.upperCanvas.style.cursor === 'grab' || this.isShapeInserted) {
                        if (diffX === 0 || diffX > x - actObj.activePoint.startX) {
                            diffX = x - this.objColl[index].activePoint.startX;
                            i = index;
                        }
                    }
                    else if (this.objColl[index].currIndex === this.tempActiveObj.currIndex) {
                        i = index;
                    }
                }
            }
            if (isNullOrUndefined(i)) {
                this.refreshActiveObj();
                isShape = false;
            }
            else {
                this.tempObjColl = extend([], this.objColl, [], true);
                this.currObjType.isCustomCrop = false;
                this.activeObj = extend({}, this.objColl[i], {}, true);
                var temp = extend({}, this.objColl[i], {}, true);
                this.objColl.splice(i, 1);
                if (this.degree === 0) {
                    this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
                    this.updateBrightnessFilter();
                    this.lowerContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, this.destLeft, this.destTop, this.destWidth, this.destHeight);
                    var temp_2 = this.lowerContext.filter;
                    this.lowerContext.filter = 'none';
                    this.iterateObjColl();
                    this.activeObj = extend({}, temp_2, {}, true);
                    this.freehandRedraw(this.lowerContext);
                    this.lowerContext.filter = temp_2;
                    this.getCurrentFlipState();
                }
                else {
                    this.callUpdateCurrentTransformedState();
                    this.freehandRedraw(this.lowerContext);
                }
                this.clearOuterCanvas(this.lowerContext);
                if ((!isNullOrUndefined(this.currSelectionPoint) && this.currSelectionPoint.shape === 'crop-circle') || this.isCircleCrop) {
                    this.cropCircle(this.lowerContext);
                }
                this.setActivePoint();
                this.activeObj = extend({}, temp, {}, true);
                this.tempStrokeSettings = extend({}, this.activeObj.strokeSettings, {}, true);
                this.tempTextSettings = extend({}, this.activeObj.textSettings, {}, true);
                var shapeSettings = this.updatePreviousShapeSettings();
                var shapeChangingArgs = { action: 'select', previousShapeSettings: shapeSettings,
                    currentShapeSettings: shapeSettings };
                this.trigger('shapeChanging', shapeChangingArgs);
                this.updateShapeChangeEventArgs(shapeChangingArgs.currentShapeSettings);
                if (this.activeObj.activePoint) {
                    this.drawObject('duplicate', this.activeObj, null, null, true);
                    if (this.activeObj.activePoint.startX < this.destLeft) {
                        this.isPreventDragging = true;
                    }
                    else if (this.activeObj.activePoint.endX > this.destLeft + this.destWidth) {
                        this.isPreventDragging = true;
                    }
                    else if (this.activeObj.activePoint.startY < this.destTop) {
                        this.isPreventDragging = true;
                    }
                    else if (this.activeObj.activePoint.endY > this.destTop + this.destHeight) {
                        this.isPreventDragging = true;
                    }
                }
                isShape = true;
            }
        }
        return isShape;
    };
    ImageEditor.prototype.getCurrentFlipState = function () {
        if (this.rotateFlipColl.length !== 0) {
            var totalPannedInternalPoint = extend({}, this.totalPannedInternalPoint, {}, true);
            this.callUpdateCurrentTransformedState();
            this.totalPannedInternalPoint = totalPannedInternalPoint;
        }
        else {
            this.callUpdateCurrentTransformedState();
        }
    };
    ImageEditor.prototype.rotateDegree = function (degree) {
        this.lowerContext.save();
        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
        this.lowerContext.translate(this.lowerCanvas.width / 2, this.lowerCanvas.height / 2);
        this.lowerContext.rotate(Math.PI / 180 * degree);
        this.lowerContext.translate(-this.lowerCanvas.width / 2, -this.lowerCanvas.height / 2);
        var temp = this.lowerContext.filter;
        this.updateBrightnessFilter();
        this.lowerContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, this.destLeft, this.destTop, this.destWidth, this.destHeight);
        this.lowerContext.filter = temp;
        this.lowerContext.translate(this.lowerCanvas.width / 2, this.lowerCanvas.height / 2);
        this.lowerContext.rotate(Math.PI / 180 * -degree);
        this.lowerContext.translate(-this.lowerCanvas.width / 2, -this.lowerCanvas.height / 2);
        this.lowerContext.restore();
    };
    ImageEditor.prototype.updateCursorStyles = function (x, y, type) {
        var isResize = false;
        if (this.activeObj.keyHistory !== '' && this.activeObj.shape === undefined && !this.currObjType.isCustomCrop &&
            !this.currObjType.isLine && this.currObjType.isText) {
            this.activeObj.shape = 'text';
        }
        var actObj = extend({}, this.activeObj, {}, true);
        if (isNullOrUndefined(actObj.topLeftCircle)) {
            return;
        }
        if (x >= (actObj.topLeftCircle.startX - (actObj.topLeftCircle.radius * 2)) &&
            x <= (actObj.topLeftCircle.startX + (actObj.topLeftCircle.radius * 2)) &&
            y >= (actObj.topLeftCircle.startY - (actObj.topLeftCircle.radius * 2)) &&
            y <= (actObj.topLeftCircle.startY + (actObj.topLeftCircle.radius * 2)) && this.dragElement !== 'nw-resize') {
            actObj.topLeftCircle.startX = actObj.topLeftCircle.startY = 0;
            this.upperCanvas.style.cursor = 'nw-resize';
            isResize = true;
            this.dragElement = this.upperCanvas.style.cursor;
        }
        else if (x >= (actObj.topCenterCircle.startX - (actObj.topLeftCircle.radius * 2)) &&
            x <= (actObj.topCenterCircle.startX + (actObj.topLeftCircle.radius * 2)) &&
            y >= (actObj.topCenterCircle.startY - (actObj.topLeftCircle.radius * 2)) &&
            y <= (actObj.topCenterCircle.startY + (actObj.topLeftCircle.radius * 2)) && this.dragElement !== 'n-resize') {
            actObj.topCenterCircle.startX = actObj.topCenterCircle.startY = 0;
            this.upperCanvas.style.cursor = 'n-resize';
            isResize = true;
            this.dragElement = this.upperCanvas.style.cursor;
        }
        else if (x >= (actObj.topRightCircle.startX - (actObj.topLeftCircle.radius * 2)) &&
            x <= (actObj.topRightCircle.startX + (actObj.topLeftCircle.radius * 2)) &&
            y >= (actObj.topRightCircle.startY - (actObj.topLeftCircle.radius * 2)) &&
            y <= (actObj.topRightCircle.startY + (actObj.topLeftCircle.radius * 2)) && this.dragElement !== 'ne-resize') {
            actObj.topRightCircle.startX = actObj.topRightCircle.startY = 0;
            this.upperCanvas.style.cursor = 'ne-resize';
            isResize = true;
            this.dragElement = this.upperCanvas.style.cursor;
        }
        else if (x >= (actObj.centerLeftCircle.startX - (actObj.topLeftCircle.radius * 2)) &&
            x <= (actObj.centerLeftCircle.startX + (actObj.topLeftCircle.radius * 2)) &&
            y >= (actObj.centerLeftCircle.startY - (actObj.topLeftCircle.radius * 2)) &&
            y <= (actObj.centerLeftCircle.startY + (actObj.topLeftCircle.radius * 2)) && this.dragElement !== 'w-resize') {
            actObj.centerLeftCircle.startX = actObj.centerLeftCircle.startY = 0;
            this.upperCanvas.style.cursor = 'w-resize';
            isResize = true;
            this.dragElement = this.upperCanvas.style.cursor;
        }
        else if (x >= (actObj.centerRightCircle.startX - (actObj.topLeftCircle.radius * 2)) &&
            x <= (actObj.centerRightCircle.startX + (actObj.topLeftCircle.radius * 2)) &&
            y >= (actObj.centerRightCircle.startY - (actObj.topLeftCircle.radius * 2)) &&
            y <= (actObj.centerRightCircle.startY + (actObj.topLeftCircle.radius * 2)) && this.dragElement !== 'e-resize') {
            actObj.centerRightCircle.startX = actObj.centerRightCircle.startY = 0;
            this.upperCanvas.style.cursor = 'e-resize';
            isResize = true;
            this.dragElement = this.upperCanvas.style.cursor;
        }
        else if (x >= (actObj.bottomLeftCircle.startX - (actObj.topLeftCircle.radius * 2)) &&
            x <= (actObj.bottomLeftCircle.startX + (actObj.topLeftCircle.radius * 2)) &&
            y >= (actObj.bottomLeftCircle.startY - (actObj.topLeftCircle.radius * 2)) &&
            y <= (actObj.bottomLeftCircle.startY + (actObj.topLeftCircle.radius * 2)) && this.dragElement !== 'sw-resize') {
            actObj.bottomLeftCircle.startX = actObj.bottomLeftCircle.startY = 0;
            this.upperCanvas.style.cursor = 'sw-resize';
            isResize = true;
            this.dragElement = this.upperCanvas.style.cursor;
        }
        else if (x >= (actObj.bottomCenterCircle.startX - (actObj.topLeftCircle.radius * 2)) &&
            x <= (actObj.bottomCenterCircle.startX + (actObj.topLeftCircle.radius * 2)) &&
            y >= (actObj.bottomCenterCircle.startY - (actObj.topLeftCircle.radius * 2)) &&
            y <= (actObj.bottomCenterCircle.startY + (actObj.topLeftCircle.radius * 2)) && this.dragElement !== 's-resize') {
            actObj.bottomCenterCircle.startX = actObj.bottomCenterCircle.startY = 0;
            this.upperCanvas.style.cursor = 's-resize';
            isResize = true;
            this.dragElement = this.upperCanvas.style.cursor;
        }
        else if (x >= (actObj.bottomRightCircle.startX - (actObj.topLeftCircle.radius * 2)) &&
            x <= (actObj.bottomRightCircle.startX + (actObj.topLeftCircle.radius * 2)) &&
            y >= (actObj.bottomRightCircle.startY - (actObj.topLeftCircle.radius * 2)) &&
            y <= (actObj.bottomRightCircle.startY + (actObj.topLeftCircle.radius * 2)) && this.dragElement !== 'se-resize') {
            actObj.bottomRightCircle.startX = actObj.bottomRightCircle.startY = 0;
            this.upperCanvas.style.cursor = 'se-resize';
            isResize = true;
            this.dragElement = this.upperCanvas.style.cursor;
        }
        else {
            this.dragPoint.startX = this.previousPoint.x = this.dragPoint.endX = x;
            this.dragPoint.startY = this.previousPoint.y = this.dragPoint.endY = y;
        }
        this.previousPoint.x = this.previousPoint.y = this.diffPoint.x = this.diffPoint.y = 0;
        if (type === 'touchstart') {
            if (isResize || (x >= actObj.activePoint.startX && x <= actObj.activePoint.endX
                && y >= actObj.activePoint.startY && y <= actObj.activePoint.endY)) {
                this.currObjType.isDragging = true;
            }
        }
        else {
            this.currObjType.isDragging = true;
        }
    };
    ImageEditor.prototype.drawCropRatio = function () {
        var x;
        var y;
        var width;
        var height;
        if (this.zoomFactor > 0 && !isNullOrUndefined(this.currentSelectionPoint)) {
            //width = this.currentSelectionPoint.activePoint.width; height = this.currentSelectionPoint.activePoint.height;
            if (this.destLeft + this.destLeft + this.destWidth <= this.lowerCanvas.clientWidth) {
                width = this.destWidth;
                if (this.destLeft < 0) {
                    width += (2 * this.destLeft);
                }
            }
            else {
                width = this.lowerCanvas.clientWidth;
            }
            if (this.destTop + this.destTop + this.destHeight <= this.lowerCanvas.clientHeight) {
                height = this.destHeight;
                if (this.destTop < 0) {
                    height += (2 * this.destTop);
                }
            }
            else {
                height = this.lowerCanvas.clientHeight;
            }
            if (this.degree !== 0) {
                this.isAllowCropPan = true;
            }
        }
        else {
            width = this.destWidth;
            height = this.destHeight;
            if (this.destLeft < 0) {
                width += this.destLeft;
            }
            if (this.destTop < 0) {
                height += this.destTop;
            }
            if (this.currObjType.shape.toLowerCase() !== 'crop-square' && this.currObjType.shape.toLowerCase() !== 'crop-circle') {
                if (this.destLeft + this.destWidth > this.lowerCanvas.width) {
                    width -= (this.destLeft + this.destWidth - this.lowerCanvas.width);
                }
                if (this.destTop + this.destHeight > this.lowerCanvas.height) {
                    height -= (this.destTop + this.destHeight - this.lowerCanvas.height);
                }
            }
        }
        switch (this.currObjType.shape.toLowerCase()) {
            case 'crop-square':
            case 'crop-circle':
                this.setDragDirection(width, height);
                if (width === this.destWidth && height === this.destHeight) {
                    this.activeObj.activePoint.startX += this.destLeft;
                    this.activeObj.activePoint.startY += this.destTop;
                    this.activeObj.activePoint.endX += this.destLeft;
                    this.activeObj.activePoint.endY += this.destTop;
                }
                if (this.lowerCanvas.width > this.lowerCanvas.height) {
                    this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
                    this.activeObj.activePoint.width = this.activeObj.activePoint.height;
                    this.activeObj.activePoint.endX = this.activeObj.activePoint.startX + this.activeObj.activePoint.width;
                }
                else {
                    this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
                    this.activeObj.activePoint.height = this.activeObj.activePoint.width;
                    this.activeObj.activePoint.endY = this.activeObj.activePoint.startY + this.activeObj.activePoint.height;
                }
                break;
            case 'crop-3:2':
                x = 3;
                y = 2;
                break;
            case 'crop-4:3':
                x = 4;
                y = 3;
                break;
            case 'crop-5:4':
                x = 5;
                y = 4;
                break;
            case 'crop-7:5':
                x = 7;
                y = 5;
                break;
            case 'crop-16:9':
                x = 16;
                y = 9;
                break;
        }
        if (x !== undefined && y !== undefined) {
            this.calcShapeRatio(x, y, width, height);
            if (width === this.destWidth && height === this.destHeight) {
                this.updatePoints();
            }
        }
        // Set Selection inside image
        if (!isNullOrUndefined(this.currentSelectionPoint)) {
            if (this.activeObj.activePoint.startX < this.currentSelectionPoint.activePoint.startX) {
                var diff = this.currentSelectionPoint.activePoint.startX - this.activeObj.activePoint.startX;
                this.activeObj.activePoint.startX += diff;
                this.activeObj.activePoint.endX += diff;
            }
            if (this.activeObj.activePoint.startY < this.currentSelectionPoint.activePoint.startY) {
                var diff = this.currentSelectionPoint.activePoint.startY - this.activeObj.activePoint.startY;
                this.activeObj.activePoint.startY += diff;
                this.activeObj.activePoint.endY += diff;
            }
            if (this.activeObj.activePoint.endX > this.currentSelectionPoint.activePoint.endX) {
                var diff = this.activeObj.activePoint.endX - this.currentSelectionPoint.activePoint.endX;
                this.activeObj.activePoint.startX -= diff;
                this.activeObj.activePoint.endX -= diff;
            }
            if (this.activeObj.activePoint.endY > this.currentSelectionPoint.activePoint.endY) {
                var diff = this.activeObj.activePoint.endY - this.currentSelectionPoint.activePoint.endY;
                this.activeObj.activePoint.startY -= diff;
                this.activeObj.activePoint.endY -= diff;
            }
            this.activeObj.activePoint.startX = (this.lowerCanvas.clientWidth - this.activeObj.activePoint.width) / 2;
            this.activeObj.activePoint.startY = (this.lowerCanvas.clientHeight - this.activeObj.activePoint.height) / 2;
            this.activeObj.activePoint.endX = this.activeObj.activePoint.startX + this.activeObj.activePoint.width;
            this.activeObj.activePoint.endY = this.activeObj.activePoint.startY + this.activeObj.activePoint.height;
        }
        if (this.zoomFactor === 0) {
            if (this.activeObj.activePoint.startX < this.destLeft) {
                var diff = (this.destLeft - this.activeObj.activePoint.startX) + 7.5;
                this.activeObj.activePoint.startX += diff;
                this.activeObj.activePoint.endX += diff;
            }
            if (this.activeObj.activePoint.startY < this.destTop) {
                var diff = (this.destTop - this.activeObj.activePoint.startY) + 7.5;
                this.activeObj.activePoint.startY += diff;
                this.activeObj.activePoint.endY += diff;
            }
            this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
            this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
        }
    };
    ImageEditor.prototype.setDragDirection = function (width, height) {
        var arcRadius = (7.5);
        if (this.destWidth > this.destHeight) {
            this.activeObj.activePoint.startX = this.dragPoint.startX = ((width / 2) - (height / 2))
                + arcRadius;
            this.activeObj.activePoint.startY = this.dragPoint.startY = ((height / 2) - (height / 2))
                + arcRadius;
            this.activeObj.activePoint.endX = ((width / 2) + (height / 2)) - arcRadius;
            this.activeObj.activePoint.endY = ((height / 2) + (height / 2)) - arcRadius;
        }
        else {
            this.activeObj.activePoint.startY = this.dragPoint.startX = ((height / 2) - (width) / 2)
                + arcRadius;
            this.activeObj.activePoint.endY = ((height / 2) + (width) / 2) - arcRadius;
            this.activeObj.activePoint.startX = this.dragPoint.startX = arcRadius;
            this.activeObj.activePoint.endX = width - arcRadius;
        }
    };
    ImageEditor.prototype.updatePoints = function () {
        this.activeObj.activePoint.startX += this.destLeft;
        this.activeObj.activePoint.startY += this.destTop;
        this.activeObj.activePoint.endX += this.destLeft;
        this.activeObj.activePoint.endY += this.destTop;
        this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
        this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
    };
    ImageEditor.prototype.calcShapeRatio = function (x, y, imgWidth, imgHeight) {
        var arcRadius = (7.5);
        var originalWidth = imgWidth;
        var originalHeight = imgHeight;
        var presetRatio = x / y;
        var standardSize = originalWidth >= originalHeight ? originalWidth : originalHeight;
        var width = standardSize * presetRatio;
        var height = standardSize;
        var scaleWidth = this.getScale(width, originalWidth);
        var snippetArray = [];
        for (var i = 0; i < 2; i++) {
            if (i === 0) {
                snippetArray.push(width * scaleWidth);
            }
            else {
                snippetArray.push(height * scaleWidth);
            }
        }
        width = snippetArray[0];
        height = snippetArray[1];
        var scaleHeight = this.getScale(height, originalHeight);
        var snippetArray1 = [];
        for (var i = 0; i < 2; i++) {
            if (i === 0) {
                snippetArray1.push(width * scaleHeight);
            }
            else {
                snippetArray1.push(height * scaleHeight);
            }
        }
        width = snippetArray1[0];
        height = snippetArray1[1];
        this.activeObj.activePoint.width = width;
        this.activeObj.activePoint.height = height;
        this.activeObj.activePoint.startX = (this.dragPoint.startX = (originalWidth - width) / 2) + arcRadius;
        this.activeObj.activePoint.startY = (this.dragPoint.startY = (originalHeight - height) / 2) + arcRadius;
        this.activeObj.activePoint.endX = ((originalWidth - width) / 2 + width) - arcRadius;
        this.activeObj.activePoint.endY = ((originalHeight - height) / 2 + height) - arcRadius;
        if (this.activeObj.activePoint.startX < this.destLeft && this.destLeft + this.destWidth > this.lowerCanvas.clientWidth) {
            this.activeObj.activePoint.startX = this.destLeft;
            this.activeObj.activePoint.endX = this.activeObj.activePoint.startX + width;
        }
        if (this.activeObj.activePoint.startY < this.destTop && this.destTop + this.destHeight > this.lowerCanvas.clientHeight) {
            this.activeObj.activePoint.startY = this.destTop;
            this.activeObj.activePoint.endY = this.activeObj.activePoint.startY + height;
        }
        this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
        this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
    };
    ImageEditor.prototype.getScale = function (value, originalValue) {
        return value > originalValue ? originalValue / value : 1;
    };
    ImageEditor.prototype.calcMaxDimension = function (width, height) {
        var canvasMaxWidth = this.element.clientWidth;
        var canvasMaxHeight = this.element.clientHeight - this.toolbarHeight;
        canvasMaxHeight = Browser.isDevice ? canvasMaxHeight - this.toolbarHeight : canvasMaxHeight;
        canvasMaxWidth -= 30;
        canvasMaxHeight -= 30;
        var widthScale = canvasMaxWidth / width;
        var heightScale = canvasMaxHeight / height;
        var cssMaxWidth = Math.min(width, canvasMaxWidth);
        var cssMaxHeight = Math.min(height, canvasMaxHeight);
        if (widthScale < 1 && widthScale < heightScale) {
            cssMaxWidth = width * widthScale;
            cssMaxHeight = height * widthScale;
        }
        else if (heightScale < 1 && heightScale < widthScale) {
            cssMaxWidth = width * heightScale;
            cssMaxHeight = height * heightScale;
        }
        return { width: cssMaxWidth, height: cssMaxHeight };
    };
    ImageEditor.prototype.setMaximumDimension = function (degree, tempCanvas) {
        var newWidth;
        var newHeight;
        if (degree % 90 === 0 && degree % 180 !== 0) {
            newWidth = this.baseImg.height;
            newHeight = this.baseImg.width;
        }
        else if (degree % 180 === 0 || degree === 0) {
            newWidth = this.baseImg.width;
            newHeight = this.baseImg.height;
        }
        tempCanvas.width = newWidth;
        tempCanvas.height = newHeight;
        var maxDimension = this.calcMaxDimension(newWidth, newHeight);
        tempCanvas.style.maxWidth = maxDimension.width + 'px';
        tempCanvas.style.maxHeight = maxDimension.height + 'px';
    };
    ImageEditor.prototype.setCursor = function (x, y) {
        var isCropSelection = false;
        var splitWords;
        if (this.activeObj.horTopLine !== undefined) {
            if (this.activeObj.shape !== undefined) {
                splitWords = this.activeObj.shape.split('-');
            }
            if (splitWords === undefined && this.currObjType.isCustomCrop) {
                isCropSelection = true;
            }
            else if (splitWords !== undefined && splitWords[0] === 'crop') {
                isCropSelection = true;
            }
            if (!isCropSelection && this.togglePan) {
                this.lowerCanvas.style.cursor = this.upperCanvas.style.cursor = 'grab';
            }
            var cursor = this.upperCanvas.style.cursor;
            var actObj = extend({}, this.activeObj, {}, true);
            if (x >= (actObj.topLeftCircle.startX - ((actObj.topLeftCircle.radius * 2))) &&
                x <= (actObj.topLeftCircle.startX + ((actObj.topLeftCircle.radius * 2))) &&
                y >= (actObj.topLeftCircle.startY - ((actObj.topLeftCircle.radius * 2))) &&
                y <= (actObj.topLeftCircle.startY + ((actObj.topLeftCircle.radius * 2)))) {
                this.upperCanvas.style.cursor = 'nw-resize';
            }
            else if (x >= (actObj.topCenterCircle.startX - ((actObj.topLeftCircle.radius * 2))) &&
                x <= (actObj.topCenterCircle.startX + ((actObj.topLeftCircle.radius * 2))) &&
                y >= (actObj.topCenterCircle.startY - ((actObj.topLeftCircle.radius * 2))) &&
                y <= (actObj.topCenterCircle.startY + ((actObj.topLeftCircle.radius * 2)))) {
                this.upperCanvas.style.cursor = 'n-resize';
            }
            else if (x >= (actObj.topRightCircle.startX - ((actObj.topLeftCircle.radius * 2))) &&
                x <= (actObj.topRightCircle.startX + ((actObj.topLeftCircle.radius * 2))) &&
                y >= (actObj.topRightCircle.startY - ((actObj.topLeftCircle.radius * 2))) &&
                y <= (actObj.topRightCircle.startY + ((actObj.topLeftCircle.radius * 2)))) {
                this.upperCanvas.style.cursor = 'ne-resize';
            }
            else if (x >= (actObj.centerLeftCircle.startX - ((actObj.topLeftCircle.radius * 2))) &&
                x <= (actObj.centerLeftCircle.startX + ((actObj.topLeftCircle.radius * 2))) &&
                y >= (actObj.centerLeftCircle.startY - ((actObj.topLeftCircle.radius * 2))) &&
                y <= (actObj.centerLeftCircle.startY + ((actObj.topLeftCircle.radius * 2)))) {
                this.upperCanvas.style.cursor = 'w-resize';
            }
            else if (x >= (actObj.centerRightCircle.startX - ((actObj.topLeftCircle.radius * 2))) &&
                x <= (actObj.centerRightCircle.startX + ((actObj.topLeftCircle.radius * 2))) &&
                y >= (actObj.centerRightCircle.startY - ((actObj.topLeftCircle.radius * 2))) &&
                y <= (actObj.centerRightCircle.startY + ((actObj.topLeftCircle.radius * 2)))) {
                this.upperCanvas.style.cursor = 'e-resize';
            }
            else if (x >= (actObj.bottomLeftCircle.startX - ((actObj.topLeftCircle.radius * 2))) &&
                x <= (actObj.bottomLeftCircle.startX + ((actObj.topLeftCircle.radius * 2))) &&
                y >= (actObj.bottomLeftCircle.startY - ((actObj.topLeftCircle.radius * 2))) &&
                y <= (actObj.bottomLeftCircle.startY + ((actObj.topLeftCircle.radius * 2)))) {
                this.upperCanvas.style.cursor = 'sw-resize';
            }
            else if (x >= (actObj.bottomCenterCircle.startX - ((actObj.topLeftCircle.radius * 2))) &&
                x <= (actObj.bottomCenterCircle.startX + ((actObj.topLeftCircle.radius * 2))) &&
                y >= (actObj.bottomCenterCircle.startY - ((actObj.topLeftCircle.radius * 2))) &&
                y <= (actObj.bottomCenterCircle.startY + ((actObj.topLeftCircle.radius * 2)))) {
                this.upperCanvas.style.cursor = 's-resize';
            }
            else if (x >= (actObj.bottomRightCircle.startX - ((actObj.topLeftCircle.radius * 2))) &&
                x <= (actObj.bottomRightCircle.startX + ((actObj.topLeftCircle.radius * 2))) &&
                y >= (actObj.bottomRightCircle.startY - ((actObj.topLeftCircle.radius * 2))) &&
                y <= (actObj.bottomRightCircle.startY + ((actObj.topLeftCircle.radius * 2)))) {
                this.upperCanvas.style.cursor = 'se-resize';
            }
            else if ((x >= actObj.activePoint.startX &&
                x <= actObj.activePoint.endX) && (y >= actObj.activePoint.startY &&
                y <= actObj.activePoint.endY)) {
                if (isCropSelection) {
                    this.upperCanvas.style.cursor = 'grab';
                }
                else {
                    this.upperCanvas.style.cursor = 'move';
                }
            }
            else {
                if (this.currObjType.isCustomCrop) {
                    this.upperCanvas.style.cursor = 'crosshair';
                }
                this.upperCanvas.style.cursor = 'default';
            }
            if (cursor === 'default' && this.upperCanvas.style.cursor === 'default' && isCropSelection) {
                this.upperCanvas.style.cursor = 'grab';
            }
            if (cursor === 'grab' && this.upperCanvas.style.cursor === 'default') {
                this.upperCanvas.style.cursor = 'grab';
            }
        }
        else if (this.togglePan && !this.togglePen) {
            this.lowerCanvas.style.cursor = this.upperCanvas.style.cursor = 'grab';
        }
        else {
            if (this.currObjType.isCustomCrop || this.togglePen) {
                this.upperCanvas.style.cursor = 'crosshair';
            }
            else {
                this.upperCanvas.style.cursor = 'default';
            }
        }
        if (this.upperCanvas.style.cursor === 'default' || this.upperCanvas.style.cursor === 'grab') {
            var cursor = this.upperCanvas.style.cursor;
            if (this.objColl.length > 0 && (this.upperCanvas.style.cursor !== 'grab' || !isCropSelection)) {
                this.setCursorFromObj(x, y, this.objColl);
            }
            if (cursor === 'grab' && this.upperCanvas.style.cursor === 'default') {
                this.upperCanvas.style.cursor = 'grab';
            }
        }
        if ((this.upperCanvas.style.cursor === 'default' || this.upperCanvas.style.cursor === 'grab')
            && !isNullOrUndefined(this.pointColl[0]) && (this.upperCanvas.style.cursor !== 'grab' || !isCropSelection)) {
            this.setCursorForFreehandDrawing(x, y);
        }
    };
    ImageEditor.prototype.setCursorForFreehandDrawing = function (x, y) {
        var isEntered = false;
        this.freehandDrawHoveredIndex = -1;
        for (var n = 0; n < this.freehandCounter; n++) {
            this.points = extend([], this.pointColl[n].points, []);
            this.pointCounter = 0;
            var len = this.points.length;
            for (var l = 0; l < len; l++) {
                if (l !== 0) {
                    var isInside = false;
                    if (!isNullOrUndefined(this.points[l - 1]) && !isNullOrUndefined(this.points[l])) {
                        isInside = this.isInside(x, y, this.points[l - 1].x, this.points[l - 1].y, this.points[l].x, this.points[l].y);
                    }
                    if (isInside) {
                        this.isFreehandDrawingPoint = true;
                        this.freehandDrawHoveredIndex = n;
                        this.hoverFreehandraw();
                        this.upperCanvas.style.cursor = 'pointer';
                        isEntered = true;
                        break;
                    }
                    else if (!this.isFreehandDrawEditing || this.pointColl[n].isSelected) {
                        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                        if (!isNullOrUndefined(this.activeObj.shape) && this.textArea.style.display === 'none') {
                            this.drawObject('duplicate', this.activeObj);
                        }
                        if (this.isFreehandDrawEditing) {
                            var strokeColor = this.pointColl[n].strokeColor = this.selectedFreehandColor;
                            this.hoverFreehandraw(strokeColor, this.pointColl[n].strokeWidth);
                        }
                        else {
                            this.freehandDrawHoveredIndex = null;
                        }
                        this.isFreehandDrawingPoint = false;
                    }
                }
                else {
                    if (x > this.points[l].x - this.pointColl[n].strokeWidth &&
                        x < this.points[l].x + this.pointColl[n].strokeWidth &&
                        y > this.points[l].y - this.pointColl[n].strokeWidth &&
                        y < this.points[l].y + this.pointColl[n].strokeWidth) {
                        this.isFreehandDrawingPoint = true;
                        this.freehandDrawHoveredIndex = n;
                        this.hoverFreehandraw();
                        this.upperCanvas.style.cursor = 'pointer';
                        isEntered = true;
                        break;
                    }
                    else if (!this.isFreehandDrawEditing || this.pointColl[n].isSelected) {
                        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                        if (!isNullOrUndefined(this.activeObj.shape) && this.textArea.style.display === 'none') {
                            this.drawObject('duplicate', this.activeObj);
                        }
                        if (this.isFreehandDrawEditing) {
                            var strokeColor = this.pointColl[n].strokeColor === '#fff' ? '#42a5f5' : this.pointColl[n].strokeColor;
                            this.hoverFreehandraw(strokeColor, this.pointColl[n].strokeWidth);
                        }
                        this.isFreehandDrawingPoint = false;
                    }
                }
            }
            if (isEntered) {
                break;
            }
        }
    };
    ImageEditor.prototype.setCursorFromObj = function (x, y, obj) {
        for (var i = 0; i < obj.length; i++) {
            var actObj = extend({}, obj[i], {}, true);
            if (x >= (actObj.topLeftCircle.startX - ((actObj.topLeftCircle.radius * 2))) &&
                x <= (actObj.topLeftCircle.startX + ((actObj.topLeftCircle.radius * 2))) &&
                y >= (actObj.topLeftCircle.startY - ((actObj.topLeftCircle.radius * 2))) &&
                y <= (actObj.topLeftCircle.startY + ((actObj.topLeftCircle.radius * 2)))) {
                this.upperCanvas.style.cursor = 'nw-resize';
                break;
            }
            else if (x >= (actObj.topCenterCircle.startX - ((actObj.topLeftCircle.radius * 2))) &&
                x <= (actObj.topCenterCircle.startX + ((actObj.topLeftCircle.radius * 2))) &&
                y >= (actObj.topCenterCircle.startY - ((actObj.topLeftCircle.radius * 2))) &&
                y <= (actObj.topCenterCircle.startY + ((actObj.topLeftCircle.radius * 2)))) {
                this.upperCanvas.style.cursor = 'n-resize';
                break;
            }
            else if (x >= (actObj.topRightCircle.startX - ((actObj.topLeftCircle.radius * 2))) &&
                x <= (actObj.topRightCircle.startX + ((actObj.topLeftCircle.radius * 2))) &&
                y >= (actObj.topRightCircle.startY - ((actObj.topLeftCircle.radius * 2))) &&
                y <= (actObj.topRightCircle.startY + ((actObj.topLeftCircle.radius * 2)))) {
                this.upperCanvas.style.cursor = 'ne-resize';
                break;
            }
            else if (x >= (actObj.centerLeftCircle.startX - ((actObj.topLeftCircle.radius * 2))) &&
                x <= (actObj.centerLeftCircle.startX + ((actObj.topLeftCircle.radius * 2))) &&
                y >= (actObj.centerLeftCircle.startY - ((actObj.topLeftCircle.radius * 2))) &&
                y <= (actObj.centerLeftCircle.startY + ((actObj.topLeftCircle.radius * 2)))) {
                this.upperCanvas.style.cursor = 'w-resize';
                break;
            }
            else if (x >= (actObj.centerRightCircle.startX - ((actObj.topLeftCircle.radius * 2))) &&
                x <= (actObj.centerRightCircle.startX + ((actObj.topLeftCircle.radius * 2))) &&
                y >= (actObj.centerRightCircle.startY - ((actObj.topLeftCircle.radius * 2))) &&
                y <= (actObj.centerRightCircle.startY + ((actObj.topLeftCircle.radius * 2)))) {
                this.upperCanvas.style.cursor = 'e-resize';
                break;
            }
            else if (x >= (actObj.bottomLeftCircle.startX - ((actObj.topLeftCircle.radius * 2))) &&
                x <= (actObj.bottomLeftCircle.startX + ((actObj.topLeftCircle.radius * 2))) &&
                y >= (actObj.bottomLeftCircle.startY - ((actObj.topLeftCircle.radius * 2))) &&
                y <= (actObj.bottomLeftCircle.startY + ((actObj.topLeftCircle.radius * 2)))) {
                this.upperCanvas.style.cursor = 'sw-resize';
                break;
            }
            else if (x >= (actObj.bottomCenterCircle.startX - ((actObj.topLeftCircle.radius * 2))) &&
                x <= (actObj.bottomCenterCircle.startX + ((actObj.topLeftCircle.radius * 2))) &&
                y >= (actObj.bottomCenterCircle.startY - ((actObj.topLeftCircle.radius * 2))) &&
                y <= (actObj.bottomCenterCircle.startY + ((actObj.topLeftCircle.radius * 2)))) {
                this.upperCanvas.style.cursor = 's-resize';
                break;
            }
            else if (x >= (actObj.bottomRightCircle.startX - ((actObj.topLeftCircle.radius * 2))) &&
                x <= (actObj.bottomRightCircle.startX + ((actObj.topLeftCircle.radius * 2))) &&
                y >= (actObj.bottomRightCircle.startY - ((actObj.topLeftCircle.radius * 2))) &&
                y <= (actObj.bottomRightCircle.startY + ((actObj.topLeftCircle.radius * 2)))) {
                this.upperCanvas.style.cursor = 'se-resize';
                break;
            }
            else if ((x >= actObj.activePoint.startX &&
                x <= actObj.activePoint.endX) && (y >= actObj.activePoint.startY &&
                y <= actObj.activePoint.endY)) {
                this.upperCanvas.style.cursor = 'move';
                break;
            }
            else {
                if (this.currObjType.isCustomCrop) {
                    this.upperCanvas.style.cursor = 'crosshair';
                }
                this.upperCanvas.style.cursor = 'default';
            }
        }
    };
    ImageEditor.prototype.isInside = function (x, y, z1, z2, z3, z4) {
        var x1 = Math.min(z1, z3);
        var x2 = Math.max(z1, z3);
        var y1 = Math.min(z2, z4);
        var y2 = Math.max(z2, z4);
        if ((x1 <= x && x <= x2) && (y1 <= y && y <= y2)) {
            return true;
        }
        else {
            return false;
        }
    };
    ImageEditor.prototype.refreshDropDownBtn = function (isDisabled) {
        if (isNullOrUndefined(isDisabled)) {
            return;
        }
        var annotation = document.querySelector('#' + this.element.id + '_annotationBtn');
        if (!isNullOrUndefined(annotation)) {
            if (isDisabled) {
                annotation.classList.add('e-disabled');
                annotation.parentElement.classList.add('e-overlay');
            }
            else {
                annotation.classList.remove('e-disabled');
                annotation.parentElement.classList.remove('e-overlay');
            }
            getComponent(annotation, 'dropdown-btn').disabled = isDisabled;
        }
        var transform = document.querySelector('#' + this.element.id + '_transformBtn');
        if (!isNullOrUndefined(transform)) {
            if (isDisabled) {
                transform.classList.add('e-disabled');
                transform.parentElement.classList.add('e-overlay');
            }
            else {
                transform.classList.remove('e-disabled');
                transform.parentElement.classList.remove('e-overlay');
            }
            getComponent(transform, 'dropdown-btn').disabled = isDisabled;
        }
        var adjustment = document.querySelector('#' + this.element.id + '_adjustment');
        if (!isNullOrUndefined(adjustment)) {
            if (isDisabled) {
                adjustment.classList.add('e-disabled');
                adjustment.parentElement.classList.add('e-overlay');
            }
            else {
                adjustment.classList.remove('e-disabled');
                adjustment.parentElement.classList.remove('e-overlay');
            }
            getComponent(adjustment, 'btn').disabled = isDisabled;
        }
        var filter = document.querySelector('#' + this.element.id + '_filter');
        if (!isNullOrUndefined(filter)) {
            if (isDisabled) {
                filter.classList.add('e-disabled');
                filter.parentElement.classList.add('e-overlay');
            }
            else {
                filter.classList.remove('e-disabled');
                filter.parentElement.classList.remove('e-overlay');
            }
            getComponent(filter, 'btn').disabled = isDisabled;
        }
    };
    ImageEditor.prototype.downloadImg = function (blob, fileName) {
        var a = document.createElement('a');
        a.href = blob;
        a.target = '_parent';
        a.download = fileName;
        (document.body || document.documentElement).appendChild(a);
        a.click();
        a.parentNode.removeChild(a);
    };
    ImageEditor.prototype.toSVGImg = function (fileName) {
        showSpinner(this.element);
        this.element.style.opacity = '0.5';
        var tempCanvas = this.exportChangesToCanvas();
        var dataUrl = tempCanvas.toDataURL();
        hideSpinner(this.element);
        this.element.style.opacity = '1';
        var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        svg.setAttribute('width', tempCanvas.style.maxWidth);
        svg.setAttribute('height', tempCanvas.style.maxHeight);
        var XLinkNS = 'http://www.w3.org/1999/xlink';
        var img = document.createElementNS('http://www.w3.org/2000/svg', 'image');
        img.setAttributeNS(null, 'height', tempCanvas.height.toString());
        img.setAttributeNS(null, 'width', tempCanvas.width.toString());
        img.setAttributeNS(XLinkNS, 'xlink:href', dataUrl);
        svg.appendChild(img);
        var prefix = 'data:image/svg+xml;base64,';
        var header = '<svg' + ' xmlns="http://www.w3.org/2000/svg"' + ' xmlns:xlink="http://www.w3.org/1999/xlink"'
            + (" width=\"" + tempCanvas.width + "\"") + (" height=\"" + tempCanvas.height + "\"") + '>';
        var footer = '</svg>';
        var body = svg.innerHTML;
        var data = header + body + footer;
        var svgDataUrl = prefix + btoa(data);
        if (fileName === null) {
            return svgDataUrl;
        }
        else {
            this.downloadImg(svgDataUrl, fileName + '.' + 'svg');
            return null;
        }
    };
    ImageEditor.prototype.toBlobFn = function (fileName, type) {
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var proxy = this;
        showSpinner(this.element);
        this.element.style.opacity = '0.5';
        var tempCanvas = this.exportChangesToCanvas();
        // eslint-disable-next-line @typescript-eslint/tslint/config
        tempCanvas.toBlob(function (blob) {
            var blobUrl = URL.createObjectURL(blob);
            proxy.downloadImg(blobUrl, fileName + '.' + type);
            hideSpinner(proxy.element);
            proxy.element.style.opacity = '1';
        }, 'image/png');
    };
    ImageEditor.prototype.exportChangesToCanvas = function () {
        var ratio = this.calcRatio();
        var tempContextFilter = this.lowerContext.filter;
        // Manipulating blur value
        if (this.lowerContext.filter !== 'none') {
            var splitWords = this.lowerContext.filter.split(' ');
            var value = parseFloat(splitWords[5].split('(')[1]);
            value *= ((ratio.width + ratio.height) / 2);
            splitWords[5] = 'blur(' + value + 'px)';
            this.lowerContext.filter = splitWords.join(' ');
        }
        var maxDimension;
        var tempCanvas = this.createElement('canvas', {
            id: this.element.id + '_tempCanvas', attrs: { name: 'canvasImage' }
        });
        var tempContext = tempCanvas.getContext('2d');
        tempContext.filter = this.lowerContext.filter;
        if (isNullOrUndefined(this.currSelectionPoint)) {
            tempCanvas.width = this.baseImg.width;
            tempCanvas.height = this.baseImg.height;
            maxDimension = this.calcMaxDimension(this.baseImg.width, this.baseImg.height);
            tempCanvas.style.maxWidth = maxDimension.width + 'px';
            tempCanvas.style.maxHeight = maxDimension.height + 'px';
            tempContext.filter = this.lowerContext.filter;
            var temp = this.lowerContext.filter;
            this.updateBrightnessFilter();
            tempContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, 0, 0, this.baseImg.width, this.baseImg.height);
            this.lowerContext.filter = temp;
        }
        else {
            tempCanvas.width = this.destWidth;
            tempCanvas.height = this.destHeight;
            tempContext.filter = this.lowerContext.filter;
            var temp = this.lowerContext.filter;
            this.updateBrightnessFilter();
            tempContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, 0, 0, this.destWidth, this.destHeight);
            this.lowerContext.filter = temp;
        }
        if (this.degree !== 0 || this.currFlipState !== '') {
            this.updateSaveContext(tempContext);
            this.exportTransformedImage(tempContext);
        }
        if (this.objColl.length > 0) {
            var temp = tempContext.filter;
            tempContext.filter = 'none';
            var tempObjColl = extend([], this.objColl, [], true);
            for (var i = 0; i < this.objColl.length; i++) {
                // Subtracting destination left and top points
                this.objColl[i].activePoint.startX -= this.destLeft;
                this.objColl[i].activePoint.startY -= this.destTop;
                this.objColl[i].activePoint.endX -= this.destLeft;
                this.objColl[i].activePoint.endY -= this.destTop;
                this.objColl[i].activePoint.width = this.objColl[i].activePoint.endX -
                    this.objColl[i].activePoint.startX;
                this.objColl[i].activePoint.height = this.objColl[i].activePoint.endY -
                    this.objColl[i].activePoint.startY;
                // Manipulating points
                if (isNullOrUndefined(this.currSelectionPoint)) {
                    this.objColl[i].activePoint.startX *= ratio.width;
                    this.objColl[i].activePoint.startY *= ratio.height;
                    this.objColl[i].activePoint.endX *= ratio.width;
                    this.objColl[i].activePoint.endY *= ratio.height;
                    this.objColl[i].activePoint.width = this.objColl[i].activePoint.endX -
                        this.objColl[i].activePoint.startX;
                    this.objColl[i].activePoint.height = this.objColl[i].activePoint.endY -
                        this.objColl[i].activePoint.startY;
                    this.objColl[i].strokeSettings.strokeWidth *= ((ratio.width + ratio.height) / 2);
                    if (this.objColl[i].shape === 'text') {
                        this.objColl[i].textSettings.fontSize *= ((ratio.width + ratio.height) / 2);
                    }
                }
                this.drawObject('saveContext', this.objColl[i], null, null, true, tempContext);
            }
            tempContext.filter = temp;
            this.refreshActiveObj();
            this.objColl = tempObjColl;
        }
        if (this.freehandCounter > 0) {
            // eslint-disable-next-line
            var tempPointColl = extend({}, this.pointColl, {}, true);
            for (var n = 0; n < this.freehandCounter; n++) {
                this.points = extend([], this.pointColl[n].points, []);
                this.pointCounter = 0;
                var len = this.points.length;
                if (isNullOrUndefined(this.currSelectionPoint)) {
                    this.pointColl[n].strokeWidth *= ((ratio.width + ratio.height) / 2);
                    for (var l = 0; l < len; l++) {
                        this.points[l].x = (this.points[l].x - this.destLeft) * ratio.width;
                        this.points[l].y = (this.points[l].y - this.destTop) * ratio.height;
                    }
                }
                else {
                    for (var l = 0; l < len; l++) {
                        this.points[l].x -= this.destLeft;
                        this.points[l].y -= this.destTop;
                    }
                }
            }
            this.freehandRedraw(tempContext);
            this.pointColl = tempPointColl;
        }
        if (this.isCircleCrop) {
            this.cropCircle(tempContext, true);
        }
        this.lowerContext.filter = tempContextFilter;
        return tempCanvas;
    };
    ImageEditor.prototype.exportTransformedImage = function (tempContext) {
        var degree = this.degree;
        for (var i = 0; i < this.rotateFlipColl.length; i++) {
            if (typeof (this.rotateFlipColl[i]) === 'number') {
                this.exportRotate(tempContext, this.rotateFlipColl[i]);
            }
            else if (this.rotateFlipColl[i] === 'horizontal') {
                this.exportHorizontalFlip(tempContext);
            }
            else if (this.rotateFlipColl[i] === 'vertical') {
                this.exportVerticalFlip(tempContext);
            }
        }
        this.degree = degree;
    };
    ImageEditor.prototype.exportRotate = function (tempContext, degree) {
        if (isNullOrUndefined(this.currSelectionPoint)) {
            this.setMaximumDimension(this.degree, tempContext.canvas);
            tempContext.translate(tempContext.canvas.width / 2, tempContext.canvas.height / 2);
            tempContext.rotate(Math.PI / 180 * degree);
            tempContext.drawImage(this.inMemoryCanvas, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, -tempContext.canvas.height / 2, -tempContext.canvas.width / 2, tempContext.canvas.height, tempContext.canvas.width);
        }
        else {
            tempContext.translate(tempContext.canvas.width / 2, tempContext.canvas.height / 2);
            tempContext.rotate(Math.PI / 180 * degree);
            tempContext.drawImage(this.inMemoryCanvas, -tempContext.canvas.height / 2, -tempContext.canvas.width / 2, tempContext.canvas.height, tempContext.canvas.width);
        }
        this.updateSaveContext(tempContext);
    };
    ImageEditor.prototype.exportHorizontalFlip = function (tempContext) {
        tempContext.translate(tempContext.canvas.width, 0);
        tempContext.scale(-1, 1);
        tempContext.drawImage(this.inMemoryCanvas, 0, 0);
        this.updateSaveContext(tempContext);
    };
    ImageEditor.prototype.exportVerticalFlip = function (tempContext) {
        tempContext.translate(0, tempContext.canvas.height);
        tempContext.scale(1, -1);
        tempContext.drawImage(this.inMemoryCanvas, 0, 0);
        this.updateSaveContext(tempContext);
    };
    ImageEditor.prototype.updateSaveContext = function (tempContext) {
        tempContext.setTransform(1, 0, 0, 1, 0, 0);
        var imageData = tempContext.getImageData(0, 0, tempContext.canvas.width, tempContext.canvas.height);
        this.inMemoryCanvas.width = imageData.width;
        this.inMemoryCanvas.height = imageData.height;
        this.inMemoryContext.putImageData(imageData, 0, 0);
    };
    ImageEditor.prototype.addLetter = function (letter) {
        if (this.textArea.style.display === 'none' && (this.currObjType.isText || this.activeObj.shape === 'text')) {
            if (letter === 'Backspace') {
                this.keyHistory = this.keyHistory.slice(0, -1);
            }
            else {
                this.keyHistory += letter;
            }
            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
            this.updateFontStyles();
            var width = this.upperContext.measureText(this.keyHistory + this.tempKeyHistory).width
                + this.activeObj.textSettings.fontSize * 0.5;
            var height = this.activeObj.textSettings.fontSize + this.activeObj.textSettings.fontSize * 0.25;
            this.upperContext.fillText(this.keyHistory + this.tempKeyHistory, this.activeObj.activePoint.startX, this.activeObj.activePoint.startY +
                this.activeObj.textSettings.fontSize);
            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
            this.currObjType.isText = true;
            this.setActivePoint(width, height);
        }
    };
    ImageEditor.prototype.updateFontStyles = function (isTextBox) {
        this.upperContext.strokeStyle = this.activeObj.strokeSettings.strokeColor;
        this.upperContext.fillStyle = this.activeObj.strokeSettings.strokeColor;
        var textStyle = '';
        if (this.activeObj.textSettings.bold) {
            textStyle = 'bold ';
        }
        if (this.activeObj.textSettings.italic) {
            textStyle = 'italic ';
        }
        if (this.activeObj.textSettings.bold && this.activeObj.textSettings.italic) {
            textStyle = 'italic bold ';
        }
        var fontSize = isTextBox ? parseFloat(this.textArea.style.fontSize) : this.activeObj.textSettings.fontSize;
        var fontFamily = this.textArea.style.display === 'block' ? this.textArea.style.fontFamily : this.activeObj.textSettings.fontFamily;
        this.upperContext.font = textStyle + fontSize + 'px' + ' ' + fontFamily;
    };
    ImageEditor.prototype.textFlipDegree = function (canvasDraw, startX, startY) {
        var rows = this.activeObj.keyHistory.split('\n');
        var height = this.activeObj.textSettings.fontSize;
        var lineHeight = ((height * rows.length) - (this.activeObj.textSettings.fontSize * rows.length)) / rows.length;
        var yPoint = (this.activeObj.textSettings.fontSize * 0.85) + lineHeight;
        for (var i = 0; i < rows.length; i++) {
            var text = rows[i];
            if (i > 0) {
                if (i === 1) {
                    yPoint -= (this.activeObj.textSettings.fontSize * 0.85);
                }
                yPoint += this.activeObj.textSettings.fontSize + this.activeObj.textSettings.fontSize * 0.15;
            }
            canvasDraw.fillText(text, startX + this.activeObj.textSettings.fontSize * 0.15, startY +
                yPoint + (i > 0 ? this.activeObj.textSettings.fontSize * 0.25 : -this.activeObj.textSettings.fontSize * 0.35));
        }
    };
    ImageEditor.prototype.rotateText = function (canvasDraw) {
        var startX = this.activeObj.activePoint.startX;
        var startY = this.activeObj.activePoint.startY;
        var degree;
        if (this.activeObj.shapeDegree === 0) {
            degree = this.degree;
        }
        else {
            degree = this.degree - this.activeObj.shapeDegree;
        }
        if (degree < 0) {
            degree = 360 + degree;
        }
        if (degree % 360 === 0 && (this.degree !== -360 || this.currFlipState === '')) {
            startX = this.activeObj.activePoint.startX + this.activeObj.textSettings.fontSize * 0.15;
            startY = this.activeObj.activePoint.startY + (this.activeObj.activePoint.endY - this.activeObj.activePoint.startY);
            var rows = this.activeObj.keyHistory.split('\n');
            for (var i = 0; i < rows.length; i++) {
                startY = this.activeObj.activePoint.startY + (i * this.activeObj.textSettings.fontSize +
                    this.activeObj.textSettings.fontSize * 0.25);
                canvasDraw.fillText(rows[i], startX, startY);
            }
        }
        else if (degree % 90 === 0 && degree % 180 !== 0) {
            canvasDraw.translate(this.lowerCanvas.width / 2, this.lowerCanvas.height / 2);
            canvasDraw.rotate(Math.PI / 180 * degree);
            canvasDraw.translate(-this.lowerCanvas.height / 2, -this.lowerCanvas.width / 2);
            if (degree % 90 === 0 && degree % 270 !== 0) {
                startY = (this.lowerCanvas.width - this.activeObj.activePoint.endX) + this.activeObj.textSettings.fontSize * 0.4;
                startX = this.activeObj.activePoint.startY;
            }
            else if (degree % 270 === 0) {
                startX = this.lowerCanvas.height - this.activeObj.activePoint.endY;
                startY = this.activeObj.activePoint.startX + this.activeObj.textSettings.fontSize * 0.4;
            }
            this.textFlipDegree(canvasDraw, startX, startY);
            canvasDraw.translate(this.lowerCanvas.height / 2, this.lowerCanvas.width / 2);
            canvasDraw.rotate(Math.PI / 180 * -degree);
            canvasDraw.translate(-this.lowerCanvas.width / 2, -this.lowerCanvas.height / 2);
        }
        else {
            canvasDraw.translate(this.lowerCanvas.width / 2, this.lowerCanvas.height / 2);
            canvasDraw.rotate(Math.PI / 180 * degree);
            startX = this.lowerCanvas.width - this.activeObj.activePoint.endX;
            startY = (this.lowerCanvas.height - this.activeObj.activePoint.endY) + this.activeObj.textSettings.fontSize * 0.4;
            canvasDraw.translate(-this.lowerCanvas.width / 2, -this.lowerCanvas.height / 2);
            this.textFlipDegree(canvasDraw, startX, startY);
            canvasDraw.translate(this.lowerCanvas.width / 2, this.lowerCanvas.height / 2);
            canvasDraw.rotate(Math.PI / 180 * -degree);
            canvasDraw.translate(-this.lowerCanvas.width / 2, -this.lowerCanvas.height / 2);
        }
        if (this.degree === 360 || this.degree === -360) {
            this.degree = 0;
        }
    };
    ImageEditor.prototype.redrawObj = function (degree) {
        if (this.objColl.length > 0) {
            if (degree === 'horizontal' || degree === 'vertical' || degree === 'Horizontal' || degree === 'Vertical' ||
                degree === 'horizontalVertical' || degree === 'verticalHorizontal') {
                this.updateCurrentActiveObjPoint(degree.toLowerCase());
            }
            else if (typeof (degree) === 'number') {
                this.updateCurrentActiveObjPoint(degree);
                var tempFilter = this.lowerContext.filter;
                this.lowerContext.filter = this.getDefaultFilter();
                for (var i = 0; i < this.objColl.length; i++) {
                    var splitWords = this.objColl[i].shape.split('-');
                    if (splitWords[0] !== 'crop') {
                        this.apply(this.objColl[i].shape, this.objColl[i]);
                    }
                }
                this.lowerContext.filter = tempFilter;
            }
        }
    };
    ImageEditor.prototype.updateCurrentActiveObjPoint = function (degree) {
        var currActObjIndex;
        for (var index = 0; index < this.objColl.length; index++) {
            if (this.activeObj.shape === this.objColl[index].shape &&
                this.activeObj.activePoint.startX === this.objColl[index].activePoint.startX &&
                this.activeObj.activePoint.startY === this.objColl[index].activePoint.startY &&
                this.activeObj.activePoint.endX === this.objColl[index].activePoint.endX &&
                this.activeObj.activePoint.endY === this.objColl[index].activePoint.endY &&
                this.activeObj.currIndex === this.objColl[index].currIndex) {
                currActObjIndex = index;
                break;
            }
        }
        if (degree === 'horizontal' || degree === 'vertical' || degree === 'Horizontal' || degree === 'Vertical' ||
            degree === 'horizontalvertical' || degree === 'verticalhorizontal') {
            if (degree === 'horizontal' || degree === 'Horizontal') {
                for (var i = 0; i < this.objColl.length; i++) {
                    if (this.objColl[i].shapeFlip !== this.currFlipState) {
                        if (this.objColl[i].activePoint.startX <= this.destLeft + (this.destWidth / 2)) {
                            this.objColl[i].activePoint.endX = (this.destLeft + this.destWidth) -
                                (this.objColl[i].activePoint.startX - this.destLeft);
                            this.objColl[i].activePoint.startX = this.objColl[i].activePoint.endX -
                                this.objColl[i].activePoint.width;
                            this.updateActiveObject(this.objColl[i].activePoint, this.objColl[i]);
                        }
                        else if (this.objColl[i].activePoint.startX >= this.destLeft + (this.destWidth / 2)) {
                            this.objColl[i].activePoint.startX = this.destLeft + (this.destLeft + this.destWidth -
                                this.objColl[i].activePoint.endX);
                            this.objColl[i].activePoint.endX = this.objColl[i].activePoint.startX +
                                this.objColl[i].activePoint.width;
                            this.updateActiveObject(this.objColl[i].activePoint, this.objColl[i]);
                        }
                        this.objColl[i].imageRatio = { startX: ((this.objColl[i].activePoint.startX -
                                this.destLeft) / this.destWidth),
                            startY: ((this.objColl[i].activePoint.startY - this.destTop) / this.destHeight),
                            endX: ((this.objColl[i].activePoint.endX - this.destLeft) / this.destWidth),
                            endY: ((this.objColl[i].activePoint.endY - this.destTop) / this.destHeight),
                            width: this.destWidth / this.objColl[i].activePoint.width,
                            height: this.destHeight / this.objColl[i].activePoint.height };
                        this.objColl[i].shapeFlip = this.currFlipState;
                    }
                }
            }
            else if (degree === 'vertical' || degree === 'Vertical') {
                for (var i = 0; i < this.objColl.length; i++) {
                    if (this.objColl[i].shapeFlip !== this.currFlipState) {
                        if (this.objColl[i].activePoint.startY <= this.destTop + (this.destHeight / 2)) {
                            this.objColl[i].activePoint.endY = (this.destTop + this.destHeight) -
                                (this.objColl[i].activePoint.startY - this.destTop);
                            this.objColl[i].activePoint.startY = this.objColl[i].activePoint.endY -
                                this.objColl[i].activePoint.height;
                            this.updateActiveObject(this.objColl[i].activePoint, this.objColl[i]);
                        }
                        else if (this.objColl[i].activePoint.startY >= this.lowerCanvas.height / 2) {
                            this.objColl[i].activePoint.startY = this.destTop + (this.destTop + this.destHeight -
                                this.objColl[i].activePoint.endY);
                            this.objColl[i].activePoint.endY = this.objColl[i].activePoint.startY +
                                this.objColl[i].activePoint.height;
                            this.updateActiveObject(this.objColl[i].activePoint, this.objColl[i]);
                        }
                        this.objColl[i].imageRatio = { startX: ((this.objColl[i].activePoint.startX -
                                this.destLeft) / this.destWidth),
                            startY: ((this.objColl[i].activePoint.startY - this.destTop) / this.destHeight),
                            endX: ((this.objColl[i].activePoint.endX - this.destLeft) / this.destWidth),
                            endY: ((this.objColl[i].activePoint.endY - this.destTop) / this.destHeight),
                            width: this.destWidth / this.objColl[i].activePoint.width,
                            height: this.destHeight / this.objColl[i].activePoint.height };
                        this.objColl[i].shapeFlip = this.currFlipState;
                    }
                }
            }
            else if (degree === 'verticalhorizontal' || degree === 'horizontalvertical') {
                for (var i = 0; i < this.objColl.length; i++) {
                    if (this.objColl[i].shapeFlip !== this.currFlipState) {
                        if (this.objColl[i].activePoint.startX <= this.destLeft + (this.destWidth / 2)) {
                            this.objColl[i].activePoint.endX = (this.destLeft + this.destWidth) -
                                (this.objColl[i].activePoint.startX - this.destLeft);
                            this.objColl[i].activePoint.startX = this.objColl[i].activePoint.endX -
                                this.objColl[i].activePoint.width;
                            this.updateActiveObject(this.objColl[i].activePoint, this.objColl[i]);
                        }
                        else if (this.objColl[i].activePoint.startX >= this.destLeft + (this.destWidth / 2)) {
                            this.objColl[i].activePoint.startX = this.destLeft + (this.destLeft + this.destWidth -
                                this.objColl[i].activePoint.endX);
                            this.objColl[i].activePoint.endX = this.objColl[i].activePoint.startX +
                                this.objColl[i].activePoint.width;
                            this.updateActiveObject(this.objColl[i].activePoint, this.objColl[i]);
                        }
                        if (this.objColl[i].activePoint.startY <= this.destTop + (this.destHeight / 2)) {
                            this.objColl[i].activePoint.endY = (this.destTop + this.destHeight) -
                                (this.objColl[i].activePoint.startY - this.destTop);
                            this.objColl[i].activePoint.startY = this.objColl[i].activePoint.endY -
                                this.objColl[i].activePoint.height;
                            this.updateActiveObject(this.objColl[i].activePoint, this.objColl[i]);
                        }
                        else if (this.objColl[i].activePoint.startY >= this.lowerCanvas.height / 2) {
                            this.objColl[i].activePoint.startY = this.destTop + (this.destTop + this.destHeight -
                                this.objColl[i].activePoint.endY);
                            this.objColl[i].activePoint.endY = this.objColl[i].activePoint.startY +
                                this.objColl[i].activePoint.height;
                            this.updateActiveObject(this.objColl[i].activePoint, this.objColl[i]);
                        }
                        this.objColl[i].imageRatio = { startX: ((this.objColl[i].activePoint.startX -
                                this.destLeft) / this.destWidth),
                            startY: ((this.objColl[i].activePoint.startY - this.destTop) / this.destHeight),
                            endX: ((this.objColl[i].activePoint.endX - this.destLeft) / this.destWidth),
                            endY: ((this.objColl[i].activePoint.endY - this.destTop) / this.destHeight),
                            width: this.destWidth / this.objColl[i].activePoint.width,
                            height: this.destHeight / this.objColl[i].activePoint.height };
                        this.objColl[i].shapeFlip = this.currFlipState;
                    }
                }
            }
            if (currActObjIndex !== undefined) {
                this.activeObj = extend({}, this.objColl[currActObjIndex], {}, true);
            }
        }
        else if (degree === 90) {
            this.rotateObjColl();
        }
        else if (degree === -90) {
            for (var i = 0; i < 3; i++) {
                this.rotateObjColl();
            }
        }
        else if (typeof (degree) === 'number') {
            if (degree > 0) {
                this.rotateObjColl();
            }
            else {
                for (var i = 0; i < 3; i++) {
                    this.rotateObjColl();
                }
            }
        }
    };
    ImageEditor.prototype.rotateObjColl = function () {
        for (var i = 0; i < this.objColl.length; i++) {
            this.objColl[i].activePoint.startY = this.destTop + (this.destHeight * this.objColl[i].imageRatio.startX);
            this.objColl[i].activePoint.endY = this.destTop + (this.destHeight * this.objColl[i].imageRatio.endX);
            this.objColl[i].activePoint.startX = (this.destLeft + this.destWidth) -
                (this.destWidth * this.objColl[i].imageRatio.endY);
            this.objColl[i].activePoint.endX = (this.destLeft + this.destWidth) -
                (this.destWidth * this.objColl[i].imageRatio.startY);
            this.objColl[i].activePoint.width = this.objColl[i].activePoint.endX -
                this.objColl[i].activePoint.startX;
            this.objColl[i].activePoint.height = this.objColl[i].activePoint.endY -
                this.objColl[i].activePoint.startY;
            this.updateFontSize(this.objColl[i]);
        }
        for (var i = 0; i < this.objColl.length; i++) {
            this.updateActiveObject(this.objColl[i].activePoint, this.objColl[i]);
        }
        // Update current image ratio for all objects
        for (var i = 0; i < this.objColl.length; i++) {
            this.objColl[i].imageRatio = { startX: ((this.objColl[i].activePoint.startX -
                    this.destLeft) / this.destWidth),
                startY: ((this.objColl[i].activePoint.startY - this.destTop) / this.destHeight),
                endX: ((this.objColl[i].activePoint.endX - this.destLeft) / this.destWidth),
                endY: ((this.objColl[i].activePoint.endY - this.destTop) / this.destHeight),
                width: this.destWidth / this.objColl[i].activePoint.width,
                height: this.destHeight / this.objColl[i].activePoint.height };
        }
    };
    ImageEditor.prototype.redrawShape = function (obj) {
        for (var i = 0; i < this.objColl.length; i++) {
            if (JSON.stringify(obj) === JSON.stringify(this.objColl[i])) {
                this.objColl.splice(i, 1);
                break;
            }
        }
        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
        if (this.isPreventDragging) {
            if (this.activeObj.activePoint.startX > this.destLeft) {
                this.isPreventDragging = false;
            }
            this.drawObject('duplicate', null, null, null, true);
        }
        else {
            this.drawObject('duplicate', null, null, null, true);
        }
    };
    ImageEditor.prototype.applyActObj = function () {
        var isActObj = false;
        if (this.activeObj.shape !== undefined && this.activeObj.shape === 'text' && this.activeObj.keyHistory === '') {
            this.refreshActiveObj();
            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
        }
        else {
            var splitWords = void 0;
            var isCropSelection = false;
            if (this.activeObj.shape !== undefined) {
                splitWords = this.activeObj.shape.split('-');
            }
            if (splitWords === undefined && this.currObjType.isCustomCrop) {
                isCropSelection = true;
            }
            else if (splitWords !== undefined && splitWords[0] === 'crop') {
                isCropSelection = true;
            }
            if (!isNullOrUndefined(this.activeObj.shape) && !isCropSelection) {
                for (var i = 0; i < this.objColl.length; i++) {
                    if (JSON.stringify(this.activeObj) === JSON.stringify(this.objColl[i])) {
                        isActObj = true;
                        break;
                    }
                }
                if (!isActObj) {
                    if (isNullOrUndefined(this.activeObj.currIndex)) {
                        this.activeObj.currIndex = 'shape_' + (this.objColl.length + 1);
                    }
                    this.updateImageRatioForActObj();
                    var splitWords_3 = this.activeObj.currIndex.split('_');
                    var tempObjColl = this.objColl.splice(0, parseInt(splitWords_3[1], 10) - 1);
                    tempObjColl.push(extend({}, this.activeObj, {}, true));
                    for (var i = 0; i < this.objColl.length; i++) {
                        tempObjColl.push(this.objColl[i]);
                    }
                    this.objColl = tempObjColl;
                    tempObjColl = [];
                    this.refreshActiveObj();
                    this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
                    this.redrawImgWithObj();
                    //this.zoomFreehandDrawColl();
                    this.clearOuterCanvas(this.lowerContext);
                    this.clearOuterCanvas(this.upperContext);
                    this.currObjType.shape = '';
                    this.refreshActiveObj();
                    if (this.isCircleCrop) {
                        this.cropCircle(this.lowerContext);
                    }
                }
            }
        }
    };
    ImageEditor.prototype.apply = function (shape, obj, canvas) {
        if (!this.disabled) {
            if ((this.togglePen) && !this.currObjType.isCustomCrop) {
                var destLeft = this.destLeft;
                var destTop = this.destTop;
                var destWidth = this.destWidth;
                var destHeight = this.destHeight;
                this.callUpdateCurrentTransformedState();
                var temp = this.lowerContext.filter;
                this.lowerContext.filter = 'none';
                this.togglePen = false;
                this.iterateObjColl();
                this.freehandRedraw(this.lowerContext);
                this.togglePen = false;
                if (this.isCircleCrop || (!isNullOrUndefined(this.currSelectionPoint) && this.currSelectionPoint.shape === 'crop-circle')) {
                    this.cropCircle(this.lowerContext);
                }
                this.destLeft = destLeft;
                this.destTop = destTop;
                this.destWidth = destWidth;
                this.destHeight = destHeight;
                this.lowerContext.filter = temp;
            }
            else {
                canvas = canvas ? canvas : 'original';
                this.currObjType.shape = shape !== undefined ? shape : this.currObjType.shape;
                if (this.currObjType.shape !== '') {
                    this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                    this.drawObject(canvas, obj);
                    this.activeObj.shape = this.currObjType.shape.toLowerCase();
                    if (!shape && this.currObjType.shape !== '' && !this.currObjType.isCustomCrop) {
                        this.objColl.push(extend({}, this.activeObj, {}, true));
                    }
                    this.keyHistory = '';
                }
            }
        }
    };
    ImageEditor.prototype.setCenterPoints = function (text, width, height) {
        var renderWidth;
        var renderHeight;
        if (text && width && height) {
            renderWidth = width;
            renderHeight = height;
        }
        else {
            renderWidth = this.activeObj.activePoint.width;
            renderHeight = this.activeObj.activePoint.height;
        }
        this.activeObj.activePoint.startX = (this.lowerCanvas.width / 2) - renderWidth / 2;
        this.activeObj.activePoint.startY = (this.lowerCanvas.height / 2) - renderHeight / 2;
        this.activeObj.activePoint.endX = (this.lowerCanvas.width / 2) + renderWidth / 2;
        this.activeObj.activePoint.endY = (this.lowerCanvas.height / 2) + renderHeight / 2;
        if (text && width && height) {
            this.textStartPoints.x = this.activeObj.activePoint.startX;
            this.textStartPoints.y = this.activeObj.activePoint.startY;
        }
    };
    ImageEditor.prototype.drawShape = function (type, strokeWidth, strokeColor, fillColor, start, width, height) {
        if (!this.disabled && this.isImageLoaded) {
            this.redrawActObj();
            var objColl = extend([], this.objColl, [], true);
            this.togglePen = false;
            this.keyHistory = '';
            this.upperCanvas.style.display = 'block';
            this.refreshActiveObj();
            this.currObjType.shape = type;
            if (this.currObjType.shape.toLowerCase() !== 'freehanddraw' && this.currObjType.shape.toLowerCase() !== '') {
                this.activeObj.shape = this.currObjType.shape.toLowerCase();
                this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                if (isNullOrUndefined(this.activeObj.strokeSettings)) {
                    this.activeObj.strokeSettings = this.strokeSettings;
                }
                this.activeObj.strokeSettings.strokeWidth = strokeWidth ? strokeWidth : this.activeObj.strokeSettings.strokeWidth;
                this.activeObj.strokeSettings.strokeColor = strokeColor ? strokeColor : this.activeObj.strokeSettings.strokeColor;
                this.activeObj.strokeSettings.fillColor = fillColor ? fillColor : this.activeObj.strokeSettings.fillColor;
                var tempWidth = this.destWidth > 100 ? 100 : this.destWidth / 2;
                var tempHeight = this.destHeight > 100 ? 100 : this.destHeight / 2;
                this.activeObj.activePoint.width = tempWidth;
                this.activeObj.activePoint.height = tempHeight;
                if (this.currObjType.shape.toLowerCase() === 'line') {
                    this.activeObj.lineDraw = 'horizontal';
                    this.activeObj.activePoint.height /= 2;
                }
                else if (this.currObjType.shape.toLowerCase() === 'rectangle') {
                    this.activeObj.activePoint.width += this.activeObj.activePoint.width / 2;
                }
                if (this.currObjType.shape.toLowerCase() === 'ellipse' && width) {
                    this.activeObj.activePoint.width = 2 * width;
                    this.activeObj.activePoint.height = 2 * height;
                }
                if (width && height) {
                    this.activeObj.activePoint.width = width;
                    this.activeObj.activePoint.height = height;
                }
                if (!isNullOrUndefined(start)) {
                    this.activeObj.activePoint.startX = start.x;
                    this.activeObj.activePoint.startY = start.y;
                    this.activeObj.activePoint.endX = this.activeObj.activePoint.startX + this.activeObj.activePoint.width;
                    this.activeObj.activePoint.endY = this.activeObj.activePoint.startY + this.activeObj.activePoint.height;
                }
                else {
                    this.setCenterPoints();
                }
                this.currObjType.isDragging = this.currObjType.isCustomCrop = false;
                this.activeObj.shapeDegree = this.degree;
                this.activeObj.shapeFlip = this.currFlipState;
                this.activeObj.flipObjColl = [];
                var shapeSettings = this.updatePreviousShapeSettings();
                var shapeChangingArgs = { action: 'insert', previousShapeSettings: shapeSettings,
                    currentShapeSettings: shapeSettings };
                this.trigger('shapeChanging', shapeChangingArgs);
                this.updateShapeChangeEventArgs(shapeChangingArgs.currentShapeSettings);
                this.drawObject('duplicate');
                this.isShapeInserted = true;
                this.updateUndoRedoObj(objColl);
                this.refreshToolbar('shapes');
            }
        }
    };
    ImageEditor.prototype.drawShapeText = function (text, fontFamily, fontSize, bold, italic, strokeColor, x, y) {
        if (!this.disabled && this.isImageLoaded) {
            if (this.currObjType.shape === 'freehanddraw') {
                this.apply();
                this.upperCanvas.style.cursor = 'default';
                this.currObjType.shape = '';
            }
            this.togglePen = false;
            this.redrawActObj();
            var prevObj = this.getCurrentObj();
            prevObj.objColl = extend([], this.objColl, [], true);
            prevObj.pointColl = extend([], this.pointColl, [], true);
            prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
            this.keyHistory = '';
            this.refreshActiveObj();
            this.activeObj.shape = 'text';
            this.currObjType.isCustomCrop = false;
            this.currObjType.isText = this.currObjType.isInitialText = true;
            this.upperCanvas.style.display = 'block';
            this.currObjType.shape = this.activeObj.shape = 'text';
            if (isNullOrUndefined(this.activeObj.textSettings)) {
                this.activeObj.textSettings = this.textSettings;
            }
            if (isNullOrUndefined(this.activeObj.strokeSettings)) {
                this.activeObj.strokeSettings = this.strokeSettings;
            }
            this.activeObj.strokeSettings.strokeColor = strokeColor ? strokeColor : this.activeObj.strokeSettings.strokeColor;
            this.activeObj.textSettings.text = text ? text : this.activeObj.textSettings.text;
            this.activeObj.textSettings.fontFamily = fontFamily ? fontFamily : this.activeObj.textSettings.fontFamily;
            this.activeObj.textSettings.text = text ? text : this.activeObj.textSettings.text;
            this.activeObj.textSettings.fontFamily = fontFamily ? fontFamily : this.activeObj.textSettings.fontFamily;
            this.activeObj.textSettings.fontSize = fontSize ? fontSize : this.activeObj.textSettings.fontSize;
            this.activeObj.textSettings.bold = bold ? bold : this.activeObj.textSettings.bold;
            this.activeObj.textSettings.italic = italic ? italic : this.activeObj.textSettings.italic;
            if (isNullOrUndefined(this.activeObj.textSettings.fontSize)) {
                if (this.lowerCanvas.width > this.lowerCanvas.height) {
                    this.activeObj.textSettings.fontSize = Math.floor((this.lowerCanvas.width / 20));
                }
                else {
                    this.activeObj.textSettings.fontSize = Math.floor((this.lowerCanvas.height / 20));
                }
                if (this.activeObj.textSettings.fontSize < 20) {
                    this.activeObj.textSettings.fontSize = 20;
                }
            }
            if (this.destWidth < 100) {
                this.activeObj.textSettings.fontSize = Math.floor((this.destWidth / 20));
            }
            else if (this.destHeight < 100) {
                this.activeObj.textSettings.fontSize = Math.floor((this.destHeight / 20));
            }
            this.activeObj.shapeDegree = this.degree;
            this.activeObj.shapeFlip = this.currFlipState;
            this.activeObj.flipObjColl = [];
            this.updateFontStyles();
            var width = this.upperContext.measureText(this.activeObj.textSettings.text).width +
                this.activeObj.textSettings.fontSize * 0.5;
            var height = this.activeObj.textSettings.fontSize + this.activeObj.textSettings.fontSize * 0.25;
            if (!isNullOrUndefined(x) && !isNullOrUndefined(y)) {
                this.activeObj.activePoint.startX = x;
                this.activeObj.activePoint.startY = y;
                this.activeObj.activePoint.endX = this.activeObj.activePoint.startX + width;
                this.activeObj.activePoint.endY = this.activeObj.activePoint.startY + height;
            }
            else {
                this.setCenterPoints(true, width, height);
            }
            var shapeSettings = this.updatePreviousShapeSettings();
            var shapeChangingArgs = { action: 'insert', previousShapeSettings: shapeSettings,
                currentShapeSettings: shapeSettings };
            this.trigger('shapeChanging', shapeChangingArgs);
            this.updateShapeChangeEventArgs(shapeChangingArgs.currentShapeSettings);
            this.addLetter(this.activeObj.textSettings.text);
            this.activeObj.textFlip = this.currFlipState;
            this.updateFontRatio(this.activeObj);
            this.objColl.push(this.activeObj);
            var prevCropObj = extend({}, this.cropObj, {}, true);
            this.updateUndoRedoColl('shapeTransform', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
            this.redrawShape(this.objColl[this.objColl.length - 1]);
            this.isShapeInserted = true;
            this.refreshToolbar('text');
        }
    };
    ImageEditor.prototype.updateShapeChangeEventArgs = function (shapeSettings) {
        this.activeObj.currIndex = shapeSettings.id;
        this.activeObj.activePoint.startX = shapeSettings.startX;
        this.activeObj.activePoint.startY = shapeSettings.startY;
        this.activeObj.activePoint.width = shapeSettings.width;
        this.activeObj.activePoint.height = shapeSettings.height;
        this.activeObj.strokeSettings.strokeColor = shapeSettings.strokeColor;
        this.activeObj.strokeSettings.fillColor = shapeSettings.fillColor;
        this.activeObj.shape === 'ellipse' ? this.activeObj.activePoint.width = shapeSettings.radius / 2 : null;
        this.activeObj.shape === 'line' ? this.activeObj.activePoint.width = shapeSettings.length : null;
        this.activeObj.shape === 'text' ? this.activeObj.keyHistory = shapeSettings.text : null;
        this.activeObj.shape === 'text' ? this.activeObj.textSettings.fontSize = shapeSettings.fontSize : null;
        this.activeObj.shape === 'text' ? this.activeObj.strokeSettings.strokeColor = shapeSettings.color : null;
        if (this.activeObj.shape === 'text' && !isNullOrUndefined(this.activeObj.textSettings)) {
            for (var i = 0; i < shapeSettings.fontStyle.length; i++) {
                if (shapeSettings.fontStyle[i] === 'bold') {
                    this.activeObj.textSettings.bold = true;
                }
                else if (shapeSettings.fontStyle[i] === 'italic') {
                    this.activeObj.textSettings.italic = true;
                }
                else if (shapeSettings.fontStyle[i] === 'underline') {
                    this.activeObj.textSettings.underline = true;
                }
            }
        }
    };
    ImageEditor.prototype.getObjDetails = function (obj) {
        var shapeDetails = {};
        shapeDetails.id = obj.currIndex;
        shapeDetails.type = this.toPascalCase(obj.shape);
        shapeDetails.startX = obj.activePoint.startX;
        shapeDetails.startY = obj.activePoint.startY;
        if (obj.shape === 'rectangle') {
            shapeDetails.width = obj.activePoint.width;
            shapeDetails.height = obj.activePoint.height;
            shapeDetails.strokeColor = obj.strokeSettings.strokeColor;
            shapeDetails.fillColor = obj.strokeSettings.fillColor;
            shapeDetails.strokeWidth = obj.strokeSettings.strokeWidth;
        }
        else if (obj.shape === 'ellipse') {
            shapeDetails.radius = obj.activePoint.width / 2;
            shapeDetails.strokeColor = obj.strokeSettings.strokeColor;
            shapeDetails.fillColor = obj.strokeSettings.fillColor;
            shapeDetails.strokeWidth = obj.strokeSettings.strokeWidth;
        }
        else if (obj.shape === 'line') {
            shapeDetails.length = obj.activePoint.width;
            shapeDetails.strokeColor = obj.strokeSettings.strokeColor;
            shapeDetails.strokeWidth = obj.strokeSettings.strokeWidth;
        }
        else if (obj.shape === 'text') {
            shapeDetails.text = obj.keyHistory;
            shapeDetails.fontSize = obj.textSettings.fontSize;
            shapeDetails.color = obj.strokeSettings.strokeColor;
            shapeDetails.fontStyle = [];
            if (obj.textSettings.bold) {
                shapeDetails.fontStyle.push('bold');
            }
            if (obj.textSettings.italic) {
                shapeDetails.fontStyle.push('italic');
            }
        }
        return shapeDetails;
    };
    ImageEditor.prototype.getFreehandDrawDetails = function (index) {
        var shapeDetails = {};
        shapeDetails.id = this.pointColl[index].id;
        shapeDetails.type = 'FreehandDraw';
        shapeDetails.points = extend([], this.pointColl[index].points);
        shapeDetails.strokeColor = this.pointColl[index].strokeColor;
        shapeDetails.strokeWidth = this.pointColl[index].strokeWidth;
        return shapeDetails;
    };
    ImageEditor.prototype.isPointsInRange = function (x, y) {
        var inRange = false;
        if (x >= 0 && y >= 0 && x <= this.lowerCanvas.width && y <= this.lowerCanvas.width) {
            inRange = true;
        }
        return inRange;
    };
    ImageEditor.prototype.clearActObj = function () {
        if (this.textArea.style.display === 'none') {
            this.refreshActiveObj();
            this.applyActObj();
            this.refreshActiveObj();
            this.currObjType.isCustomCrop = false;
        }
    };
    ImageEditor.prototype.applyPenDraw = function () {
        if (this.currObjType.shape === 'freehanddraw') {
            this.apply();
            this.upperCanvas.style.cursor = 'default';
            this.currObjType.shape = '';
        }
        this.clearActObj();
    };
    ImageEditor.prototype.drawRotatedImage = function (degree) {
        if (degree === 0) {
            this.degree = 0;
        }
        else {
            this.degree += degree;
        }
        if (this.degree === 360 || this.degree === -360) {
            this.degree = 0;
        }
        this.setDestinationPoints();
        var tempObjColl = extend([], this.objColl, [], true);
        var tempActiveObj = extend({}, this.activeObj, {}, true);
        this.objColl = [];
        this.refreshActiveObj();
        if (!this.isReverseRotate) {
            this.updateCurrentTransformedState('initial');
        }
        this.rotateDegree(degree);
        if (!this.isReverseRotate) {
            this.updateCurrentTransformedState('reverse');
            this.rotateFlipColl.push(degree);
        }
        if (this.rotateFlipColl.length === 1) {
            this.setClientTransformedDimension();
        }
        this.objColl = extend([], tempObjColl, [], true);
        this.activeObj = extend({}, tempActiveObj, {}, true);
        if (this.isCircleCrop) {
            this.cropCircle(this.lowerContext);
        }
        this.redrawObj(degree);
        this.refreshActiveObj();
        if (degree > 0) {
            this.rotateFreehandDrawColl();
        }
        else {
            for (var i = 0; i < 3; i++) {
                this.rotateFreehandDrawColl();
            }
        }
        this.freehandRedraw(this.lowerContext);
        this.updateCurrSelectionPoint(degree);
    };
    ImageEditor.prototype.updateCurrSelectionPoint = function (degree) {
        if (!isNullOrUndefined(this.currSelectionPoint) && !isNullOrUndefined(this.currDestinationPoint)) {
            var activeObj = extend({}, this.activeObj, {}, true);
            var objColl = extend([], this.objColl, [], true);
            var srcPoints = { startX: this.srcLeft, startY: this.srcTop, width: this.srcWidth, height: this.srcHeight };
            var destPoints = { startX: this.destLeft, startY: this.destTop, width: this.destWidth, height: this.destHeight };
            this.objColl = [];
            this.objColl.push(extend({}, this.currSelectionPoint, {}, true));
            this.srcLeft = 0;
            this.srcTop = 0;
            this.srcWidth = this.baseImg.width;
            this.srcHeight = this.baseImg.height;
            this.destLeft = this.currDestinationPoint.startX;
            this.destTop = this.currDestinationPoint.startY;
            this.destWidth = this.currDestinationPoint.width;
            this.destHeight = this.currDestinationPoint.height;
            if (typeof (degree) === 'number') {
                this.setDestinationPoints();
                this.setClientTransformedDimension();
            }
            this.objColl[0].shapeFlip = '';
            this.redrawObj(degree);
            this.currSelectionPoint = extend({}, this.objColl[0], {}, true);
            this.currDestinationPoint = { startX: this.destLeft, startY: this.destTop, width: this.destWidth, height: this.destHeight };
            this.objColl = objColl;
            this.activeObj = activeObj;
            this.srcLeft = srcPoints.startX;
            this.srcTop = srcPoints.startY;
            this.srcWidth = srcPoints.width;
            this.srcHeight = srcPoints.height;
            this.destLeft = destPoints.startX;
            this.destTop = destPoints.startY;
            this.destWidth = destPoints.width;
            this.destHeight = destPoints.height;
        }
    };
    ImageEditor.prototype.setClientTransformedDimension = function (isPreventDimension) {
        if (this.degree % 90 === 0 && this.degree % 180 !== 0) {
            this.destLeft = (this.lowerCanvas.width - this.destHeight) / 2;
            this.destTop = (this.lowerCanvas.height - this.destWidth) / 2;
            var temp = this.destWidth;
            this.destWidth = this.destHeight;
            this.destHeight = temp;
        }
        else {
            if (isNullOrUndefined(isPreventDimension)) {
                this.destLeft = (this.lowerCanvas.width - this.destWidth) / 2;
                this.destTop = (this.lowerCanvas.height - this.destHeight) / 2;
            }
        }
    };
    ImageEditor.prototype.popForDefaultTransformedState = function (collection) {
        var rotateRight = 0;
        var rotateleft = 0;
        var horizontal = 0;
        var vertical = 0;
        for (var i = 0; i < collection.length; i++) {
            if (collection[i] === 90 || collection[i] === 'rotateRight') {
                rotateRight++;
                rotateleft = 0;
                horizontal = 0;
                vertical = 0;
                if (rotateRight === 4) {
                    collection.pop();
                    collection.pop();
                    collection.pop();
                    collection.pop();
                }
            }
            else if (collection[i] === -90 || collection[i] === 'rotateLeft') {
                rotateleft++;
                rotateRight = 0;
                horizontal = 0;
                vertical = 0;
                if (rotateleft === 4) {
                    collection.pop();
                    collection.pop();
                    collection.pop();
                    collection.pop();
                }
            }
            else if (collection[i] === 'horizontal' || collection[i] === 'horizontalflip') {
                horizontal++;
                rotateleft = 0;
                rotateRight = 0;
                vertical = 0;
                if (horizontal === 2) {
                    collection.pop();
                    collection.pop();
                }
            }
            else if (collection[i] === 'vertical' || collection[i] === 'verticalflip') {
                vertical++;
                horizontal = 0;
                rotateleft = 0;
                rotateRight = 0;
                if (vertical === 2) {
                    collection.pop();
                    collection.pop();
                }
            }
        }
        return collection;
    };
    ImageEditor.prototype.popForDefaultFlipState = function (collection) {
        for (var i = 0; i < collection.length; i++) {
            if (!isNullOrUndefined(collection[i + 3])) {
                if ((collection[i] === 'horizontal' || collection[i] === 'horizontalFlip')
                    && (collection[i + 1] === 'vertical' || collection[i] === 'verticalFlip') &&
                    (collection[i + 2] === 'horizontal' || collection[i] === 'horizontalFlip') &&
                    (collection[i + 3] === 'vertical' || collection[i] === 'verticalFlip')) {
                    collection.pop();
                    collection.pop();
                    collection.pop();
                    collection.pop();
                }
                else if ((collection[i] === 'vertical' || collection[i] === 'verticalFlip')
                    && (collection[i + 1] === 'horizontal' || collection[i + 1] === 'horizontalFlip') &&
                    (collection[i + 2] === 'vertical' || collection[i] === 'verticalFlip') &&
                    (collection[i + 3] === 'horizontal' || collection[i] === 'horizontalFlip')) {
                    collection.pop();
                    collection.pop();
                    collection.pop();
                    collection.pop();
                }
            }
        }
        return collection;
    };
    ImageEditor.prototype.popForDefaultRotateState = function (collection) {
        for (var i = 0; i < collection.length; i++) {
            if (!isNullOrUndefined(collection[i + 1])) {
                if ((collection[i] === 90 || collection[i] === 'rotateRight') &&
                    (collection[i + 1] === -90 || collection[i] === 'rotateLeft')) {
                    collection.pop();
                    collection.pop();
                }
                else if ((collection[i] === -90 || collection[i] === 'rotateLeft') &&
                    (collection[i + 1] === 90 || collection[i] === 'rotateRight')) {
                    collection.pop();
                    collection.pop();
                }
            }
        }
        return collection;
    };
    ImageEditor.prototype.alignRotateFlipColl = function (collection, isRotateFlipCollection) {
        collection = this.popForDefaultTransformedState(collection);
        collection = this.popForDefaultFlipState(collection);
        collection = this.popForDefaultRotateState(collection);
        if (collection.length === 0 && isRotateFlipCollection) {
            this.degree = 0;
            this.currFlipState = '';
        }
        return collection;
    };
    ImageEditor.prototype.updateFlipColl = function (direction) {
        if (this.flipColl.length === 0) {
            this.flipColl.push(direction);
        }
        else {
            if (this.flipColl[this.flipColl.length - 1] === 'direction') {
                this.flipColl.pop();
            }
            else {
                this.flipColl.push(direction);
            }
        }
        if (this.flipColl.length >= 4) {
            if (this.flipColl[this.flipColl.length - 1] === 'horizontal' && this.flipColl[this.flipColl.length - 2] === 'vertical' &&
                this.flipColl[this.flipColl.length - 3] === 'horizontal' && this.flipColl[this.flipColl.length - 4] === 'vertical') {
                for (var i = 0; i < 4; i++) {
                    this.flipColl.pop();
                }
            }
            else if (this.flipColl[this.flipColl.length - 1] === 'vertical' && this.flipColl[this.flipColl.length - 2] === 'horizontal' &&
                this.flipColl[this.flipColl.length - 3] === 'vertical' && this.flipColl[this.flipColl.length - 4] === 'horizontal') {
                for (var i = 0; i < 4; i++) {
                    this.flipColl.pop();
                }
            }
        }
    };
    ImageEditor.prototype.horizontalFlip = function () {
        this.lowerContext.translate(this.lowerContext.canvas.width, 0);
        this.lowerContext.scale(-1, 1);
        this.upperContext.translate(this.upperContext.canvas.width, 0);
        this.upperContext.scale(-1, 1);
    };
    ImageEditor.prototype.verticalFlip = function () {
        this.lowerContext.translate(0, this.lowerContext.canvas.height);
        this.lowerContext.scale(1, -1);
        this.upperContext.translate(0, this.upperContext.canvas.height);
        this.upperContext.scale(1, -1);
    };
    ImageEditor.prototype.updateFlipState = function (direction) {
        if (direction === 'horizontal' && this.degree % 90 === 0 && this.degree % 180 !== 0) {
            this.verticalFlip();
        }
        else if (direction === 'vertical' && this.degree % 90 === 0 && this.degree % 180 !== 0) {
            this.horizontalFlip();
        }
        else if (direction === 'horizontal') {
            this.horizontalFlip();
        }
        else if (direction === 'vertical') {
            this.verticalFlip();
        }
    };
    ImageEditor.prototype.setDestinationPoints = function () {
        var maxDimension;
        if (this.degree % 90 === 0 && this.degree % 180 !== 0) {
            maxDimension = this.calcMaxDimension(this.srcHeight, this.srcWidth);
            if (this.isRotateZoom) {
                maxDimension.width += (maxDimension.width * this.zoomFactor);
                maxDimension.height += (maxDimension.height * this.zoomFactor);
                this.destWidth = maxDimension.height;
                this.destHeight = maxDimension.width;
            }
            this.destLeft = (this.lowerCanvas.clientWidth - maxDimension.height) / 2;
            this.destTop = (this.lowerCanvas.clientHeight - maxDimension.width) / 2;
            this.destWidth = maxDimension.height;
            this.destHeight = maxDimension.width;
        }
        else {
            maxDimension = this.calcMaxDimension(this.srcWidth, this.srcHeight);
            if (this.isRotateZoom) {
                maxDimension.width += (maxDimension.width * this.zoomFactor);
                maxDimension.height += (maxDimension.height * this.zoomFactor);
                this.destWidth = maxDimension.width;
                this.destHeight = maxDimension.height;
            }
            this.destLeft = (this.lowerCanvas.clientWidth - maxDimension.width) / 2;
            this.destTop = (this.lowerCanvas.clientHeight - maxDimension.height) / 2;
            this.destWidth = maxDimension.width;
            this.destHeight = maxDimension.height;
        }
    };
    ImageEditor.prototype.rotatedFlip = function () {
        this.isReverseFlip = true;
        var tempCurrFlipState = this.currFlipState;
        var tempFlipColl = this.flipColl;
        var tempObjColl = extend([], this.objColl, [], true);
        var tempActiveObj = extend({}, this.activeObj, {}, true);
        this.flipColl = [];
        this.objColl = [];
        this.refreshActiveObj();
        this.currentTransformedState('initial');
        var temp = this.lowerContext.filter;
        this.updateBrightnessFilter();
        this.lowerContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, this.destLeft, this.destTop, this.destWidth, this.destHeight);
        this.lowerContext.filter = temp;
        this.currentTransformedState('reverse', true);
        if (tempCurrFlipState === '' && this.currFlipState !== '') {
            tempCurrFlipState = this.currFlipState;
        }
        this.currFlipState = tempCurrFlipState;
        this.flipColl = tempFlipColl;
        this.objColl = extend([], tempObjColl, [], true);
        this.lowerContext.filter = 'none';
        this.iterateObjColl();
        this.lowerContext.filter = temp;
        if (tempActiveObj.activePoint.width !== 0) {
            this.activeObj = extend({}, tempActiveObj, {}, true);
        }
        this.isReverseFlip = false;
    };
    ImageEditor.prototype.getFilterValue = function (value) {
        var filterValue;
        if (value === 0) {
            filterValue = 1;
        }
        else {
            filterValue = 1 + ((value * 0.5) / 100);
        }
        return filterValue;
    };
    ImageEditor.prototype.setFilterValue = function (value) {
        var filterValue;
        if (value === 1) {
            filterValue = 0;
        }
        else {
            filterValue = ((value - 1) * 100) / 0.5;
        }
        return Math.round(filterValue);
    };
    ImageEditor.prototype.getSaturationFilterValue = function (value) {
        var filterValue;
        if (value === 0) {
            filterValue = 1;
        }
        else {
            filterValue = 1 + (value / 100);
        }
        return filterValue;
    };
    ImageEditor.prototype.setSaturationFilterValue = function (value) {
        var filterValue;
        if (value === 1) {
            filterValue = 0;
        }
        else {
            filterValue = (value - 1) * 100;
        }
        return Math.round(filterValue);
    };
    ImageEditor.prototype.getBlackAndWhiteData = function (imageData) {
        for (var i = 0; i < imageData.data.length; i += 4) {
            var count = imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2];
            var colour = 0;
            if (count > 383) {
                colour = 255;
            }
            imageData.data[i] = colour;
            imageData.data[i + 1] = colour;
            imageData.data[i + 2] = colour;
            imageData.data[i + 3] = 255;
        }
        return imageData;
    };
    ImageEditor.prototype.setBrightness = function (value) {
        this.applyPenDraw();
        this.adjustmentLevel.brightness = value;
        value = this.getFilterValue(value);
        var prevCropObj = extend({}, this.cropObj, {}, true);
        var prevObj = this.getCurrentObj();
        prevObj.objColl = extend([], this.objColl, [], true);
        prevObj.pointColl = extend([], this.pointColl, [], true);
        prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
        this.updateAdjustment('brightness', value);
        this.updateUndoRedoColl('brightness', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
    };
    ImageEditor.prototype.setContrast = function (value) {
        this.applyPenDraw();
        this.adjustmentLevel.contrast = value;
        value = this.getFilterValue(value);
        value *= 100;
        var prevCropObj = extend({}, this.cropObj, {}, true);
        var prevObj = this.getCurrentObj();
        prevObj.objColl = extend([], this.objColl, [], true);
        prevObj.pointColl = extend([], this.pointColl, [], true);
        prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
        this.updateAdjustment('contrast', value);
        this.updateUndoRedoColl('contrast', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
    };
    ImageEditor.prototype.setHue = function (value) {
        this.applyPenDraw();
        this.adjustmentLevel.hue = value;
        value *= 3;
        var prevCropObj = extend({}, this.cropObj, {}, true);
        var prevObj = this.getCurrentObj();
        prevObj.objColl = extend([], this.objColl, [], true);
        prevObj.pointColl = extend([], this.pointColl, [], true);
        prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
        this.updateAdjustment('hue', value);
        this.updateUndoRedoColl('hue', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
    };
    ImageEditor.prototype.setSaturation = function (value) {
        this.applyPenDraw();
        this.adjustmentLevel.saturation = value;
        value = this.getSaturationFilterValue(value);
        value *= 100;
        var prevCropObj = extend({}, this.cropObj, {}, true);
        var prevObj = this.getCurrentObj();
        prevObj.objColl = extend([], this.objColl, [], true);
        prevObj.pointColl = extend([], this.pointColl, [], true);
        prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
        this.updateAdjustment('saturation', value);
        this.updateUndoRedoColl('saturation', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
    };
    ImageEditor.prototype.setOpacity = function (value) {
        this.applyPenDraw();
        this.adjustmentLevel.opacity = value;
        if (value >= 50) {
            value /= 100;
        }
        else if (value === 40) {
            value = 0.45;
        }
        else if (value === 30) {
            value = 0.40;
        }
        else if (value === 20) {
            value = 0.35;
        }
        else if (value === 10) {
            value = 0.30;
        }
        else if (value === 0) {
            value = 0.25;
        }
        var prevCropObj = extend({}, this.cropObj, {}, true);
        var prevObj = this.getCurrentObj();
        prevObj.objColl = extend([], this.objColl, [], true);
        prevObj.pointColl = extend([], this.pointColl, [], true);
        prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
        this.updateAdjustment('opacity', value);
        this.updateUndoRedoColl('opacity', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
    };
    ImageEditor.prototype.setBlur = function (value) {
        this.applyPenDraw();
        this.adjustmentLevel.blur = value;
        value /= 20;
        // Since 0.5 is not working in blur we consider from 1
        value += 0.5;
        var prevCropObj = extend({}, this.cropObj, {}, true);
        var prevObj = this.getCurrentObj();
        prevObj.objColl = extend([], this.objColl, [], true);
        prevObj.pointColl = extend([], this.pointColl, [], true);
        prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
        this.updateAdjustment('blur', value);
        this.updateUndoRedoColl('blur', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
    };
    ImageEditor.prototype.setExposure = function (value) {
        this.applyPenDraw();
        this.adjustmentLevel.exposure = value;
        value = this.getFilterValue(value);
        var prevCropObj = extend({}, this.cropObj, {}, true);
        var prevObj = this.getCurrentObj();
        prevObj.objColl = extend([], this.objColl, [], true);
        prevObj.pointColl = extend([], this.pointColl, [], true);
        prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
        this.updateAdjustment('exposure', value);
        this.updateUndoRedoColl('exposure', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
    };
    ImageEditor.prototype.setFilter = function (type) {
        type = type.toLowerCase();
        this.applyPenDraw();
        var prevFilter = this.currentFilter;
        var prevCropObj = extend({}, this.cropObj, {}, true);
        var prevObj = this.getCurrentObj();
        prevObj.objColl = extend([], this.objColl, [], true);
        prevObj.pointColl = extend([], this.pointColl, [], true);
        prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
        this.updateAdjustment(type, null);
        this.updateUndoRedoColl(type, prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj, null, null, prevFilter);
    };
    ImageEditor.prototype.renderImage = function () {
        var temp = this.lowerContext.filter;
        this.applyActObj();
        this.upperContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
        this.updateCurrentTransformedState('initial');
        this.updateBrightnessFilter();
        this.lowerContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, this.destLeft, this.destTop, this.destWidth, this.destHeight);
        this.updateCurrentTransformedState('reverse');
        this.lowerContext.filter = 'none';
        this.iterateObjColl();
        this.freehandRedraw(this.lowerContext);
        this.lowerContext.filter = temp;
        if (this.isCircleCrop || (!isNullOrUndefined(this.currSelectionPoint) && this.currSelectionPoint.shape === 'crop-circle')) {
            this.cropCircle(this.lowerContext);
        }
    };
    ImageEditor.prototype.updateTextBox = function (obj) {
        this.upperContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
        this.redrawImgWithObj();
        this.textArea.style.display = 'block';
        this.textArea.style.fontFamily = obj.textSettings.fontFamily;
        this.textArea.style.fontSize = obj.textSettings.fontSize + 'px';
        this.textArea.style.color = obj.strokeSettings.strokeColor;
        this.textArea.style.fontWeight = obj.textSettings.bold ? 'bold' : 'normal';
        this.textArea.style.fontStyle = obj.textSettings.italic ? 'italic' : 'normal';
        this.textArea.style.border = '2px solid ' + this.themeColl[this.theme]['primaryColor'];
        this.textArea.value = obj.keyHistory;
        this.activeObj = extend({}, obj, {}, true);
        this.updateFontStyles();
        this.textArea.style.width = this.activeObj.activePoint.width + 'px';
    };
    ImageEditor.prototype.drawNewSelection = function (type, startX, startY, width, height) {
        var points;
        var cropShape = 'crop-' + type;
        if (cropShape.toLowerCase() === 'crop-custom') {
            if (this.currObjType.shape === '') {
                this.drawCustomSelection('crop-custom');
            }
            if (startX && startY) {
                this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                this.currObjType.shape = this.activeObj.shape = cropShape.toLowerCase();
                this.activeObj.activePoint.startX = startX;
                this.activeObj.activePoint.startY = startY;
                this.activeObj.activePoint.endX = this.lowerCanvas.width;
                this.activeObj.activePoint.endY = this.lowerCanvas.height;
                this.activeObj.activePoint.width = this.activeObj.activePoint.endX - this.activeObj.activePoint.startX;
                this.activeObj.activePoint.height = this.activeObj.activePoint.endY - this.activeObj.activePoint.startY;
                this.drawObject('duplicate');
            }
        }
        else if (cropShape.toLowerCase() === 'crop-canvas') {
            this.upperCanvas.style.display = 'none';
            this.dragCanvas = true;
        }
        else {
            this.currObjType.isCustomCrop = false;
            this.currObjType.shape = cropShape.toLowerCase();
            if (width && height) {
                points = { startX: startX, startY: startY, endX: startX + width, endY: startY + height,
                    width: width, height: height };
            }
            else if (width && cropShape === 'crop-circle') {
                points = { startX: startX, startY: startY, endX: startX + width, endY: startY + width,
                    width: width, height: width };
            }
            this.activeObj.shape = cropShape.toLowerCase();
            this.drawObject('duplicate', null, true, points);
        }
    };
    ImageEditor.prototype.setDestPointsForFlipState = function (isUpdate) {
        if (this.getCurrentPanRegion() !== '') {
            if (this.getCurrentPanRegion() === 'horizontal') {
                this.destLeft = this.lowerCanvas.clientWidth - (this.destWidth + this.destLeft);
            }
            else if (this.getCurrentPanRegion() === 'vertical') {
                this.destTop = this.lowerCanvas.clientHeight - (this.destHeight + this.destTop);
            }
            else {
                this.destLeft = this.lowerCanvas.clientWidth - (this.destWidth + this.destLeft);
                this.destTop = this.lowerCanvas.clientHeight - (this.destHeight + this.destTop);
            }
        }
    };
    ImageEditor.prototype.performUndoDefaultAction = function (obj) {
        this.lowerContext.filter = obj.previousObj.filter;
        this.objColl = [];
        this.pointColl = [];
        this.freehandCounter = 0;
        this.setCurrentObj(obj.previousObj);
        this.destLeft = obj.previousObj.destPoints.startX;
        this.destTop = obj.previousObj.destPoints.startY;
        var activeObj = extend({}, this.activeObj, {}, true);
        this.objColl = extend([], obj.previousObjColl, [], true);
        this.pointColl = extend([], obj.previousPointColl, [], true);
        this.freehandCounter = this.pointColl.length;
        this.lowerContext.filter = 'none';
        this.iterateObjColl();
        this.freehandRedraw(this.lowerContext);
        this.lowerContext.filter = obj.previousObj.filter;
        this.activeObj = activeObj;
        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
        if (this.activeObj.activePoint.width !== 0 && this.activeObj.activePoint.height !== 0) {
            this.drawObject('duplicate');
        }
    };
    ImageEditor.prototype.setAdjustment = function (type) {
        var splitWords = this.lowerContext.filter.split(' ');
        var value;
        var valueArr;
        switch (type) {
            case 'brightness':
                valueArr = splitWords[0].split('(');
                value = parseFloat(valueArr[1].split(')')[0]);
                this.adjustmentLevel.brightness = this.setFilterValue(value);
                break;
            case 'contrast':
                valueArr = splitWords[1].split('(');
                value = parseFloat(valueArr[1].split(')')[0]);
                value /= 100;
                this.adjustmentLevel.contrast = this.setFilterValue(value);
                break;
            case 'hue':
                valueArr = splitWords[2].split('(');
                value = parseFloat(valueArr[1].split(')')[0]);
                value /= 3;
                this.adjustmentLevel.hue = value;
                break;
            case 'saturation':
                valueArr = splitWords[3].split('(');
                value = parseFloat(valueArr[1].split(')')[0]);
                value /= 100;
                this.adjustmentLevel.saturation = this.setSaturationFilterValue(value);
                break;
            case 'opacity':
                valueArr = splitWords[4].split('(');
                value = parseFloat(valueArr[1].split(')')[0]);
                if (value === 0.45) {
                    value = 40;
                }
                else if (value === 0.40) {
                    value = 30;
                }
                else if (value === 0.35) {
                    value = 20;
                }
                else if (value === 0.30) {
                    value = 10;
                }
                else if (value === 0.25) {
                    value = 0;
                }
                else {
                    value *= 100;
                }
                this.adjustmentLevel.opacity = value;
                break;
            case 'blur':
                valueArr = splitWords[5].split('(');
                value = parseFloat(valueArr[1].split(')')[0]);
                value *= 20;
                this.adjustmentLevel.blur = value;
                break;
            case 'exposure':
                valueArr = splitWords[0].split('(');
                value = parseFloat(valueArr[1].split(')')[0]);
                this.adjustmentLevel.exposure = this.setFilterValue(value);
                break;
        }
    };
    ImageEditor.prototype.updateFilter = function (type, previousFilter) {
        if (type === 'default' || type === 'chrome' || type === 'cold' ||
            type === 'warm' || type === 'grayscale' || type === 'blackandwhite' ||
            type === 'sepia' || type === 'invert' || type === 'sharpen') {
            var selEle = this.element.querySelector('.e-contextual-toolbar-wrapper .e-toolbar-item.e-selected');
            if (selEle) {
                selEle.classList.remove('e-selected');
            }
            var filterCanvas = document.getElementById(this.element.id + '_' + type + 'Canvas');
            if (filterCanvas) {
                filterCanvas.parentElement.classList.add('e-selected');
            }
            if (!isNullOrUndefined(previousFilter)) {
                this.currentFilter = previousFilter;
            }
            else {
                this.currentFilter = this.element.id + '_' + type;
            }
        }
    };
    /**
     * Clear a current selection.
     *
     * @returns {void}.
     */
    ImageEditor.prototype.clearSelection = function () {
        if (!this.disabled && this.isImageLoaded) {
            this.togglePen = false;
            this.refreshActiveObj();
            this.dragElement = '';
            this.dragPoint.startX = this.dragPoint.startY = this.dragPoint.endX = this.dragPoint.endY = 0;
            this.currObjType.shape = '';
            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
            this.currObjType.isActiveObj = true;
            this.currObjType.isCustomCrop = false;
            this.upperCanvas.style.cursor = 'default';
        }
    };
    /**
     * Crops an image based on the selection.
     * The selection can be done through programmatically using the select method or through UI interactions.
     *
     * @returns {boolean}.
     */
    ImageEditor.prototype.crop = function () {
        var isCrop = false;
        if (!this.disabled && this.isImageLoaded) {
            if (this.currObjType.isUndoAction) {
                this.refreshUndoRedoColl();
            }
            var splitWords = void 0;
            var transitionArgs = { startPoint: { x: this.activeObj.activePoint.startX, y: this.activeObj.activePoint.startY }, endPoint: { x: this.activeObj.activePoint.endX, y: this.activeObj.activePoint.endY } };
            this.trigger('cropping', transitionArgs);
            if (this.activeObj.shape !== undefined) {
                splitWords = this.activeObj.shape.split('-');
            }
            if (!this.disabled && this.activeObj.horTopLine !== undefined && (this.currObjType.isCustomCrop || splitWords[0] === 'crop')) {
                isCrop = true;
                var prevCropObj = extend({}, this.cropObj, {}, true);
                var prevObj = this.getCurrentObj();
                prevObj.objColl = extend([], this.objColl, [], true);
                prevObj.pointColl = extend([], this.pointColl, [], true);
                prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
                this.cropImg();
                this.zoomFactor = 0;
                this.enableDisableToolbarBtn();
                this.updateUndoRedoColl('crop', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
            }
        }
        return isCrop;
    };
    /**
     * Flips an image by horizontally or vertically.
     *
     * @param {Direction } direction - Specifies the direction to flip the image.
     * @returns {void}.
     */
    ImageEditor.prototype.flip = function (direction) {
        if (!this.disabled && this.isImageLoaded) {
            var transitionArgs = { direction: direction };
            this.trigger('flipping', transitionArgs);
            var prevCropObj = extend({}, this.cropObj, {}, true);
            var prevObj = void 0;
            if (isNullOrUndefined(this.transformCurrentObj)) {
                prevObj = this.getCurrentObj();
                prevObj.objColl = extend([], this.objColl, null, true);
                prevObj.pointColl = extend({}, this.pointColl, null, true);
                prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
            }
            this.afterCropActions.push(direction.toLowerCase() === 'horizontal' ? 'horizontalflip' : 'verticalflip');
            var splitWords = [];
            var activeObjShape = void 0;
            if (!isNullOrUndefined(this.activeObj.activePoint)) {
                if (this.activeObj.shape !== undefined) {
                    splitWords = this.activeObj.shape.split('-');
                }
                if (this.currObjType.isCustomCrop || splitWords[0] === 'crop') {
                    activeObjShape = this.currObjType.isCustomCrop ? 'custom' : splitWords[1];
                    this.updateImageRatioForActObj();
                    this.objColl.push(this.activeObj);
                    this.refreshActiveObj();
                }
            }
            this.redrawActObj();
            this.lowerContext.clearRect(0, 0, this.lowerCanvas.height, this.lowerCanvas.width);
            this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
            this.upperContext.clearRect(0, 0, this.lowerCanvas.height, this.lowerCanvas.width);
            this.upperContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
            var tempObjColl = extend([], this.objColl, [], true);
            var tempActiveObj = extend({}, this.activeObj, {}, true);
            this.objColl = [];
            this.refreshActiveObj();
            if (!this.isReverseFlip) {
                this.updateCurrentTransformedState('initial');
            }
            if (direction.toLowerCase() === 'horizontal') {
                this.updateFlipState(direction.toLowerCase());
                if (this.currFlipState.toLowerCase() === 'horizontal') {
                    this.currFlipState = '';
                }
                else {
                    this.currFlipState = 'horizontal';
                }
            }
            else {
                this.updateFlipState(direction.toLowerCase());
                if (this.currFlipState.toLowerCase() === 'vertical') {
                    this.currFlipState = '';
                }
                else {
                    this.currFlipState = 'vertical';
                }
            }
            if (this.rotatedFlipCropSelection) {
                this.destLeft += this.totalPannedInternalPoint.x;
                this.destTop += this.totalPannedInternalPoint.y;
            }
            var temp = this.lowerContext.filter;
            this.updateBrightnessFilter();
            this.lowerContext.drawImage(this.baseImg, this.srcLeft, this.srcTop, this.srcWidth, this.srcHeight, this.destLeft, this.destTop, this.destWidth, this.destHeight);
            this.lowerContext.filter = temp;
            this.updateFlipState(direction.toLowerCase());
            if (!this.isReverseFlip) {
                this.updateCurrentTransformedState('reverse');
                this.updateFlipColl(direction.toLocaleLowerCase());
                this.rotateFlipColl.push(direction.toLowerCase());
            }
            if (this.rotateFlipColl.length === 1) {
                if (this.getCurrentPanRegion() === '') {
                    this.setClientTransformedDimension();
                }
                else {
                    this.setDestPointsForFlipState();
                }
            }
            if (this.isCircleCrop) {
                this.cropCircle(this.lowerContext);
            }
            this.objColl = extend([], tempObjColl, [], true);
            this.activeObj = extend({}, tempActiveObj, {}, true);
            for (var i = 0, len = this.objColl.length; i < len; i++) {
                if (this.objColl[i].flipObjColl.length === 0) {
                    this.objColl[i].flipObjColl.push(direction);
                }
                else if (this.objColl[i].flipObjColl[this.objColl[i].flipObjColl.length - 1] === direction) {
                    this.objColl[i].flipObjColl.pop();
                }
                else {
                    this.objColl[i].flipObjColl.push(direction);
                }
            }
            this.redrawObj(direction.toLowerCase());
            var tempFilter = this.lowerContext.filter;
            this.lowerContext.filter = this.getDefaultFilter();
            this.iterateObjColl();
            if (!isNullOrUndefined(this.currSelectionPoint)) {
                tempObjColl = extend([], this.objColl, [], true);
                this.objColl = [];
                this.objColl.push(this.currSelectionPoint);
                this.redrawObj(direction.toLowerCase());
                this.currSelectionPoint = extend({}, this.objColl[0], {}, true);
                this.objColl = tempObjColl;
            }
            if (direction.toLowerCase() === 'horizontal' || direction.toLowerCase() === 'vertical') {
                this.flipFreehandrawColl(direction.toLowerCase());
                this.freehandRedraw(this.lowerContext);
            }
            else {
                this.freehandRedraw(this.lowerContext);
            }
            this.lowerContext.filter = tempFilter;
            this.refreshActiveObj();
            this.updateCurrSelectionPoint(direction.toLowerCase());
            if (!this.isUndoRedo && isNullOrUndefined(this.transformCurrentObj)) {
                this.updateUndoRedoColl('flip', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
            }
            this.isUndoRedo = false;
            this.clearOuterCanvas(this.lowerContext);
            this.clearOuterCanvas(this.upperContext);
            if (!isNullOrUndefined(activeObjShape)) {
                this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                this.activeObj = extend({}, this.objColl[this.objColl.length - 1], {}, true);
                this.objColl.pop();
                this.drawObject('duplicate', this.activeObj);
                if (!this.isReverseFlip) {
                    this.refreshToolbar('main', true, true);
                }
            }
            if (isNullOrUndefined(this.activeObj.shape) && !this.isReverseFlip) {
                this.refreshToolbar('main');
            }
            else if (!this.isReverseFlip) {
                this.refreshToolbar('main', true, true);
            }
            this.rotateFlipColl = this.alignRotateFlipColl(this.rotateFlipColl, true);
        }
    };
    /**
     * Return an image as ImageData.
     *
     * @returns {ImageData}.
     */
    ImageEditor.prototype.getImageData = function () {
        var data = this.lowerContext.getImageData(this.destLeft, this.destTop, this.destWidth, this.destHeight);
        return data;
    };
    /**
     *  Load/opens an image for editing within an image editor.
     *
     * @param {string | ImageData } data - Specifies url of the Image or image data.
     *
     * @returns {void}.
     */
    ImageEditor.prototype.open = function (data) {
        if (!this.disabled) {
            showSpinner(this.element);
            this.element.style.opacity = '0.5';
            var toolbar_11 = document.querySelector('#' + this.element.id + '_currPos');
            if (toolbar_11) {
                toolbar_11.style.display = 'none';
            }
            if (this.defToolbarItems.length === 0 &&
                (isNullOrUndefined(document.getElementById(this.element.id + '_toolbar')))) {
                this.toolbarHeight = 0;
            }
            if (isNullOrUndefined(this.toolbarTemplate)) {
                this.reset();
                this.update();
            }
            this.degree = 0;
            this.zoomFactor = 0;
            this.isImageLoaded = false;
            this.currSelectionPoint = null;
            var type = typeof (data);
            if (type === 'string') {
                var fileName = data.split('.');
                if (fileName.length > 1) {
                    fileName = fileName[fileName.length - 2].split('/');
                    this.fileName = fileName[fileName.length - 1];
                }
                else {
                    this.fileName = 'ImageEditor';
                }
                this.imageOnLoad(data);
            }
            else {
                this.fileName = 'ImageEditor';
                this.lowerCanvas = document.querySelector('#' + this.element.id + '_lowerCanvas');
                this.upperCanvas = document.querySelector('#' + this.element.id + '_upperCanvas');
                this.lowerContext = this.lowerCanvas.getContext('2d');
                this.upperContext = this.upperCanvas.getContext('2d');
                this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
                this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                this.inMemoryContext.clearRect(0, 0, this.inMemoryCanvas.width, this.inMemoryCanvas.height);
                this.inMemoryCanvas.width = this.baseImg.width = data.width;
                this.inMemoryCanvas.height = this.baseImg.height = data.height;
                this.inMemoryContext.putImageData(data, 0, 0);
                this.baseImg.src = this.inMemoryCanvas.toDataURL();
            }
        }
    };
    /**
     * Reset all the changes and revert to original image.
     *
     * @returns {void}.
     */
    ImageEditor.prototype.reset = function () {
        if (!this.disabled) {
            this.inMemoryContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
            this.inMemoryContext.clearRect(0, 0, this.lowerCanvas.height, this.lowerCanvas.width);
            this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
            this.lowerContext.clearRect(0, 0, this.lowerCanvas.height, this.lowerCanvas.width);
            this.upperContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
            this.upperContext.clearRect(0, 0, this.lowerCanvas.height, this.lowerCanvas.width);
            this.lowerContext.filter = this.getDefaultFilter();
            this.refreshActiveObj();
            this.refreshToolbar('main');
            if (Browser.isDevice && document.getElementById(this.element.id + '_bottomToolbar')) {
                getComponent(document.getElementById(this.element.id + '_bottomToolbar'), 'toolbar').destroy();
                this.createBottomToolbar();
            }
            this.objColl = [];
            this.isImageLoaded = false;
            this.degree = this.undoRedoStep = 0;
            this.keyHistory = this.currFlipState = '';
            this.upperCanvas.style.display = 'none';
            this.togglePan = this.togglePen = false;
            this.upperCanvas.style.cursor = this.lowerCanvas.style.cursor = 'default';
            this.undoRedoColl = [];
            this.dragCanvas = this.isUndoRedo = false;
            this.tempKeyHistory = '';
            this.lowerContext.lineWidth = this.upperContext.lineWidth = undefined;
            this.touchEndPoint = {};
            this.currentToolbar = 'main';
            this.textStartPoints = { x: 0, y: 0 };
            this.fontSizeColl = [];
            this.textArea.value = this.textArea.textContent = '';
            this.textArea.style.display = 'none';
            this.strokeSettings = { strokeColor: '#fff', fillColor: '', strokeWidth: null };
            this.textSettings =
                { text: 'Enter Text', fontFamily: 'Arial', fontSize: null, fontRatio: null, bold: false, italic: false, underline: false };
            this.tempStrokeSettings = { strokeColor: '#fff', fillColor: '', strokeWidth: null };
            this.tempTextSettings =
                { text: 'Enter Text', fontFamily: 'Arial', fontSize: null, fontRatio: null, bold: false, italic: false, underline: false };
            this.timer = undefined;
            this.penStrokeWidth = undefined;
            this.currObjType.isUndoAction = false;
            this.undoRedoStep = 0;
            this.tempObjColl = undefined;
            this.adjustmentLevel = { brightness: 0, contrast: 0, hue: 0, opacity: 100, saturation: 0,
                blur: 0, exposure: 0, sharpen: false, bw: false };
            this.tempAdjustmentLevel = { brightness: 0, contrast: 0, hue: 0, opacity: 100, saturation: 0,
                blur: 0, exposure: 0, sharpen: false, bw: false };
            this.canvasFilter = this.currentFilter = this.tempAdjustmentValue = '';
            this.lowerContext.filter = this.initialAdjustmentValue = this.adjustmentValue = this.getDefaultFilter();
            this.destLeft = this.destTop = this.srcLeft = this.srcTop = 0;
            this.destWidth = this.destHeight = this.srcWidth = this.srcHeight = null;
            this.currSelectionPoint = null;
            this.cropDestPoints = { startX: 0, startY: 0, width: 0, height: 0 };
            this.panDown = null;
            this.panMove = null;
            this.tempPanMove = null;
            this.flipColl = [];
            this.freehandDrawObj.time = this.freehandDrawObj.lastVelocity = 0;
            this.freehandDrawObj.pointX = this.freehandDrawObj.pointY = 0;
            this.points = [];
            this.pointColl = {};
            this.pointCounter = this.freehandCounter = this.tempFreehandCounter = this.tempCurrentFreehandDrawIndex = 0;
            this.isFreehandDrawing = false;
            this.isReverseRotate = this.isReverseFlip = this.isPreventDragging = this.isRotateZoom = false;
            this.currentPannedPoint = null;
            this.fileType = undefined;
            this.rotateFlipColl = [];
            this.isCircleCrop = false;
            this.isCropTab = false;
            this.rotatedDestPoints = { startX: 0, startY: 0, width: 0, height: 0 };
            this.croppedDegree = 0;
            this.freehandDrawHoveredIndex = this.freehandDrawSelectedIndex = null;
            this.isFreehandDrawingPoint = this.isFreehandDrawEditing = false;
            this.tempFreeHandDrawEditingStyles = { strokeColor: null, fillColor: null, strokeWidth: null };
            this.totalPannedInternalPoint = { x: 0, y: 0 };
            this.totalPannedClientPoint = { x: 0, y: 0 };
            this.lowerCanvas.style.left = this.upperCanvas.style.left = '';
            this.lowerCanvas.style.top = this.upperCanvas.style.top = '';
            this.lowerCanvas.style.maxWidth = this.upperCanvas.style.maxWidth = '';
            this.lowerCanvas.style.maxHeight = this.upperCanvas.style.maxHeight = '';
            this.currentSelectionPoint = null;
            this.totalPannedPoint = { x: 0, y: 0 };
            this.fileName = '';
            this.isBrightnessAdjusted = this.isInitialLoading = false;
            this.defaultZoomFactor = this.cropZoomFactor = this.zoomFactor = 0;
            this.tempActObj = null;
            this.lastPan = { x: 0, y: 0 };
            this.selectedFreehandColor = '#42a5f5';
            this.isFreehandDrawCustomized = false;
            this.isShapeInserted = false;
            this.isAllowCropPan = false;
            this.tempPannedPoint = { x: 0, y: 0 };
            this.currObjType = { shape: '', isDragging: false, isActiveObj: false, isText: false, isInitialText: false, isLine: false,
                isInitialLine: false, isCustomCrop: false, isZoomed: false, isUndoZoom: false,
                isUndoAction: false, isFiltered: false, isSave: false };
            this.cropObj = { cropZoom: 0, defaultZoom: 0, totalPannedPoint: { x: 0, y: 0 }, totalPannedClientPoint: { x: 0, y: 0 },
                totalPannedInternalPoint: { x: 0, y: 0 }, tempFlipPanPoint: { x: 0, y: 0 }, activeObj: {},
                rotateFlipColl: [], degree: 0, currFlipState: '',
                destPoints: { startX: 0, startY: 0, width: 0, height: 0 },
                srcPoints: { startX: 0, startY: 0, width: 0, height: 0 }, filter: '' };
            this.afterCropActions = [];
            this.isCancelAction = this.preventZoomBtn = this.isFreehandPointMoved = false;
            this.isTouch = false;
            this.freehandDownPoint = { x: 0, y: 0 };
            this.tempFlipPanPoint = { x: 0, y: 0 };
            this.currentFreehandDrawIndex = 0;
            this.tempCurrentFreehandDrawIndex = 0;
            this.cancelObjColl = [];
            this.cancelPointColl = [];
            this.freehandDrawSelectedId = null;
            this.transformCurrentObj = null;
            this.rotatedFlipCropSelection = false;
            this.panStartObj = null;
            this.currDestinationPoint = null;
            this.updateCanvas();
            this.refreshDropDownBtn(false);
            this.enableDisableToolbarBtn();
        }
    };
    /**
     * Rotate an image to clockwise and anti-clockwise.
     *
     * @param {number} degree - Specifies a degree to rotate an image.
     * positive integer value for clockwise and negative integer value for anti-clockwise rotation.
     *
     * @returns {boolean}.
     */
    ImageEditor.prototype.rotate = function (degree) {
        var isRotate = false;
        if (!this.disabled && this.isImageLoaded && (degree % 90 === 0)) {
            isRotate = true;
            var transitionArgs = { degree: degree };
            this.trigger('rotating', transitionArgs);
            var prevCropObj = extend({}, this.cropObj, {}, true);
            var prevObj = void 0;
            if (isNullOrUndefined(this.transformCurrentObj)) {
                prevObj = this.getCurrentObj();
                prevObj.objColl = extend([], this.objColl, null, true);
                prevObj.pointColl = extend({}, this.pointColl, null, true);
                prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
            }
            this.afterCropActions.push(degree === 90 ? 'rotateRight' : 'rotateLeft');
            var splitWords = [];
            var activeObjShape = void 0;
            if (!isNullOrUndefined(this.activeObj.activePoint) && !isNullOrUndefined(this.activeObj.shape)) {
                if (this.activeObj.shape !== undefined) {
                    splitWords = this.activeObj.shape.split('-');
                }
                if (this.currObjType.isCustomCrop || splitWords[0] === 'crop') {
                    activeObjShape = this.currObjType.isCustomCrop ? 'custom' : splitWords[1];
                    this.updateImageRatioForActObj();
                    this.objColl.push(this.activeObj);
                    this.refreshActiveObj();
                }
            }
            this.redrawActObj();
            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
            this.drawRotatedImage(degree);
            this.clearOuterCanvas(this.lowerContext);
            this.clearOuterCanvas(this.upperContext);
            if (!isNullOrUndefined(activeObjShape)) {
                this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                this.activeObj = extend({}, this.objColl[this.objColl.length - 1], {}, true);
                this.objColl.pop();
                this.drawObject('duplicate', this.activeObj);
                if (!this.isReverseRotate) {
                    this.refreshToolbar('main', true, true);
                }
            }
            if (!this.isUndoRedo && isNullOrUndefined(this.transformCurrentObj)) {
                this.updateUndoRedoColl('rotate', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
            }
            this.isUndoRedo = false;
            if (isNullOrUndefined(this.activeObj.shape) && !this.isReverseRotate) {
                this.refreshToolbar('main');
            }
            else if (!this.isReverseRotate) {
                this.refreshToolbar('main', true, true);
            }
            this.rotateFlipColl = this.alignRotateFlipColl(this.rotateFlipColl, true);
        }
        return isRotate;
    };
    /**
     * Export an image using the specified file name and the extension.
     *
     * @param {string} type - Specifies a format of image to be saved.
     * @param {string} fileName – Specifies a file name to be saved
     *
     * @returns {void}.
     */
    ImageEditor.prototype.export = function (type, fileName) {
        var _this = this;
        if (!this.disabled && this.isImageLoaded) {
            if (this.isFreehandDrawEditing) {
                this.applyFreehandDraw();
            }
            if (this.togglePen) {
                this.currObjType.isZoomed = true;
                this.apply();
            }
            if (this.textArea.style.display === 'block') {
                this.redrawActObj();
            }
            this.applyActObj();
            this.lowerContext.filter = this.canvasFilter;
            type = type ? type : 'Png';
            this.redrawActObj();
            var beforeSave = { cancel: false, fileName: fileName ? fileName : this.fileName,
                fileType: type };
            var saved_1 = { fileName: fileName ? fileName : this.fileName, fileType: type };
            this.trigger('beforeSave', beforeSave, function (observableSaveArgs) {
                if (!observableSaveArgs.cancel) {
                    _this.currObjType.isSave = true;
                    fileName = observableSaveArgs.fileName ? observableSaveArgs.fileName : fileName;
                    if (type.toLowerCase() === 'svg') {
                        fileName = fileName || _this.fileName;
                        _this.toSVGImg(fileName);
                    }
                    else if (type.toLowerCase() === 'jpeg') {
                        fileName = fileName || _this.fileName;
                        _this.toBlobFn(fileName, type.toLowerCase());
                    }
                    else {
                        fileName = fileName || _this.fileName;
                        _this.toBlobFn(fileName, type.toLowerCase());
                    }
                    _this.trigger('saved', saved_1);
                    _this.refreshToolbar('main');
                    _this.lowerCanvas.style.left = _this.upperCanvas.style.left = '';
                    _this.lowerCanvas.style.top = _this.upperCanvas.style.top = '';
                    _this.lowerCanvas.style.maxWidth = _this.upperCanvas.style.maxWidth = '';
                    _this.lowerCanvas.style.maxHeight = _this.upperCanvas.style.maxHeight = '';
                }
            });
        }
    };
    /**
     * Perform selection in an image editor. The selection helps to crop an image.
     *
     * @param {string} type - Specifies the shape - circle / square / custom selection / pre-defined ratios.
     * @param {number} startX – Specifies the start x-coordinate point of the selection.
     * @param {number} startY – Specifies the start y-coordinate point of the selection.
     * @param {number} width - Specifies the width of the selection area.
     * @param {number} height - Specifies the height of the selection area.
     * @returns {void}.
     *   ```html
     * <div id='imageeditor'></div>
     * ```
     * ```typescript
     * <script>
     * var imageObj = new ImageEditor({
     *   created : () => {
     *     imageObj.select('16:9', 10, 10);
     *  }
     * });
     * imageObj.appendTo("#imageeditor");
     * </script>
     * ```
     */
    ImageEditor.prototype.select = function (type, startX, startY, width, height) {
        if (!this.disabled && this.isImageLoaded) {
            if (this.zoomFactor > 0 && !isNullOrUndefined(this.activeObj.shape) && this.activeObj.shape.split('-')[0] === 'crop' && isNullOrUndefined(this.currentSelectionPoint)) {
                this.currentSelectionPoint = extend({}, this.activeObj, {}, true);
            }
            var isPrevent = false;
            var splitWords = void 0;
            if (this.activeObj.shape !== undefined) {
                splitWords = this.activeObj.shape.split('-');
            }
            if (splitWords === undefined && this.currObjType.isCustomCrop) {
                isPrevent = true;
            }
            else if (splitWords !== undefined && splitWords[0] === 'crop') {
                isPrevent = true;
            }
            var prevCropObj = extend({}, this.cropObj, {}, true);
            var prevObj = this.getCurrentObj();
            prevObj.objColl = extend([], this.objColl, [], true);
            prevObj.pointColl = extend([], this.pointColl, [], true);
            prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
            this.redrawActObj();
            this.refreshActiveObj();
            this.keyHistory = '';
            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
            this.upperCanvas.style.display = 'block';
            if (!isNullOrUndefined(this.currSelectionPoint) || this.defaultZoomFactor > 0 ||
                (this.degree !== 0 && this.totalPannedInternalPoint.x !== 0 && this.totalPannedInternalPoint.y !== 0 && !isPrevent)) {
                this.isCircleCrop = false;
                if (this.defaultZoomFactor > 0) {
                    var zoomFactor = this.zoomFactor = this.defaultZoomFactor;
                    this.isCropTab = false;
                    var isUndoRedo = this.isUndoRedo;
                    for (var i = 0; i < (zoomFactor * 10); i++) {
                        this.isUndoRedo = true;
                        this.zoom(-0.1);
                    }
                    this.isUndoRedo = isUndoRedo;
                    this.resetPanPoints();
                }
                this.cancelObjColl = extend([], this.objColl, [], true);
                this.cancelPointColl = extend([], this.pointColl, [], true);
                this.updateObjAndFreeHandDrawColl();
                this.isCropTab = true;
                this.setCurrSelectionPoints(true);
                this.zoomFactor = this.cropZoomFactor;
                if (isNullOrUndefined(this.cropObj.activeObj.shape)) {
                    this.drawNewSelection(type, startX, startY, width, height);
                }
                else {
                    this.updateUndoRedoColl('crop-selection', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
                }
            }
            else {
                if (type === 'custom') {
                    this.currObjType.shape = '';
                }
                this.drawNewSelection(type, startX, startY, width, height);
            }
        }
    };
    /**
     * Enable or disable a freehand drawing in an Image Editor.
     *
     * @param {boolean} value - Specifies a value whether enable or disable freehand drawing.
     *
     * @returns {void}.
     * @private
     */
    ImageEditor.prototype.freeHandDraw = function (value) {
        if (value) {
            this.points = [];
            this.refreshActiveObj();
            this.togglePen = true;
            this.upperCanvas.style.cursor = 'crosshair';
            this.upperCanvas.style.display = 'block';
            if (isNullOrUndefined(this.activeObj.strokeSettings)) {
                this.activeObj.strokeSettings = this.strokeSettings;
            }
            if (isNullOrUndefined(this.activeObj.strokeSettings.strokeWidth)) {
                this.activeObj.strokeSettings.strokeWidth = 4;
            }
            this.refreshToolbar('pen');
        }
        else {
            this.upperCanvas.style.cursor = 'default';
            this.apply();
            this.refreshToolbar('main');
            this.currentToolbar = 'main';
            this.isFreehandDrawCustomized = false;
        }
    };
    /**
     * Enable or disable a freehand drawing in an Image Editor.
     *
     * @param {boolean} value - Specifies a value whether enable or disable freehand drawing.
     *
     *  @returns {void}.
     */
    ImageEditor.prototype.freehandDraw = function (value) {
        if (!this.disabled && this.isImageLoaded) {
            this.freeHandDraw(value);
        }
    };
    /**
     * Enable or disable a panning on the Image Editor.
     *
     * @param {boolean} value - Specifies a value whether enable or disable panning.
     *
     * @returns {void}.
     */
    ImageEditor.prototype.pan = function (value) {
        if (!this.disabled && this.isImageLoaded) {
            if (value) {
                this.togglePan = true;
                this.redrawActObj();
                this.dragCanvas = true;
                this.lowerCanvas.style.cursor = this.upperCanvas.style.cursor = 'grab';
                this.panDown = null;
            }
            else {
                this.dragCanvas = this.togglePan = this.currObjType.isCustomCrop = false;
                this.lowerCanvas.style.cursor = this.upperCanvas.style.cursor = 'default';
            }
        }
    };
    /**
     * Increase / Decrease the magnification of an image.
     *
     * @param {boolean} value - Specifies a value to be zoomed on the image.
     * @returns {void}.
     */
    ImageEditor.prototype.zoom = function (value) {
        if (!this.disabled && this.isImageLoaded) {
            if ((this.zoomFactor === 0 && value < 0) || (this.zoomFactor > 2 && value > 0 ||
                (this.zoomFactor > 0 && value < 0 && this.disableZoomOutBtn()))) {
                return;
            }
            var splitWords = void 0;
            var tempActiveObj = void 0;
            var isShape = false;
            if (this.activeObj.shape !== undefined) {
                splitWords = this.activeObj.shape.split('-');
            }
            if (splitWords !== undefined && splitWords[0] === 'crop') {
                tempActiveObj = extend({}, this.activeObj, {}, true);
                this.isCropTab = true;
            }
            else if (!isNullOrUndefined(this.activeObj.shape) && splitWords[0] !== 'crop') {
                isShape = true;
            }
            var zoomPoint = void 0;
            var zoomLevel = void 0;
            if (this.isCropTab && !isNullOrUndefined(tempActiveObj)) {
                zoomLevel = this.cropZoomFactor;
                zoomPoint = { x: this.activeObj.activePoint.startX + (this.activeObj.activePoint.width / 2),
                    y: this.activeObj.activePoint.startY + (this.activeObj.activePoint.height / 2) };
            }
            else {
                zoomLevel = this.defaultZoomFactor;
                zoomPoint = { x: this.lowerCanvas.clientWidth / 2, y: this.lowerCanvas.clientHeight / 2 };
            }
            var zoomEventArgs = { zoomPoint: zoomPoint, zoomLevel: zoomLevel };
            this.trigger('zooming', zoomEventArgs);
            var prevCropObj = extend({}, this.cropObj, {}, true);
            var prevObj = this.getCurrentObj();
            prevObj.objColl = extend([], this.objColl, [], true);
            prevObj.pointColl = extend([], this.pointColl, [], true);
            prevObj.afterCropActions = extend([], this.afterCropActions, [], true);
            this.redrawActObj();
            this.refreshActiveObj();
            this.upperContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
            this.lowerContext.filter = this.canvasFilter;
            this.upperCanvas.style.cursor = 'default';
            var objColl = extend([], this.objColl, [], true);
            if (!this.isCropTab) {
                if (this.degree !== 0) {
                    this.redrawActObj();
                    this.currentPannedPoint = { x: 0, y: 0 };
                    this.rotatePan(true, true);
                }
                this.updateObjAndFreeHandDrawColl();
            }
            if (this.degree === 0) {
                this.drawZoomImgToCanvas(value, tempActiveObj);
                if (this.getCurrentPanRegion() !== '') {
                    this.tempFlipPanPoint.x += this.totalPannedPoint.x;
                    this.tempFlipPanPoint.y += this.totalPannedPoint.y;
                    objColl = extend([], this.objColl, [], true);
                    this.objColl = [];
                    var destLeft = this.destLeft;
                    var destTop = this.destTop;
                    this.setDestPointsForFlipState();
                    this.rotatedFlip();
                    this.destLeft = destLeft;
                    this.destTop = destTop;
                    this.objColl = objColl;
                    this.zoomObjColl();
                    this.zoomFreehandDrawColl();
                    this.updateObjAndFreeHandDrawColl();
                }
                if (this.zoomFactor === 0 && !this.isCropTab) {
                    this.totalPannedPoint = { x: 0, y: 0 };
                }
            }
            else {
                this.updateObjAndFreeHandDrawColl();
                this.totalPannedClientPoint = { x: 0, y: 0 };
                this.totalPannedInternalPoint = { x: 0, y: 0 };
                this.rotateZoom(value);
                if (this.getCurrentPanRegion() !== '') {
                    var temp = this.lowerContext.filter;
                    this.lowerContext.filter = 'none';
                    this.zoomObjColl();
                    this.zoomFreehandDrawColl();
                    this.lowerContext.filter = temp;
                }
            }
            if (this.getCurrentPanRegion() === '') {
                var temp = this.lowerContext.filter;
                this.lowerContext.filter = 'none';
                this.zoomObjColl();
                this.zoomFreehandDrawColl();
                this.lowerContext.filter = temp;
            }
            if ((!isNullOrUndefined(this.currSelectionPoint) && this.currSelectionPoint.shape === 'crop-circle') || this.isCircleCrop) {
                this.cropCircle(this.lowerContext);
            }
            this.clearOuterCanvas(this.lowerContext);
            this.refreshActiveObj();
            if (!isNullOrUndefined(tempActiveObj)) {
                this.activeObj = extend({}, tempActiveObj, {}, true);
                this.drawObject('duplicate', this.activeObj);
                if (this.zoomFactor === 0) {
                    this.currSelectionPoint = null;
                }
            }
            if (!this.isUndoRedo) {
                this.updateUndoRedoColl('zoom', prevObj, prevObj.objColl, prevObj.pointColl, prevCropObj);
            }
            this.isUndoRedo = false;
            var zoomOut = document.querySelector('#' + this.element.id + '_zoomOut');
            if (!isNullOrUndefined(zoomOut) && this.zoomFactor === 0) {
                zoomOut.classList.add('e-disabled');
                zoomOut.parentElement.classList.add('e-overlay');
            }
            else if (!isNullOrUndefined(zoomOut)) {
                zoomOut.classList.remove('e-disabled');
                zoomOut.parentElement.classList.remove('e-overlay');
            }
            this.autoEnablePan();
            if (!isNullOrUndefined(tempActiveObj)) {
                this.activeObj = extend({}, tempActiveObj, {}, true);
            }
            if (this.activeObj.shape === 'crop-custom') {
                this.currObjType.isCustomCrop = true;
            }
            var panBtn = this.element.querySelector('.e-img-pan .e-btn');
            if (!isNullOrUndefined(panBtn) && this.togglePan) {
                panBtn.classList.add('e-selected-btn');
            }
            else if (!isNullOrUndefined(panBtn)) {
                panBtn.classList.remove('e-selected-btn');
            }
            if (isShape) {
                this.activeObj = extend({}, this.objColl[this.objColl.length - 1], {}, true);
                this.objColl.pop();
                this.drawObject('duplicate', this.activeObj);
                this.updateToolbarItems();
            }
        }
    };
    /**
     * Draw ellipse on an image.
     *
     * @param {number} x - Specifies x-coordinate of ellipse.
     * @param {number} y - Specifies y-coordinate of ellipse.
     * @param {number} radiusX - the radius x point for the ellipse.
     * @param {number} radiusY - the radius y point for the ellipse.
     * @param {number} strokeWidth - the stroke width of ellipse.
     * @param {string} strokeColor - the stroke color of ellipse.
     * @param {string} fillColor - the fill color of the ellipse.
     * @returns {boolean}.
     *
     * ```html
     * <div id='imageeditor'></div>
     * ```
     * ```typescript
     * <script>
     * * var imageObj = new ImageEditor({
     * created: () => {
     * imageObj.drawEllipse(10, 10, 40, 60);
     * }
     * });
     * imageObj.appendTo("#imageeditor");
     * </script>
     * ```
     */
    ImageEditor.prototype.drawEllipse = function (x, y, radiusX, radiusY, strokeWidth, strokeColor, fillColor) {
        var isEllipse = false;
        var inRange = this.isPointsInRange(x, y);
        if (!this.disabled && this.isImageLoaded && inRange) {
            isEllipse = true;
            this.redrawActObj();
            this.activeObj.shape = 'ellipse';
            if (this.currObjType.shape === 'freehanddraw') {
                this.apply();
                this.upperCanvas.style.cursor = 'default';
                this.currObjType.shape = '';
            }
            this.currObjType.isCustomCrop = false;
            var start = { x: x, y: y };
            this.drawShape('ellipse', strokeWidth, strokeColor, fillColor, start, radiusX, radiusY);
        }
        return isEllipse;
    };
    /**
     * Draw line on an image.
     *
     * @param {number} startX – Specifies start point x-coordinate of line.
     * @param {number} startY – Specifies start point y-coordinate of line.
     * @param {number} endX - Specifies end point x-coordinates of line.
     * @param {number} endY - Specifies end point y-coordinates of the line.
     * @param {number} strokeWidth - Specifies the stroke width of line.
     * @param {string} strokeColor - Specifies the stroke color of line.
     * @returns {boolean}.
     */
    ImageEditor.prototype.drawLine = function (startX, startY, endX, endY, strokeWidth, strokeColor) {
        var isLine = false;
        var inRange = this.isPointsInRange(startX, startY);
        if (!this.disabled && this.isImageLoaded && inRange) {
            isLine = true;
            this.redrawActObj();
            this.activeObj.shape = 'line';
            if (this.currObjType.shape === 'freehanddraw') {
                this.apply();
                this.upperCanvas.style.cursor = 'default';
                this.currObjType.shape = '';
            }
            this.currObjType.isCustomCrop = false;
            var start = { x: startX, y: startY };
            var width = endX - startX;
            var height = endY - startY;
            this.drawShape('line', strokeWidth, strokeColor, null, start, width, height);
        }
        return isLine;
    };
    /**
     * Draw a rectangle on an image.
     *
     * @param {number} x - Specifies x-coordinate of rectangle.
     * @param {number} y - Specifies y-coordinate of rectangle.
     * @param {number} width - Specifies the width of the rectangle.
     * @param {number} height - Specifies the height of the rectangle.
     * @param {number} strokeWidth - Specifies the stroke width of rectangle.
     * @param {string} strokeColor - Specifies the stroke color of rectangle.
     * @param {string} fillColor - the fill color of the rectangle.
     * @returns {boolean}.
     */
    ImageEditor.prototype.drawRectangle = function (x, y, width, height, strokeWidth, strokeColor, fillColor) {
        var isRectangle = false;
        var inRange = this.isPointsInRange(x, y);
        if (!this.disabled && this.isImageLoaded && inRange) {
            isRectangle = true;
            this.redrawActObj();
            this.activeObj.shape = 'rectangle';
            if (this.currObjType.shape === 'freehanddraw') {
                this.apply();
                this.upperCanvas.style.cursor = 'default';
                this.currObjType.shape = '';
            }
            this.currObjType.isCustomCrop = false;
            var start = { x: x, y: y };
            this.drawShape('rectangle', strokeWidth, strokeColor, fillColor, start, width, height);
        }
        return isRectangle;
    };
    /**
     * Draw a text on an image.
     *
     * @param {number} x - Specifies x-coordinate of text.
     * @param {number} y - Specifies y-coordinate of text.
     * @param {string} text - Specifies the text to add on an image.
     * @param {string} fontFamily - Specifies the font family of the text.
     * @param {number} fontSize - Specifies the font size of the text.
     * @param {boolean} bold - Specifies whether the text is bold or not.
     * @param {boolean} italic - Specifies whether the text is italic or not.
     * @param {string} color - Specifies font color of the text.
     * @returns {boolean}.
     *
     * ```html
     * <div id='imageeditor'></div>
     * ```
     * ```typescript
     * <script>
     * var imageObj = new ImageEditor({
     * created: () => {
     *  imageObj.drawText(10, 10, 'Syncfusion', 'Arial', 12, true, true, '#000');
     * }
     * });
     * imageObj.appendTo("#imageeditor");
     *
     * </script>
     * ```
     */
    ImageEditor.prototype.drawText = function (x, y, text, fontFamily, fontSize, bold, italic, color) {
        var isText = false;
        var inRange = this.isPointsInRange(x, y);
        if (!this.disabled && this.isImageLoaded && inRange) {
            isText = true;
            this.drawShapeText(text, fontFamily, fontSize, bold, italic, color, x, y);
        }
        return isText;
    };
    /**
     * Selects a shape based on the given shape id. The id can be got from the public method ‘getShapeSettings’.
     *
     * @param {string} id - Specifies the shape id to select a shape on an image.
     * @returns {boolean}.
     * ```html
     * <div id='imageeditor'></div>
     * ```
     * ```typescript
     * <script>
     * var imageObj = new ImageEditor({
     * created: () => {
     *  imageObj.selectShape('shape_1');
     * }
     * });
     * imageObj.appendTo("#imageeditor");
     * </script>
     * ```
     */
    ImageEditor.prototype.selectShape = function (id) {
        var isSelected = false;
        if (!this.disabled && this.isImageLoaded) {
            this.applyActObj();
            if (id.split('_')[0] === 'shape') {
                var obj = void 0;
                for (var i = 0; i < this.objColl.length; i++) {
                    if (this.objColl[i].currIndex === id) {
                        obj = extend({}, this.objColl[i], {}, true);
                        break;
                    }
                }
                if (isNullOrUndefined(obj)) {
                    isSelected = false;
                }
                else {
                    isSelected = true;
                    this.activeObj = obj;
                    this.lowerContext.filter = this.canvasFilter;
                    this.redrawShape(this.activeObj);
                    if (this.activeObj.shape === 'text') {
                        this.refreshToolbar('text');
                    }
                    else if (this.activeObj.shape === 'pen') {
                        this.refreshToolbar('pen');
                    }
                    else {
                        this.refreshToolbar('shapes');
                    }
                    this.updateToolbarItems();
                }
            }
            else if (id.split('_')[0] === 'pen') {
                if (this.isFreehandDrawEditing) {
                    this.okBtn();
                }
                if (this.isFreehandDrawIndex(parseInt(id.split('_')[1], 10) - 1)) {
                    isSelected = true;
                    this.selectFreehandDraw(parseInt(id.split('_')[1], 10) - 1);
                    this.updateToolbarItems();
                }
                else {
                    isSelected = false;
                }
            }
        }
        return isSelected;
    };
    /**
     * Deletes a shape based on the given shape id. The id can be got from the public method getShapeSettings.
     *
     * @param {string} id - Specifies the shape id to delete the shape on an image.
     * @returns {void}.
     * ```html
     * <div id='imageeditor'></div>
     * ```
     * ```typescript
     * <script>
     * var imageObj = new ImageEditor({
     * created: () => {
     *  imageObj.deleteShape('shape_1');
     * }
     * });
     * imageObj.appendTo("#imageeditor");
     * </script>
     * ```
     */
    ImageEditor.prototype.deleteShape = function (id) {
        if (!this.disabled && this.isImageLoaded) {
            this.applyActObj();
            if (id.split('_')[0] === 'shape') {
                for (var i = 0; i < this.objColl.length; i++) {
                    if (this.objColl[i].currIndex === id) {
                        this.objColl.splice(i, 1);
                        break;
                    }
                }
            }
            else if (id.split('_')[0] === 'pen') {
                if (this.isFreehandDrawIndex(parseInt(id.split('_')[1], 10) - 1)) {
                    this.deleteFreehandDraw(parseInt(id.split('_')[1], 10) - 1, true);
                }
            }
            this.lowerContext.filter = this.canvasFilter;
            this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
            this.redrawImgWithObj();
            this.refreshToolbar('main');
        }
    };
    /**
     * Get particular shapes details based on id of the shape which is drawn on an image editor.
     *
     * @param {string} id - Specifies the shape id on an image.
     * @returns {ShapeSettings}.
     * ```html
     * <div id='imageeditor'></div>
     * ```
     * ```typescript
     * <script>
     * var imageObj = new ImageEditor({
     * created: () => {
     *  imageObj.getShapeSetting('shape_1');
     * }
     * });
     * imageObj.appendTo("#imageeditor");
     * </script>
     * ```
     */
    ImageEditor.prototype.getShapeSetting = function (id) {
        var shapeDetails;
        if (!this.disabled && this.isImageLoaded) {
            this.applyActObj();
            if (id.split('_')[0] === 'shape') {
                var obj = void 0;
                for (var i = 0; i < this.objColl.length; i++) {
                    if (this.objColl[i].currIndex === id) {
                        obj = extend({}, this.objColl[i], {}, true);
                        break;
                    }
                }
                shapeDetails = this.getObjDetails(obj);
            }
            else if (id.split('_')[0] === 'pen') {
                shapeDetails = this.getFreehandDrawDetails(parseInt(id.split('_')[1], 10) - 1);
            }
        }
        return shapeDetails;
    };
    /**
     * Get all the shapes details which is drawn on an image editor.
     *
     * @returns {ShapeSettings[]}.
     */
    ImageEditor.prototype.getShapeSettings = function () {
        var shapeDetailsColl = [];
        if (!this.disabled && this.isImageLoaded) {
            this.applyActObj();
            for (var i = 0; i < this.objColl.length; i++) {
                var shapeDetails = this.getObjDetails(this.objColl[i]);
                shapeDetailsColl.push(shapeDetails);
            }
            for (var i = 0; i < this.freehandCounter; i++) {
                var shapeDetails = this.getFreehandDrawDetails(i);
                shapeDetailsColl.push(shapeDetails);
            }
        }
        return shapeDetailsColl;
    };
    /**
     * To refresh the Canvas Wrapper.
     *
     * @returns {void}.
     */
    ImageEditor.prototype.update = function () {
        var canvasWrapper = document.querySelector('#' + this.element.id + '_canvasWrapper');
        if (!isNullOrUndefined(canvasWrapper)) {
            canvasWrapper.style.width = this.element.offsetWidth - 2 + 'px';
        }
        this.lowerCanvas.width = this.upperCanvas.width = this.element.offsetWidth - 2;
        if (Browser.isDevice) {
            if (!isNullOrUndefined(canvasWrapper)) {
                canvasWrapper.style.height = this.element.offsetHeight - (2 * this.toolbarHeight) - 5 + 'px';
            }
            this.lowerCanvas.height = this.upperCanvas.height = this.element.offsetHeight - (2 * this.toolbarHeight) - 5;
        }
        else {
            if (!isNullOrUndefined(canvasWrapper)) {
                canvasWrapper.style.height = this.element.offsetHeight - this.toolbarHeight - 3 + 'px';
            }
            this.lowerCanvas.height = this.upperCanvas.height = this.element.offsetHeight - this.toolbarHeight - 3;
        }
        this.lowerContext.filter = this.canvasFilter = this.initialAdjustmentValue = this.adjustmentValue = this.getDefaultFilter();
        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
    };
    /**
     * To apply the filters to an image
     *
     * @param {ImageFinetuneOptions } finetuneOption - Specifies the finetune options to the image.
     * @param {number } value - Specifies the value for finetuning the image.
     * @returns {void}.
     *
     */
    ImageEditor.prototype.finetuneImage = function (finetuneOption, value) {
        if (!this.disabled && this.isImageLoaded) {
            switch (finetuneOption.toLowerCase()) {
                case 'brightness':
                    this.setBrightness(value);
                    break;
                case 'contrast':
                    this.setContrast(value);
                    break;
                case 'hue':
                    this.setHue(value);
                    break;
                case 'saturation':
                    this.setSaturation(value);
                    break;
                case 'opacity':
                    this.setOpacity(value);
                    break;
                case 'blur':
                    this.setBlur(value);
                    break;
                case 'exposure':
                    this.setExposure(value);
                    break;
            }
            this.canvasFilter = this.lowerContext.filter;
        }
    };
    /**
     * To apply the filters to an image
     *
     * @param {ImageFilterOptions } filterOption - Specifies the filter options to the image.
     * @returns {void}.
     */
    ImageEditor.prototype.applyImageFilter = function (filterOption) {
        if (!this.disabled && this.isImageLoaded) {
            this.setFilter(filterOption.toString());
            this.canvasFilter = this.lowerContext.filter;
        }
    };
    /**
     * Undo the last user action.
     *
     * @private
     * @returns {void}.
     */
    ImageEditor.prototype.undo = function () {
        if (!this.disabled && this.isImageLoaded) {
            if (this.undoRedoStep > 0) {
                if (!isNullOrUndefined(this.activeObj.shape)) {
                    this.refreshToolbar('shapes');
                }
                else {
                    this.refreshToolbar('main');
                }
                if (!isNullOrUndefined(this.activeObj.activePoint) && this.activeObj.activePoint.width !== 0) {
                    this.tempActObj = this.activeObj;
                }
                this.refreshActiveObj();
                this.undoRedoStep--;
                this.enableDisableToolbarBtn();
                this.isUndoRedo = true;
                var obj = this.undoRedoColl[this.undoRedoStep];
                if (this.undoRedoColl.length === this.undoRedoStep) {
                    this.currObjType.isUndoAction = false;
                }
                else {
                    this.currObjType.isUndoAction = true;
                }
                if (obj.operation !== 'textAreaCustomization' && this.textArea.style.display === 'block') {
                    this.textArea.style.display = 'none';
                }
                this.element.querySelector('.e-contextual-toolbar-wrapper').classList.add('e-hide');
                this.isCancelAction = true;
                var activeObj = void 0;
                this.cropObj = extend({}, obj.previousCropObj, {}, true);
                this.afterCropActions = obj.previousObj.afterCropActions;
                this.lowerContext.filter = this.canvasFilter = obj.previousObj.filter;
                switch (obj.operation) {
                    case 'shapeTransform':
                        this.objColl = extend([], obj.previousObjColl, [], true);
                        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
                        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                        this.isUndoRedo = true;
                        this.redrawImgWithObj();
                        this.refreshActiveObj();
                        break;
                    case 'freehanddraw':
                        this.pointColl = obj.previousPointColl;
                        this.freehandCounter = this.pointColl.length;
                        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
                        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                        this.isUndoRedo = true;
                        this.redrawImgWithObj();
                        break;
                    case 'freehanddrawCustomized':
                        this.pointColl = obj.previousPointColl;
                        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
                        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                        this.isUndoRedo = true;
                        this.redrawImgWithObj();
                        break;
                    case 'deleteFreehandDrawing':
                    case 'deleteObj':
                        if (obj.operation === 'deleteFreehandDrawing') {
                            this.pointColl = obj.previousPointColl;
                            this.freehandCounter = this.pointColl.length;
                        }
                        else if (obj.operation === 'deleteObj') {
                            this.objColl = obj.previousObjColl;
                        }
                        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
                        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                        this.isUndoRedo = true;
                        this.redrawImgWithObj();
                        break;
                    case 'selectionTransform':
                        this.activeObj = extend({}, obj.previousObj.activeObj, {}, true);
                        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                        if (this.activeObj.activePoint.width !== 0 && this.activeObj.activePoint.height !== 0) {
                            this.drawObject('duplicate', this.activeObj);
                            this.refreshToolbar('main', true, true);
                        }
                        else {
                            this.refreshToolbar('main');
                            this.performUndoDefaultAction(obj);
                        }
                        this.currObjType.isCustomCrop = false;
                        break;
                    case 'textAreaCustomization':
                        this.objColl = extend([], obj.previousObjColl, [], true);
                        for (var i = 0; i < obj.previousObjColl.length; i++) {
                            if (!isNullOrUndefined(this.tempActObj)) {
                                if (this.tempActObj.currIndex === obj.previousObjColl[i].currIndex) {
                                    activeObj = extend({}, obj.previousObjColl[i], {}, true);
                                    this.objColl.splice(i, 1);
                                    break;
                                }
                            }
                            else {
                                activeObj = extend({}, obj.previousObjColl[obj.previousObjColl.length - 1], {}, true);
                                this.objColl.splice(i, 1);
                                break;
                            }
                        }
                        if (!isNullOrUndefined(activeObj)) {
                            this.updateTextBox(activeObj);
                        }
                        break;
                    case 'text':
                        if (!isNullOrUndefined(this.tempActObj)) {
                            this.activeObj = extend({}, this.tempActObj, {}, true);
                        }
                        if (obj.previousObjColl.length === 0 && this.objColl.length === 1) {
                            this.tempActObj = extend({}, this.objColl[0], {}, true);
                        }
                        else {
                            for (var i = 0; i < this.objColl.length; i++) {
                                if (!isNullOrUndefined(this.objColl[i]) &&
                                    isNullOrUndefined(obj.previousObjColl[i])) {
                                    this.tempActObj = extend({}, this.objColl[i], {}, true);
                                    break;
                                }
                                if (obj.previousObjColl[i].currIndex !== this.objColl[i].currIndex) {
                                    this.tempActObj = extend({}, this.objColl[i], {}, true);
                                    break;
                                }
                            }
                        }
                        this.activeObj = extend({}, this.tempActObj, {}, true);
                        this.objColl = extend([], obj.previousObjColl, [], true);
                        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
                        this.isUndoRedo = true;
                        this.redrawImgWithObj();
                        if (!isNullOrUndefined(this.activeObj) && this.activeObj.activePoint.width !== 0
                            && this.activeObj.activePoint.height !== 0) {
                            this.drawObject('duplicate');
                        }
                        else {
                            this.textArea.style.display = 'block';
                            this.textArea.value = obj.previousText;
                        }
                        break;
                    default:
                        this.performUndoDefaultAction(obj);
                        this.setAdjustment(obj.operation);
                        this.updateFilter(obj.operation, obj.filter);
                        break;
                }
                this.clearOuterCanvas(this.lowerContext);
                if (this.isCircleCrop && obj.operation !== 'crop') {
                    this.cropCircle(this.lowerContext);
                }
                if (this.zoomFactor > 0) {
                    this.dragCanvas = true;
                }
                this.isCancelAction = false;
                if (!isNullOrUndefined(this.activeObj.shape) && this.activeObj.shape.split('-')[0] === 'crop') {
                    this.refreshToolbar('main', true, true);
                }
                else {
                    this.refreshToolbar('main');
                }
            }
        }
    };
    /**
     * Redo the last user action.
     *
     * @private
     * @returns {void}.
     */
    ImageEditor.prototype.redo = function () {
        if (!this.disabled && this.isImageLoaded) {
            if (this.undoRedoStep < this.undoRedoColl.length) {
                if (!isNullOrUndefined(this.activeObj.shape)) {
                    this.refreshToolbar('shapes');
                }
                else {
                    this.refreshToolbar('main');
                }
                this.undoRedoStep++;
                this.enableDisableToolbarBtn();
                this.isUndoRedo = true;
                var obj = this.undoRedoColl[this.undoRedoStep - 1];
                if (this.undoRedoColl.length === this.undoRedoStep) {
                    this.currObjType.isUndoAction = false;
                }
                else {
                    this.currObjType.isUndoAction = true;
                }
                if (obj.operation !== 'textAreaCustomization' && this.textArea.style.display === 'block') {
                    this.textArea.style.display = 'none';
                }
                this.element.querySelector('.e-contextual-toolbar-wrapper').classList.add('e-hide');
                this.isCancelAction = true;
                this.cropObj = extend({}, obj.currentCropObj, {}, true);
                this.afterCropActions = obj.currentObj.afterCropActions;
                this.lowerContext.filter = this.canvasFilter = obj.currentObj.filter;
                var activeObj = void 0;
                var tempUndoRedoColl = void 0;
                var tempUndoRedoStep = void 0;
                switch (obj.operation) {
                    case 'shapeTransform':
                        this.objColl = extend([], obj.currentObjColl, [], true);
                        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
                        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                        this.isUndoRedo = true;
                        this.redrawImgWithObj();
                        this.refreshActiveObj();
                        break;
                    case 'freehanddraw':
                        this.pointColl = obj.currentPointColl;
                        this.freehandCounter = this.pointColl.length;
                        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
                        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                        this.isUndoRedo = true;
                        this.redrawImgWithObj();
                        break;
                    case 'freehanddrawCustomized':
                        this.pointColl = obj.currentPointColl;
                        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
                        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                        this.isUndoRedo = true;
                        this.redrawImgWithObj();
                        break;
                    case 'deleteFreehandDrawing':
                    case 'deleteObj':
                        if (obj.operation === 'deleteFreehandDrawing') {
                            this.pointColl = obj.currentPointColl;
                            this.freehandCounter = this.pointColl.length;
                        }
                        else if (obj.operation === 'deleteObj') {
                            this.objColl = obj.currentObjColl;
                        }
                        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
                        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                        this.isUndoRedo = true;
                        this.redrawImgWithObj();
                        break;
                    case 'selectionTransform':
                        this.activeObj = extend({}, obj.currentObj.activeObj, {}, true);
                        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                        if (this.activeObj.activePoint.width !== 0 && this.activeObj.activePoint.height !== 0) {
                            this.drawObject('duplicate', this.activeObj);
                            this.refreshToolbar('main', true, true);
                        }
                        else {
                            this.refreshToolbar('main');
                        }
                        this.currObjType.isCustomCrop = false;
                        break;
                    case 'textAreaCustomization':
                        this.objColl = extend([], obj.currentObjColl, [], true);
                        for (var i = 0; i < obj.currentObjColl.length; i++) {
                            if (!isNullOrUndefined(this.tempActObj)) {
                                if (this.tempActObj.currIndex === obj.currentObjColl[i].currIndex) {
                                    activeObj = extend({}, obj.currentObjColl[i], {}, true);
                                    this.objColl.splice(i, 1);
                                    break;
                                }
                            }
                            else {
                                activeObj = extend({}, obj.currentObjColl[obj.currentObjColl.length - 1], {}, true);
                                this.objColl.splice(i, 1);
                                break;
                            }
                        }
                        if (!isNullOrUndefined(activeObj)) {
                            this.updateTextBox(activeObj);
                        }
                        break;
                    case 'text':
                        if (!isNullOrUndefined(this.tempActObj)) {
                            this.activeObj = extend({}, this.tempActObj, {}, true);
                        }
                        if (obj.previousObjColl.length === 0 && this.objColl.length === 1) {
                            this.tempActObj = extend({}, this.objColl[0], {}, true);
                        }
                        else {
                            for (var i = 0; i < this.objColl.length; i++) {
                                if (!isNullOrUndefined(this.objColl[i]) &&
                                    isNullOrUndefined(obj.previousObjColl[i])) {
                                    this.tempActObj = extend({}, this.objColl[i], {}, true);
                                    break;
                                }
                                if (obj.previousObjColl[i].currIndex !== this.objColl[i].currIndex) {
                                    this.tempActObj = extend({}, this.objColl[i], {}, true);
                                    break;
                                }
                            }
                        }
                        this.objColl = extend([], obj.currentObjColl, [], true);
                        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);
                        this.isUndoRedo = true;
                        this.redrawImgWithObj();
                        if (!isNullOrUndefined(this.tempActObj)) {
                            this.activeObj = extend({}, this.tempActObj, {}, true);
                        }
                        this.textArea.style.display = 'block';
                        this.textArea.value = obj.currentText;
                        tempUndoRedoColl = extend([], this.undoRedoColl, [], true);
                        tempUndoRedoStep = this.undoRedoStep;
                        this.redrawActObj();
                        this.undoRedoColl = tempUndoRedoColl;
                        this.undoRedoStep = tempUndoRedoStep;
                        this.textArea.style.display = 'none';
                        this.textArea.value = '';
                        this.redrawActObj();
                        break;
                    default:
                        this.objColl = [];
                        this.pointColl = [];
                        this.freehandCounter = 0;
                        this.setCurrentObj(obj.currentObj);
                        this.destLeft = obj.currentObj.destPoints.startX;
                        this.destTop = obj.currentObj.destPoints.startY;
                        activeObj = extend({}, this.activeObj, {}, true);
                        this.objColl = extend([], obj.currentObjColl, [], true);
                        this.pointColl = extend([], obj.currentPointColl, [], true);
                        this.freehandCounter = this.pointColl.length;
                        this.lowerContext.filter = 'none';
                        this.iterateObjColl();
                        this.freehandRedraw(this.lowerContext);
                        this.lowerContext.filter = obj.currentObj.filter;
                        this.activeObj = activeObj;
                        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);
                        if (this.activeObj.activePoint.width !== 0 && this.activeObj.activePoint.height !== 0) {
                            this.drawObject('duplicate');
                        }
                        this.setAdjustment(obj.operation);
                        this.updateFilter(obj.operation);
                        break;
                }
                this.clearOuterCanvas(this.lowerContext);
                if (this.isCircleCrop) {
                    this.cropCircle(this.lowerContext);
                }
                if (this.zoomFactor > 0) {
                    this.dragCanvas = true;
                }
                this.isCancelAction = false;
                if (this.undoRedoStep === this.undoRedoColl.length) {
                    this.isUndoRedo = false;
                }
                if (!isNullOrUndefined(this.activeObj.shape) && this.activeObj.shape.split('-')[0] === 'crop') {
                    this.refreshToolbar('main', true, true);
                }
                else {
                    this.refreshToolbar('main');
                }
            }
        }
    };
    var ImageEditor_1;
    __decorate([
        Property('')
    ], ImageEditor.prototype, "cssClass", void 0);
    __decorate([
        Property(false)
    ], ImageEditor.prototype, "disabled", void 0);
    __decorate([
        Property('100%')
    ], ImageEditor.prototype, "height", void 0);
    __decorate([
        Property('Bootstrap5')
    ], ImageEditor.prototype, "theme", void 0);
    __decorate([
        Property()
    ], ImageEditor.prototype, "toolbar", void 0);
    __decorate([
        Property()
    ], ImageEditor.prototype, "toolbarTemplate", void 0);
    __decorate([
        Property('100%')
    ], ImageEditor.prototype, "width", void 0);
    __decorate([
        Property(false)
    ], ImageEditor.prototype, "allowUndoRedo", void 0);
    __decorate([
        Property(false)
    ], ImageEditor.prototype, "isReadOnly", void 0);
    __decorate([
        Property(false)
    ], ImageEditor.prototype, "enableRtl", void 0);
    __decorate([
        Property(false)
    ], ImageEditor.prototype, "enablePersistence", void 0);
    __decorate([
        Complex({}, FinetuneSettings)
    ], ImageEditor.prototype, "finetuneSettings", void 0);
    __decorate([
        Event()
    ], ImageEditor.prototype, "beforeSave", void 0);
    __decorate([
        Event()
    ], ImageEditor.prototype, "created", void 0);
    __decorate([
        Event()
    ], ImageEditor.prototype, "destroyed", void 0);
    __decorate([
        Event()
    ], ImageEditor.prototype, "zooming", void 0);
    __decorate([
        Event()
    ], ImageEditor.prototype, "panning", void 0);
    __decorate([
        Event()
    ], ImageEditor.prototype, "cropping", void 0);
    __decorate([
        Event()
    ], ImageEditor.prototype, "rotating", void 0);
    __decorate([
        Event()
    ], ImageEditor.prototype, "flipping", void 0);
    __decorate([
        Event()
    ], ImageEditor.prototype, "shapeChanging", void 0);
    __decorate([
        Event()
    ], ImageEditor.prototype, "fileOpened", void 0);
    __decorate([
        Event()
    ], ImageEditor.prototype, "saved", void 0);
    __decorate([
        Event()
    ], ImageEditor.prototype, "toolbarCreated", void 0);
    __decorate([
        Event()
    ], ImageEditor.prototype, "toolbarUpdating", void 0);
    __decorate([
        Event()
    ], ImageEditor.prototype, "toolbarItemClicked", void 0);
    __decorate([
        Event()
    ], ImageEditor.prototype, "imageFiltering", void 0);
    __decorate([
        Event()
    ], ImageEditor.prototype, "finetuneValueChanging", void 0);
    ImageEditor = ImageEditor_1 = __decorate([
        NotifyPropertyChanges
    ], ImageEditor);
    return ImageEditor;
}(Component));

/**
 * Image Editor Modules
 */

/**
 * ImageEditor all modules
 */

export { FinetuneSettings, ImageEditor };
//# sourceMappingURL=ej2-image-editor.es5.js.map
