{"ast":null,"code":"import _objectSpread from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchProjectById, projectUpdated, updateProject } from \"../../../features/projectsSlice\";\nimport BIZTOOL_PAGE_CONFIG from \"../../../pages/bizTools/pageConfig\";\nexport default function checkbizFormula_try() {\n  // return <h1>Small</h1>;\n\n  var totalRevenue = [];\n  var totalFixedCost = [];\n  var dispatch = useDispatch();\n  var selectedProject = useSelector(function (state) {\n    return state.projects.selectedProject;\n  });\n  var _useState = useState({\n      user: false,\n      projects: false\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoaded = _useState2[0],\n    setIsLoaded = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    reload = _useState4[0],\n    setReload = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    newRevenuePerService = _useState6[0],\n    setNewRevenuePerService = _useState6[1];\n  useEffect(function () {\n    if (isLoaded.projects) {\n      dispatch(fetchProjectById(selectedProject._id));\n      setIsLoaded({\n        user: true,\n        project: true\n      });\n    }\n    if (!reload) {\n      dispatch(fetchProjectById(selectedProject._id));\n      setReload(true);\n    }\n    setTableRevenueData(selectedProject.revenue);\n    setTableExpenseData(selectedProject.expense);\n  }, [selectedProject]);\n  var _useState7 = useState(selectedProject.revenue),\n    _useState8 = _slicedToArray(_useState7, 2),\n    tableRevenueData = _useState8[0],\n    setTableRevenueData = _useState8[1];\n  var _useState9 = useState(selectedProject.expense),\n    _useState10 = _slicedToArray(_useState9, 2),\n    tableExpenseData = _useState10[0],\n    setTableExpenseData = _useState10[1];\n  var _useState11 = useState(BIZTOOL_PAGE_CONFIG.revenue),\n    _useState12 = _slicedToArray(_useState11, 2),\n    config = _useState12[0],\n    setConfig = _useState12[1];\n  var _useState13 = useState(),\n    _useState14 = _slicedToArray(_useState13, 2),\n    tableService = _useState14[0],\n    setTableService = _useState14[1];\n  var _useState15 = useState(),\n    _useState16 = _slicedToArray(_useState15, 2),\n    service = _useState16[0],\n    setService = _useState16[1];\n  var _useState17 = useState(),\n    _useState18 = _slicedToArray(_useState17, 2),\n    revenuePerService = _useState18[0],\n    setRevenuePerService = _useState18[1];\n  var onValChange = function onValChange(tableID, unitID, amountPerUnit) {\n    var shallowServiceTables = JSON.parse(JSON.stringify(selectedProject.revenue.service_tables));\n    var shallowProductTables = JSON.parse(JSON.stringify(selectedProject.revenue.product_tables));\n    var shallowFixedCostTables = JSON.parse(JSON.stringify(selectedProject.expense.fixed_cost_tables));\n    shallowServiceTables = shallowServiceTables.map(function (eachTableService) {\n      if (eachTableService._id == tableID) {\n        eachTableService.services = eachTableService.services.map(function (eachService) {\n          if (eachService._id == unitID) {\n            if (eachService.revenue_per_service !== amountPerUnit) {\n              eachService.revenue_per_service = amountPerUnit;\n            }\n          }\n          return eachService;\n        });\n      }\n      return eachTableService;\n    });\n    shallowProductTables = shallowProductTables.map(function (eachTableProduct) {\n      if (eachTableProduct._id == tableID) {\n        eachTableProduct.products = eachTableProduct.products.map(function (eachProduct) {\n          if (eachProduct._id == unitID) {\n            if (eachProduct.revenue_per_unit !== amountPerUnit) {\n              eachProduct.revenue_per_unit = amountPerUnit;\n            }\n          }\n          return eachProduct;\n        });\n      }\n      return eachTableProduct;\n    });\n    shallowFixedCostTables = shallowFixedCostTables.map(function (eachTableFixedCost) {\n      if (eachTableFixedCost._id == tableID) {\n        eachTableFixedCost.fixed_costs = eachTableFixedCost.fixed_costs.map(function (eachFixedCost) {\n          if (eachFixedCost._id == unitID) {\n            if (eachFixedCost.amount !== amountPerUnit) {\n              eachFixedCost.amount = amountPerUnit;\n            }\n          }\n          return eachFixedCost;\n        });\n      }\n      return eachTableFixedCost;\n    });\n    var shallowSelectedProject = _objectSpread({}, selectedProject, {\n      revenue: {\n        service_tables: shallowServiceTables,\n        product_tables: shallowProductTables\n      },\n      expense: {\n        fixed_cost_tables: shallowFixedCostTables\n      }\n    });\n    dispatch(projectUpdated(shallowSelectedProject));\n    dispatch(updateProject({\n      id: selectedProject._id,\n      data: shallowSelectedProject\n    }));\n  };\n  function sum_revenue_service(tableRevenueData) {\n    var sumServiceRevenue = 0;\n    tableRevenueData.service_tables.forEach(function (tableService) {\n      tableService.services.forEach(function (eachService) {\n        sumServiceRevenue += eachService.revenue_per_service;\n      });\n    });\n    return sumServiceRevenue;\n  }\n  function sum_revenue_product(tableRevenueData) {\n    var sumProductRevenue = 0;\n    tableRevenueData.product_tables.forEach(function (tableProduct) {\n      tableProduct.products.forEach(function (eachProduct) {\n        sumProductRevenue += eachProduct.revenue_per_unit;\n      });\n    });\n    return sumProductRevenue;\n  }\n  function sum_revenue() {\n    var totalValue = 0;\n    totalValue = sum_revenue_service() + sum_revenue_product();\n    return totalValue;\n  }\n  function sum_fixed_cost(tableExpenseData) {\n    var sumFixedCost = 0;\n    tableExpenseData.fixed_cost_tables.forEach(function (tableFixedCost) {\n      tableFixedCost.fixed_costs.forEach(function (eachFixedCost) {\n        sumFixedCost += eachFixedCost.amount;\n      });\n    });\n    return sumFixedCost;\n  }\n  function fixed_cost_per_years() {\n    var totalValue = 0;\n    totalValue = sum_fixed_cost();\n    totalFixedCost.push(totalValue);\n    return totalValue;\n  }\n  function revenue_per_years() {\n    var totalValue = 0;\n    totalValue = sum_revenue_service() + sum_revenue_product();\n    totalFixedCost.push(totalValue);\n    return totalValue;\n  }\n  function total_income() {\n    var totalValue = 0;\n    totalValue = sum_revenue() - sum_fixed_cost();\n    totalFixedCost.push(totalValue);\n    return totalValue;\n  }\n}\n\n//  named exports\n// export {\n//     sum_revenue_service, sum_revenue_product, sum_revenue,\n//     sum_fixed_cost, fixed_cost_per_years, revenue_per_years, \n//     total_income,\n// };","map":{"version":3,"names":["React","useEffect","useState","useContext","useDispatch","useSelector","fetchProjectById","projectUpdated","updateProject","BIZTOOL_PAGE_CONFIG","checkbizFormula_try","totalRevenue","totalFixedCost","dispatch","selectedProject","state","projects","_useState","user","_useState2","_slicedToArray","isLoaded","setIsLoaded","_useState3","_useState4","reload","setReload","_useState5","_useState6","newRevenuePerService","setNewRevenuePerService","_id","project","setTableRevenueData","revenue","setTableExpenseData","expense","_useState7","_useState8","tableRevenueData","_useState9","_useState10","tableExpenseData","_useState11","_useState12","config","setConfig","_useState13","_useState14","tableService","setTableService","_useState15","_useState16","service","setService","_useState17","_useState18","revenuePerService","setRevenuePerService","onValChange","tableID","unitID","amountPerUnit","shallowServiceTables","JSON","parse","stringify","service_tables","shallowProductTables","product_tables","shallowFixedCostTables","fixed_cost_tables","map","eachTableService","services","eachService","revenue_per_service","eachTableProduct","products","eachProduct","revenue_per_unit","eachTableFixedCost","fixed_costs","eachFixedCost","amount","shallowSelectedProject","_objectSpread","id","data","sum_revenue_service","sumServiceRevenue","forEach","sum_revenue_product","sumProductRevenue","tableProduct","sum_revenue","totalValue","sum_fixed_cost","sumFixedCost","tableFixedCost","fixed_cost_per_years","push","revenue_per_years","total_income"],"sources":["/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/src/components/checkbiz/checkbizFormula/checkbizFormula_try.jsx"],"sourcesContent":["import React, { useEffect, useState, useContext  } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchProjectById, projectUpdated, updateProject } from \"../../../features/projectsSlice\"\nimport BIZTOOL_PAGE_CONFIG from \"../../../pages/bizTools/pageConfig\";\n\nexport default function checkbizFormula_try() {\n    // return <h1>Small</h1>;\n\nconst totalRevenue = []\nconst totalFixedCost = []\n\nconst dispatch = useDispatch();\nconst selectedProject = useSelector((state) => state.projects.selectedProject);\nconst [isLoaded, setIsLoaded] = useState({ user: false, projects: false });\nconst [reload, setReload] = useState(false)\n\nconst [newRevenuePerService, setNewRevenuePerService] = useState(null);\n\nuseEffect(() => {\n  if (isLoaded.projects) {\n    dispatch(fetchProjectById(selectedProject._id));\n    setIsLoaded({ user: true, project: true });\n  }\n  if (!reload) {\n    dispatch(fetchProjectById(selectedProject._id))\n    setReload(true)\n  }\n  setTableRevenueData(selectedProject.revenue)\n  setTableExpenseData(selectedProject.expense)\n}, [selectedProject]);\n\nconst [tableRevenueData, setTableRevenueData] = useState(selectedProject.revenue)\nconst [tableExpenseData, setTableExpenseData] = useState(selectedProject.expense)\nconst [config, setConfig] = useState(BIZTOOL_PAGE_CONFIG.revenue)\n\nconst [tableService, setTableService] = useState()\nconst [service, setService] = useState()\nconst [revenuePerService, setRevenuePerService] = useState()\n\nconst onValChange = (tableID, unitID, amountPerUnit) => {\n  let shallowServiceTables = JSON.parse(JSON.stringify(selectedProject.revenue.service_tables))\n  let shallowProductTables = JSON.parse(JSON.stringify(selectedProject.revenue.product_tables))\n  let shallowFixedCostTables = JSON.parse(JSON.stringify(selectedProject.expense.fixed_cost_tables))\n\n  shallowServiceTables = shallowServiceTables.map((eachTableService) => {\n    if (eachTableService._id == tableID) {\n      eachTableService.services = eachTableService.services.map((eachService) => {\n        if (eachService._id == unitID) {\n          if (eachService.revenue_per_service !== amountPerUnit) {\n            eachService.revenue_per_service = amountPerUnit\n          }\n        }\n        return eachService\n      })\n    }\n    return eachTableService\n  })\n\n  shallowProductTables = shallowProductTables.map((eachTableProduct) => {\n    if (eachTableProduct._id == tableID) {\n      eachTableProduct.products = eachTableProduct.products.map((eachProduct) => {\n        if (eachProduct._id == unitID) {\n          if (eachProduct.revenue_per_unit !== amountPerUnit) {\n            eachProduct.revenue_per_unit = amountPerUnit\n          }\n        }\n        return eachProduct\n      })\n    }\n    return eachTableProduct\n  })\n\n  shallowFixedCostTables = shallowFixedCostTables.map((eachTableFixedCost) => {\n    if (eachTableFixedCost._id == tableID) {\n      eachTableFixedCost.fixed_costs = eachTableFixedCost.fixed_costs.map((eachFixedCost) => {\n        if (eachFixedCost._id == unitID) {\n          if (eachFixedCost.amount !== amountPerUnit) {\n            eachFixedCost.amount = amountPerUnit\n          }\n        }\n        return eachFixedCost\n      })\n    }\n    return eachTableFixedCost\n  })\n\n  let shallowSelectedProject = {\n    ...selectedProject,\n    revenue: {\n      service_tables: shallowServiceTables,\n      product_tables: shallowProductTables,\n    },\n    expense: {\n      fixed_cost_tables: shallowFixedCostTables,\n    }\n  }\n  dispatch(projectUpdated(shallowSelectedProject))\n  dispatch(updateProject({ id: selectedProject._id, data: shallowSelectedProject }))\n}\n\n\n\nfunction sum_revenue_service(tableRevenueData) {\n    let sumServiceRevenue = 0;\n    tableRevenueData.service_tables.forEach(tableService => {\n        tableService.services.forEach(eachService => {\n            sumServiceRevenue += eachService.revenue_per_service;\n        });\n    });\n    return sumServiceRevenue;\n}\nfunction sum_revenue_product(tableRevenueData) {\n    let sumProductRevenue = 0;\n    tableRevenueData.product_tables.forEach(tableProduct => {\n        tableProduct.products.forEach(eachProduct => {\n            sumProductRevenue += eachProduct.revenue_per_unit;\n        });\n    });\n    return sumProductRevenue;\n}\n\nfunction sum_revenue() {\n    let totalValue = 0\n    totalValue = sum_revenue_service() + sum_revenue_product()\n    return totalValue\n}\n\n\nfunction sum_fixed_cost(tableExpenseData) {\n    let sumFixedCost = 0;\n    tableExpenseData.fixed_cost_tables.forEach(tableFixedCost => {\n        tableFixedCost.fixed_costs.forEach(eachFixedCost => {\n            sumFixedCost += eachFixedCost.amount;\n        });\n    });\n    return sumFixedCost;\n}\n\nfunction fixed_cost_per_years() {\n    let totalValue = 0\n    totalValue = sum_fixed_cost()\n    totalFixedCost.push(totalValue)\n    return totalValue\n}\n\nfunction revenue_per_years() {\n    let totalValue = 0\n    totalValue = sum_revenue_service() + sum_revenue_product()\n    totalFixedCost.push(totalValue)\n    return totalValue\n}\n\nfunction total_income() {\n    let totalValue = 0\n    totalValue = sum_revenue() - sum_fixed_cost()\n    totalFixedCost.push(totalValue)\n    return totalValue\n}\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n//  named exports\n// export {\n//     sum_revenue_service, sum_revenue_product, sum_revenue,\n//     sum_fixed_cost, fixed_cost_per_years, revenue_per_years, \n//     total_income,\n// };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}