{"ast":null,"code":"var isCustomProperty = require('../../utils/names').isCustomProperty;\nvar TYPE = require('../../tokenizer').TYPE;\nvar rawMode = require('./Raw').mode;\nvar IDENT = TYPE.Ident;\nvar HASH = TYPE.Hash;\nvar COLON = TYPE.Colon;\nvar SEMICOLON = TYPE.Semicolon;\nvar DELIM = TYPE.Delim;\nvar WHITESPACE = TYPE.WhiteSpace;\nvar EXCLAMATIONMARK = 0x0021; // U+0021 EXCLAMATION MARK (!)\nvar NUMBERSIGN = 0x0023; // U+0023 NUMBER SIGN (#)\nvar DOLLARSIGN = 0x0024; // U+0024 DOLLAR SIGN ($)\nvar AMPERSAND = 0x0026; // U+0026 ANPERSAND (&)\nvar ASTERISK = 0x002A; // U+002A ASTERISK (*)\nvar PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\nvar SOLIDUS = 0x002F; // U+002F SOLIDUS (/)\n\nfunction consumeValueRaw(startToken) {\n  return this.Raw(startToken, rawMode.exclamationMarkOrSemicolon, true);\n}\nfunction consumeCustomPropertyRaw(startToken) {\n  return this.Raw(startToken, rawMode.exclamationMarkOrSemicolon, false);\n}\nfunction consumeValue() {\n  var startValueToken = this.scanner.tokenIndex;\n  var value = this.Value();\n  if (value.type !== 'Raw' && this.scanner.eof === false && this.scanner.tokenType !== SEMICOLON && this.scanner.isDelim(EXCLAMATIONMARK) === false && this.scanner.isBalanceEdge(startValueToken) === false) {\n    this.error();\n  }\n  return value;\n}\nmodule.exports = {\n  name: 'Declaration',\n  structure: {\n    important: [Boolean, String],\n    property: String,\n    value: ['Value', 'Raw']\n  },\n  parse: function parse() {\n    var start = this.scanner.tokenStart;\n    var startToken = this.scanner.tokenIndex;\n    var property = readProperty.call(this);\n    var customProperty = isCustomProperty(property);\n    var parseValue = customProperty ? this.parseCustomProperty : this.parseValue;\n    var consumeRaw = customProperty ? consumeCustomPropertyRaw : consumeValueRaw;\n    var important = false;\n    var value;\n    this.scanner.skipSC();\n    this.eat(COLON);\n    var valueStart = this.scanner.tokenIndex;\n    if (!customProperty) {\n      this.scanner.skipSC();\n    }\n    if (parseValue) {\n      value = this.parseWithFallback(consumeValue, consumeRaw);\n    } else {\n      value = consumeRaw.call(this, this.scanner.tokenIndex);\n    }\n    if (customProperty && value.type === 'Value' && value.children.isEmpty()) {\n      for (var offset = valueStart - this.scanner.tokenIndex; offset <= 0; offset++) {\n        if (this.scanner.lookupType(offset) === WHITESPACE) {\n          value.children.appendData({\n            type: 'WhiteSpace',\n            loc: null,\n            value: ' '\n          });\n          break;\n        }\n      }\n    }\n    if (this.scanner.isDelim(EXCLAMATIONMARK)) {\n      important = getImportant.call(this);\n      this.scanner.skipSC();\n    }\n\n    // Do not include semicolon to range per spec\n    // https://drafts.csswg.org/css-syntax/#declaration-diagram\n\n    if (this.scanner.eof === false && this.scanner.tokenType !== SEMICOLON && this.scanner.isBalanceEdge(startToken) === false) {\n      this.error();\n    }\n    return {\n      type: 'Declaration',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      important: important,\n      property: property,\n      value: value\n    };\n  },\n  generate: function generate(node) {\n    this.chunk(node.property);\n    this.chunk(':');\n    this.node(node.value);\n    if (node.important) {\n      this.chunk(node.important === true ? '!important' : '!' + node.important);\n    }\n  },\n  walkContext: 'declaration'\n};\nfunction readProperty() {\n  var start = this.scanner.tokenStart;\n  var prefix = 0;\n\n  // hacks\n  if (this.scanner.tokenType === DELIM) {\n    switch (this.scanner.source.charCodeAt(this.scanner.tokenStart)) {\n      case ASTERISK:\n      case DOLLARSIGN:\n      case PLUSSIGN:\n      case NUMBERSIGN:\n      case AMPERSAND:\n        this.scanner.next();\n        break;\n\n      // TODO: not sure we should support this hack\n      case SOLIDUS:\n        this.scanner.next();\n        if (this.scanner.isDelim(SOLIDUS)) {\n          this.scanner.next();\n        }\n        break;\n    }\n  }\n  if (prefix) {\n    this.scanner.skip(prefix);\n  }\n  if (this.scanner.tokenType === HASH) {\n    this.eat(HASH);\n  } else {\n    this.eat(IDENT);\n  }\n  return this.scanner.substrToCursor(start);\n}\n\n// ! ws* important\nfunction getImportant() {\n  this.eat(DELIM);\n  this.scanner.skipSC();\n  var important = this.consume(IDENT);\n\n  // store original value in case it differ from `important`\n  // for better original source restoring and hacks like `!ie` support\n  return important === 'important' ? true : important;\n}","map":null,"metadata":{},"sourceType":"script"}