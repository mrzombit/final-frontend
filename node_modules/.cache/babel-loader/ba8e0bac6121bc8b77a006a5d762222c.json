{"ast":null,"code":"var isWhiteSpace = require('../../tokenizer').isWhiteSpace;\nvar cmpStr = require('../../tokenizer').cmpStr;\nvar TYPE = require('../../tokenizer').TYPE;\nvar FUNCTION = TYPE.Function;\nvar URL = TYPE.Url;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\n\n// <url-token> | <function-token> <string> )\nmodule.exports = {\n  name: 'Url',\n  structure: {\n    value: ['String', 'Raw']\n  },\n  parse: function parse() {\n    var start = this.scanner.tokenStart;\n    var value;\n    switch (this.scanner.tokenType) {\n      case URL:\n        var rawStart = start + 4;\n        var rawEnd = this.scanner.tokenEnd - 1;\n        while (rawStart < rawEnd && isWhiteSpace(this.scanner.source.charCodeAt(rawStart))) {\n          rawStart++;\n        }\n        while (rawStart < rawEnd && isWhiteSpace(this.scanner.source.charCodeAt(rawEnd - 1))) {\n          rawEnd--;\n        }\n        value = {\n          type: 'Raw',\n          loc: this.getLocation(rawStart, rawEnd),\n          value: this.scanner.source.substring(rawStart, rawEnd)\n        };\n        this.eat(URL);\n        break;\n      case FUNCTION:\n        if (!cmpStr(this.scanner.source, this.scanner.tokenStart, this.scanner.tokenEnd, 'url(')) {\n          this.error('Function name must be `url`');\n        }\n        this.eat(FUNCTION);\n        this.scanner.skipSC();\n        value = this.String();\n        this.scanner.skipSC();\n        this.eat(RIGHTPARENTHESIS);\n        break;\n      default:\n        this.error('Url or Function is expected');\n    }\n    return {\n      type: 'Url',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      value: value\n    };\n  },\n  generate: function generate(node) {\n    this.chunk('url');\n    this.chunk('(');\n    this.node(node.value);\n    this.chunk(')');\n  }\n};","map":null,"metadata":{},"sourceType":"script"}