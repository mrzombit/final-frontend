{"ast":null,"code":"var EOF = 0;\n\n// https://drafts.csswg.org/css-syntax-3/\n// ยง 4.2. Definitions\n\n// digit\n// A code point between U+0030 DIGIT ZERO (0) and U+0039 DIGIT NINE (9).\nfunction isDigit(code) {\n  return code >= 0x0030 && code <= 0x0039;\n}\n\n// hex digit\n// A digit, or a code point between U+0041 LATIN CAPITAL LETTER A (A) and U+0046 LATIN CAPITAL LETTER F (F),\n// or a code point between U+0061 LATIN SMALL LETTER A (a) and U+0066 LATIN SMALL LETTER F (f).\nfunction isHexDigit(code) {\n  return isDigit(code) ||\n  // 0 .. 9\n  code >= 0x0041 && code <= 0x0046 ||\n  // A .. F\n  code >= 0x0061 && code <= 0x0066 // a .. f\n  ;\n}\n\n// uppercase letter\n// A code point between U+0041 LATIN CAPITAL LETTER A (A) and U+005A LATIN CAPITAL LETTER Z (Z).\nfunction isUppercaseLetter(code) {\n  return code >= 0x0041 && code <= 0x005A;\n}\n\n// lowercase letter\n// A code point between U+0061 LATIN SMALL LETTER A (a) and U+007A LATIN SMALL LETTER Z (z).\nfunction isLowercaseLetter(code) {\n  return code >= 0x0061 && code <= 0x007A;\n}\n\n// letter\n// An uppercase letter or a lowercase letter.\nfunction isLetter(code) {\n  return isUppercaseLetter(code) || isLowercaseLetter(code);\n}\n\n// non-ASCII code point\n// A code point with a value equal to or greater than U+0080 <control>.\nfunction isNonAscii(code) {\n  return code >= 0x0080;\n}\n\n// name-start code point\n// A letter, a non-ASCII code point, or U+005F LOW LINE (_).\nfunction isNameStart(code) {\n  return isLetter(code) || isNonAscii(code) || code === 0x005F;\n}\n\n// name code point\n// A name-start code point, a digit, or U+002D HYPHEN-MINUS (-).\nfunction isName(code) {\n  return isNameStart(code) || isDigit(code) || code === 0x002D;\n}\n\n// non-printable code point\n// A code point between U+0000 NULL and U+0008 BACKSPACE, or U+000B LINE TABULATION,\n// or a code point between U+000E SHIFT OUT and U+001F INFORMATION SEPARATOR ONE, or U+007F DELETE.\nfunction isNonPrintable(code) {\n  return code >= 0x0000 && code <= 0x0008 || code === 0x000B || code >= 0x000E && code <= 0x001F || code === 0x007F;\n}\n\n// newline\n// U+000A LINE FEED. Note that U+000D CARRIAGE RETURN and U+000C FORM FEED are not included in this definition,\n// as they are converted to U+000A LINE FEED during preprocessing.\n// TODO: we doesn't do a preprocessing, so check a code point for U+000D CARRIAGE RETURN and U+000C FORM FEED\nfunction isNewline(code) {\n  return code === 0x000A || code === 0x000D || code === 0x000C;\n}\n\n// whitespace\n// A newline, U+0009 CHARACTER TABULATION, or U+0020 SPACE.\nfunction isWhiteSpace(code) {\n  return isNewline(code) || code === 0x0020 || code === 0x0009;\n}\n\n// ยง 4.3.8. Check if two code points are a valid escape\nfunction isValidEscape(first, second) {\n  // If the first code point is not U+005C REVERSE SOLIDUS (\\), return false.\n  if (first !== 0x005C) {\n    return false;\n  }\n\n  // Otherwise, if the second code point is a newline or EOF, return false.\n  if (isNewline(second) || second === EOF) {\n    return false;\n  }\n\n  // Otherwise, return true.\n  return true;\n}\n\n// ยง 4.3.9. Check if three code points would start an identifier\nfunction isIdentifierStart(first, second, third) {\n  // Look at the first code point:\n\n  // U+002D HYPHEN-MINUS\n  if (first === 0x002D) {\n    // If the second code point is a name-start code point or a U+002D HYPHEN-MINUS,\n    // or the second and third code points are a valid escape, return true. Otherwise, return false.\n    return isNameStart(second) || second === 0x002D || isValidEscape(second, third);\n  }\n\n  // name-start code point\n  if (isNameStart(first)) {\n    // Return true.\n    return true;\n  }\n\n  // U+005C REVERSE SOLIDUS (\\)\n  if (first === 0x005C) {\n    // If the first and second code points are a valid escape, return true. Otherwise, return false.\n    return isValidEscape(first, second);\n  }\n\n  // anything else\n  // Return false.\n  return false;\n}\n\n// ยง 4.3.10. Check if three code points would start a number\nfunction isNumberStart(first, second, third) {\n  // Look at the first code point:\n\n  // U+002B PLUS SIGN (+)\n  // U+002D HYPHEN-MINUS (-)\n  if (first === 0x002B || first === 0x002D) {\n    // If the second code point is a digit, return true.\n    if (isDigit(second)) {\n      return 2;\n    }\n\n    // Otherwise, if the second code point is a U+002E FULL STOP (.)\n    // and the third code point is a digit, return true.\n    // Otherwise, return false.\n    return second === 0x002E && isDigit(third) ? 3 : 0;\n  }\n\n  // U+002E FULL STOP (.)\n  if (first === 0x002E) {\n    // If the second code point is a digit, return true. Otherwise, return false.\n    return isDigit(second) ? 2 : 0;\n  }\n\n  // digit\n  if (isDigit(first)) {\n    // Return true.\n    return 1;\n  }\n\n  // anything else\n  // Return false.\n  return 0;\n}\n\n//\n// Misc\n//\n\n// detect BOM (https://en.wikipedia.org/wiki/Byte_order_mark)\nfunction isBOM(code) {\n  // UTF-16BE\n  if (code === 0xFEFF) {\n    return 1;\n  }\n\n  // UTF-16LE\n  if (code === 0xFFFE) {\n    return 1;\n  }\n  return 0;\n}\n\n// Fast code category\n//\n// https://drafts.csswg.org/css-syntax/#tokenizer-definitions\n// > non-ASCII code point\n// >   A code point with a value equal to or greater than U+0080 <control>\n// > name-start code point\n// >   A letter, a non-ASCII code point, or U+005F LOW LINE (_).\n// > name code point\n// >   A name-start code point, a digit, or U+002D HYPHEN-MINUS (-)\n// That means only ASCII code points has a special meaning and we define a maps for 0..127 codes only\nvar CATEGORY = new Array(0x80);\ncharCodeCategory.Eof = 0x80;\ncharCodeCategory.WhiteSpace = 0x82;\ncharCodeCategory.Digit = 0x83;\ncharCodeCategory.NameStart = 0x84;\ncharCodeCategory.NonPrintable = 0x85;\nfor (var i = 0; i < CATEGORY.length; i++) {\n  switch (true) {\n    case isWhiteSpace(i):\n      CATEGORY[i] = charCodeCategory.WhiteSpace;\n      break;\n    case isDigit(i):\n      CATEGORY[i] = charCodeCategory.Digit;\n      break;\n    case isNameStart(i):\n      CATEGORY[i] = charCodeCategory.NameStart;\n      break;\n    case isNonPrintable(i):\n      CATEGORY[i] = charCodeCategory.NonPrintable;\n      break;\n    default:\n      CATEGORY[i] = i || charCodeCategory.Eof;\n  }\n}\nfunction charCodeCategory(code) {\n  return code < 0x80 ? CATEGORY[code] : charCodeCategory.NameStart;\n}\n;\nmodule.exports = {\n  isDigit: isDigit,\n  isHexDigit: isHexDigit,\n  isUppercaseLetter: isUppercaseLetter,\n  isLowercaseLetter: isLowercaseLetter,\n  isLetter: isLetter,\n  isNonAscii: isNonAscii,\n  isNameStart: isNameStart,\n  isName: isName,\n  isNonPrintable: isNonPrintable,\n  isNewline: isNewline,\n  isWhiteSpace: isWhiteSpace,\n  isValidEscape: isValidEscape,\n  isIdentifierStart: isIdentifierStart,\n  isNumberStart: isNumberStart,\n  isBOM: isBOM,\n  charCodeCategory: charCodeCategory\n};","map":null,"metadata":{},"sourceType":"script"}