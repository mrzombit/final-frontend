{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertNode = exports.convertElementStyle = exports.convertStylesheet = exports.convertRule = void 0;\nvar node_html_parser_1 = require(\"node-html-parser\");\nvar css_tree_1 = __importDefault(require(\"css-tree\"));\nvar supportedStyles_1 = __importDefault(require(\"./supportedStyles\"));\nvar camelize = require('camelize');\nvar convertRule = function convertRule(rule) {\n  var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'style';\n  var declarations = rule.children.filter(function (declaration) {\n    return declaration.type === 'Declaration';\n  }).toArray();\n  return declarations.map(function (entry) {\n    return Object.assign(Object.assign({}, entry), {\n      property: camelize(entry.property)\n    });\n  }).reduce(function (style, _ref) {\n    var property = _ref.property,\n      value = _ref.value;\n    var valueString = css_tree_1.default.generate(value);\n    if (property && value) {\n      if (property === 'fontFamily') {\n        valueString = valueString.replace(/[\"']+/g, '');\n        if (valueString.includes(',')) {\n          var reduced = valueString.split(',', 2)[0];\n          console.warn(\"react-pdf doesn't support fontFamily lists like \\\"\".concat(valueString, \"\\\". Reducing to \\\"\").concat(reduced, \"\\\".\"));\n          valueString = reduced;\n        }\n      } else if (!supportedStyles_1.default.includes(property)) {\n        if (property === 'background' && /^#?[a-zA-Z0-9]+$/.test(valueString) || /^rgba?\\([0-9, ]+\\)$/i.test(valueString) || /^hsla?\\([0-9.%, ]+\\)$/i.test(valueString)) {\n          property = 'backgroundColor';\n        } else {\n          console.warn(\"\".concat(source, \": Found unsupported style \\\"\").concat(property, \"\\\"\"), {\n            property: property,\n            value: value\n          });\n        }\n      }\n      style[property] = valueString;\n    }\n    return style;\n  }, {});\n};\nexports.convertRule = convertRule;\nvar convertStylesheet = function convertStylesheet(stylesheet) {\n  var response = {};\n  try {\n    var parsed = css_tree_1.default.parse(stylesheet);\n    var rules = parsed.children.filter(function (rule) {\n      var _a;\n      return rule.type === 'Rule' && ((_a = rule.prelude) === null || _a === void 0 ? void 0 : _a.type) === 'SelectorList';\n    });\n    rules.forEach(function (rule) {\n      var style = (0, exports.convertRule)(rule.block);\n      if (rule.prelude.type !== 'SelectorList') {\n        return;\n      }\n      rule.prelude.children.forEach(function (selector) {\n        var selectorString = css_tree_1.default.generate(selector);\n        response[selectorString] = style;\n      });\n    });\n  } catch (e) {\n    console.error(\"Error parsing stylesheet: \\\"\".concat(stylesheet, \"\\\"\"), e);\n  }\n  return response;\n};\nexports.convertStylesheet = convertStylesheet;\nvar convertElementStyle = function convertElementStyle(styleAttr, tag) {\n  try {\n    var parsed = css_tree_1.default.parse(\"\".concat(tag, \" { \").concat(styleAttr, \" }\"));\n    var rules = parsed.children.filter(function (rule) {\n      var _a;\n      return rule.type === 'Rule' && ((_a = rule.prelude) === null || _a === void 0 ? void 0 : _a.type) === 'SelectorList';\n    });\n    var firstRule = rules.first();\n    return firstRule ? (0, exports.convertRule)(firstRule.block, tag) : undefined;\n  } catch (e) {\n    console.error(\"Error parsing style attribute \\\"\".concat(styleAttr, \"\\\" for tag: \").concat(tag), e);\n  }\n};\nexports.convertElementStyle = convertElementStyle;\nvar convertNode = function convertNode(node) {\n  if (node.nodeType === node_html_parser_1.NodeType.TEXT_NODE) {\n    return node.rawText;\n  }\n  if (node.nodeType === node_html_parser_1.NodeType.COMMENT_NODE) {\n    return '';\n  }\n  if (node.nodeType !== node_html_parser_1.NodeType.ELEMENT_NODE) {\n    throw new Error('Not sure what this is');\n  }\n  var html = node;\n  var content = html.childNodes.map(exports.convertNode);\n  var kindCounters = {};\n  content.forEach(function (child) {\n    if (typeof child !== 'string') {\n      child.indexOfType = child.tag in kindCounters ? kindCounters[child.tag] = kindCounters[child.tag] + 1 : kindCounters[child.tag] = 0;\n    }\n  });\n  var style;\n  if (html.attributes.style && html.attributes.style.trim()) {\n    style = (0, exports.convertElementStyle)(html.attributes.style, html.tagName);\n  }\n  return Object.assign(html, {\n    tag: (html.tagName || '').toLowerCase(),\n    style: style ? [style] : [],\n    content: content,\n    indexOfType: 0\n  });\n};\nexports.convertNode = convertNode;\nvar parseHtml = function parseHtml(text) {\n  var html = (0, node_html_parser_1.parse)(text, {\n    comment: false\n  });\n  var stylesheets = html.querySelectorAll('style').map(function (styleNode) {\n    return styleNode.childNodes.map(function (textNode) {\n      return textNode.rawText.trim();\n    }).join('\\n');\n  }).filter(function (styleText) {\n    return !!styleText;\n  }).map(exports.convertStylesheet);\n  return {\n    stylesheets: stylesheets,\n    rootElement: (0, exports.convertNode)(html)\n  };\n};\nexports.default = parseHtml;","map":null,"metadata":{},"sourceType":"script"}