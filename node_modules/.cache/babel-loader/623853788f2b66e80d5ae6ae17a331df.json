{"ast":null,"code":"var createCustomError = require('../utils/createCustomError');\nvar MAX_LINE_LENGTH = 100;\nvar OFFSET_CORRECTION = 60;\nvar TAB_REPLACEMENT = '    ';\nfunction sourceFragment(error, extraLines) {\n  function processLines(start, end) {\n    return lines.slice(start, end).map(function (line, idx) {\n      var num = String(start + idx + 1);\n      while (num.length < maxNumLength) {\n        num = ' ' + num;\n      }\n      return num + ' |' + line;\n    }).join('\\n');\n  }\n  var lines = error.source.split(/\\r\\n?|\\n|\\f/);\n  var line = error.line;\n  var column = error.column;\n  var startLine = Math.max(1, line - extraLines) - 1;\n  var endLine = Math.min(line + extraLines, lines.length + 1);\n  var maxNumLength = Math.max(4, String(endLine).length) + 1;\n  var cutLeft = 0;\n\n  // column correction according to replaced tab before column\n  column += (TAB_REPLACEMENT.length - 1) * (lines[line - 1].substr(0, column - 1).match(/\\t/g) || []).length;\n  if (column > MAX_LINE_LENGTH) {\n    cutLeft = column - OFFSET_CORRECTION + 3;\n    column = OFFSET_CORRECTION - 2;\n  }\n  for (var i = startLine; i <= endLine; i++) {\n    if (i >= 0 && i < lines.length) {\n      lines[i] = lines[i].replace(/\\t/g, TAB_REPLACEMENT);\n      lines[i] = (cutLeft > 0 && lines[i].length > cutLeft ? \"\\u2026\" : '') + lines[i].substr(cutLeft, MAX_LINE_LENGTH - 2) + (lines[i].length > cutLeft + MAX_LINE_LENGTH - 1 ? \"\\u2026\" : '');\n    }\n  }\n  return [processLines(startLine, line), new Array(column + maxNumLength + 2).join('-') + '^', processLines(line, endLine)].filter(Boolean).join('\\n');\n}\nvar SyntaxError = function SyntaxError(message, source, offset, line, column) {\n  var error = createCustomError('SyntaxError', message);\n  error.source = source;\n  error.offset = offset;\n  error.line = line;\n  error.column = column;\n  error.sourceFragment = function (extraLines) {\n    return sourceFragment(error, isNaN(extraLines) ? 0 : extraLines);\n  };\n  Object.defineProperty(error, 'formattedMessage', {\n    get: function get() {\n      return 'Parse error: ' + error.message + '\\n' + sourceFragment(error, 2);\n    }\n  });\n\n  // for backward capability\n  error.parseError = {\n    offset: offset,\n    line: line,\n    column: column\n  };\n  return error;\n};\nmodule.exports = SyntaxError;","map":null,"metadata":{},"sourceType":"script"}