{"ast":null,"code":"var OffsetToLocation = require('../common/OffsetToLocation');\nvar SyntaxError = require('../common/SyntaxError');\nvar TokenStream = require('../common/TokenStream');\nvar List = require('../common/List');\nvar tokenize = require('../tokenizer');\nvar constants = require('../tokenizer/const');\nvar _require = require('../tokenizer/utils'),\n  findWhiteSpaceStart = _require.findWhiteSpaceStart,\n  cmpStr = _require.cmpStr;\nvar sequence = require('./sequence');\nvar noop = function noop() {};\nvar TYPE = constants.TYPE;\nvar NAME = constants.NAME;\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar IDENT = TYPE.Ident;\nvar FUNCTION = TYPE.Function;\nvar URL = TYPE.Url;\nvar HASH = TYPE.Hash;\nvar PERCENTAGE = TYPE.Percentage;\nvar NUMBER = TYPE.Number;\nvar NUMBERSIGN = 0x0023; // U+0023 NUMBER SIGN (#)\nvar NULL = 0;\nfunction createParseContext(name) {\n  return function () {\n    return this[name]();\n  };\n}\nfunction processConfig(config) {\n  var parserConfig = {\n    context: {},\n    scope: {},\n    atrule: {},\n    pseudo: {}\n  };\n  if (config.parseContext) {\n    for (var name in config.parseContext) {\n      switch (typeof config.parseContext[name]) {\n        case 'function':\n          parserConfig.context[name] = config.parseContext[name];\n          break;\n        case 'string':\n          parserConfig.context[name] = createParseContext(config.parseContext[name]);\n          break;\n      }\n    }\n  }\n  if (config.scope) {\n    for (var name in config.scope) {\n      parserConfig.scope[name] = config.scope[name];\n    }\n  }\n  if (config.atrule) {\n    for (var name in config.atrule) {\n      var atrule = config.atrule[name];\n      if (atrule.parse) {\n        parserConfig.atrule[name] = atrule.parse;\n      }\n    }\n  }\n  if (config.pseudo) {\n    for (var name in config.pseudo) {\n      var pseudo = config.pseudo[name];\n      if (pseudo.parse) {\n        parserConfig.pseudo[name] = pseudo.parse;\n      }\n    }\n  }\n  if (config.node) {\n    for (var name in config.node) {\n      parserConfig[name] = config.node[name].parse;\n    }\n  }\n  return parserConfig;\n}\nmodule.exports = function createParser(config) {\n  var parser = {\n    scanner: new TokenStream(),\n    locationMap: new OffsetToLocation(),\n    filename: '<unknown>',\n    needPositions: false,\n    onParseError: noop,\n    onParseErrorThrow: false,\n    parseAtrulePrelude: true,\n    parseRulePrelude: true,\n    parseValue: true,\n    parseCustomProperty: false,\n    readSequence: sequence,\n    createList: function createList() {\n      return new List();\n    },\n    createSingleNodeList: function createSingleNodeList(node) {\n      return new List().appendData(node);\n    },\n    getFirstListNode: function getFirstListNode(list) {\n      return list && list.first();\n    },\n    getLastListNode: function getLastListNode(list) {\n      return list.last();\n    },\n    parseWithFallback: function parseWithFallback(consumer, fallback) {\n      var startToken = this.scanner.tokenIndex;\n      try {\n        return consumer.call(this);\n      } catch (e) {\n        if (this.onParseErrorThrow) {\n          throw e;\n        }\n        var fallbackNode = fallback.call(this, startToken);\n        this.onParseErrorThrow = true;\n        this.onParseError(e, fallbackNode);\n        this.onParseErrorThrow = false;\n        return fallbackNode;\n      }\n    },\n    lookupNonWSType: function lookupNonWSType(offset) {\n      do {\n        var type = this.scanner.lookupType(offset++);\n        if (type !== WHITESPACE) {\n          return type;\n        }\n      } while (type !== NULL);\n      return NULL;\n    },\n    eat: function eat(tokenType) {\n      if (this.scanner.tokenType !== tokenType) {\n        var offset = this.scanner.tokenStart;\n        var message = NAME[tokenType] + ' is expected';\n\n        // tweak message and offset\n        switch (tokenType) {\n          case IDENT:\n            // when identifier is expected but there is a function or url\n            if (this.scanner.tokenType === FUNCTION || this.scanner.tokenType === URL) {\n              offset = this.scanner.tokenEnd - 1;\n              message = 'Identifier is expected but function found';\n            } else {\n              message = 'Identifier is expected';\n            }\n            break;\n          case HASH:\n            if (this.scanner.isDelim(NUMBERSIGN)) {\n              this.scanner.next();\n              offset++;\n              message = 'Name is expected';\n            }\n            break;\n          case PERCENTAGE:\n            if (this.scanner.tokenType === NUMBER) {\n              offset = this.scanner.tokenEnd;\n              message = 'Percent sign is expected';\n            }\n            break;\n          default:\n            // when test type is part of another token show error for current position + 1\n            // e.g. eat(HYPHENMINUS) will fail on \"-foo\", but pointing on \"-\" is odd\n            if (this.scanner.source.charCodeAt(this.scanner.tokenStart) === tokenType) {\n              offset = offset + 1;\n            }\n        }\n        this.error(message, offset);\n      }\n      this.scanner.next();\n    },\n    consume: function consume(tokenType) {\n      var value = this.scanner.getTokenValue();\n      this.eat(tokenType);\n      return value;\n    },\n    consumeFunctionName: function consumeFunctionName() {\n      var name = this.scanner.source.substring(this.scanner.tokenStart, this.scanner.tokenEnd - 1);\n      this.eat(FUNCTION);\n      return name;\n    },\n    getLocation: function getLocation(start, end) {\n      if (this.needPositions) {\n        return this.locationMap.getLocationRange(start, end, this.filename);\n      }\n      return null;\n    },\n    getLocationFromList: function getLocationFromList(list) {\n      if (this.needPositions) {\n        var head = this.getFirstListNode(list);\n        var tail = this.getLastListNode(list);\n        return this.locationMap.getLocationRange(head !== null ? head.loc.start.offset - this.locationMap.startOffset : this.scanner.tokenStart, tail !== null ? tail.loc.end.offset - this.locationMap.startOffset : this.scanner.tokenStart, this.filename);\n      }\n      return null;\n    },\n    error: function error(message, offset) {\n      var location = typeof offset !== 'undefined' && offset < this.scanner.source.length ? this.locationMap.getLocation(offset) : this.scanner.eof ? this.locationMap.getLocation(findWhiteSpaceStart(this.scanner.source, this.scanner.source.length - 1)) : this.locationMap.getLocation(this.scanner.tokenStart);\n      throw new SyntaxError(message || 'Unexpected input', this.scanner.source, location.offset, location.line, location.column);\n    }\n  };\n  config = processConfig(config || {});\n  for (var key in config) {\n    parser[key] = config[key];\n  }\n  return function (source, options) {\n    options = options || {};\n    var context = options.context || 'default';\n    var onComment = options.onComment;\n    var ast;\n    tokenize(source, parser.scanner);\n    parser.locationMap.setSource(source, options.offset, options.line, options.column);\n    parser.filename = options.filename || '<unknown>';\n    parser.needPositions = Boolean(options.positions);\n    parser.onParseError = typeof options.onParseError === 'function' ? options.onParseError : noop;\n    parser.onParseErrorThrow = false;\n    parser.parseAtrulePrelude = 'parseAtrulePrelude' in options ? Boolean(options.parseAtrulePrelude) : true;\n    parser.parseRulePrelude = 'parseRulePrelude' in options ? Boolean(options.parseRulePrelude) : true;\n    parser.parseValue = 'parseValue' in options ? Boolean(options.parseValue) : true;\n    parser.parseCustomProperty = 'parseCustomProperty' in options ? Boolean(options.parseCustomProperty) : false;\n    if (!parser.context.hasOwnProperty(context)) {\n      throw new Error('Unknown context `' + context + '`');\n    }\n    if (typeof onComment === 'function') {\n      parser.scanner.forEachToken(function (type, start, end) {\n        if (type === COMMENT) {\n          var loc = parser.getLocation(start, end);\n          var value = cmpStr(source, end - 2, end, '*/') ? source.slice(start + 2, end - 2) : source.slice(start + 2, end);\n          onComment(value, loc);\n        }\n      });\n    }\n    ast = parser.context[context].call(parser, options);\n    if (!parser.scanner.eof) {\n      parser.error();\n    }\n    return ast;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}