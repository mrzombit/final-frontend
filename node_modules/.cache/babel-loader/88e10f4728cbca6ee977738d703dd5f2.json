{"ast":null,"code":"import _toConsumableArray from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { SelectorType, AttributeAction } from \"./types\";\nvar attribValChars = [\"\\\\\", '\"'];\nvar pseudoValChars = [].concat(attribValChars, [\"(\", \")\"]);\nvar charsToEscapeInAttributeValue = new Set(attribValChars.map(function (c) {\n  return c.charCodeAt(0);\n}));\nvar charsToEscapeInPseudoValue = new Set(pseudoValChars.map(function (c) {\n  return c.charCodeAt(0);\n}));\nvar charsToEscapeInName = new Set([].concat(_toConsumableArray(pseudoValChars), [\"~\", \"^\", \"$\", \"*\", \"+\", \"!\", \"|\", \":\", \"[\", \"]\", \" \", \".\"]).map(function (c) {\n  return c.charCodeAt(0);\n}));\n/**\n * Turns `selector` back into a string.\n *\n * @param selector Selector to stringify.\n */\nexport function stringify(selector) {\n  return selector.map(function (token) {\n    return token.map(stringifyToken).join(\"\");\n  }).join(\", \");\n}\nfunction stringifyToken(token, index, arr) {\n  switch (token.type) {\n    // Simple types\n    case SelectorType.Child:\n      return index === 0 ? \"> \" : \" > \";\n    case SelectorType.Parent:\n      return index === 0 ? \"< \" : \" < \";\n    case SelectorType.Sibling:\n      return index === 0 ? \"~ \" : \" ~ \";\n    case SelectorType.Adjacent:\n      return index === 0 ? \"+ \" : \" + \";\n    case SelectorType.Descendant:\n      return \" \";\n    case SelectorType.ColumnCombinator:\n      return index === 0 ? \"|| \" : \" || \";\n    case SelectorType.Universal:\n      // Return an empty string if the selector isn't needed.\n      return token.namespace === \"*\" && index + 1 < arr.length && \"name\" in arr[index + 1] ? \"\" : \"\".concat(getNamespace(token.namespace), \"*\");\n    case SelectorType.Tag:\n      return getNamespacedName(token);\n    case SelectorType.PseudoElement:\n      return \"::\".concat(escapeName(token.name, charsToEscapeInName)).concat(token.data === null ? \"\" : \"(\".concat(escapeName(token.data, charsToEscapeInPseudoValue), \")\"));\n    case SelectorType.Pseudo:\n      return \":\".concat(escapeName(token.name, charsToEscapeInName)).concat(token.data === null ? \"\" : \"(\".concat(typeof token.data === \"string\" ? escapeName(token.data, charsToEscapeInPseudoValue) : stringify(token.data), \")\"));\n    case SelectorType.Attribute:\n      {\n        if (token.name === \"id\" && token.action === AttributeAction.Equals && token.ignoreCase === \"quirks\" && !token.namespace) {\n          return \"#\".concat(escapeName(token.value, charsToEscapeInName));\n        }\n        if (token.name === \"class\" && token.action === AttributeAction.Element && token.ignoreCase === \"quirks\" && !token.namespace) {\n          return \".\".concat(escapeName(token.value, charsToEscapeInName));\n        }\n        var name = getNamespacedName(token);\n        if (token.action === AttributeAction.Exists) {\n          return \"[\".concat(name, \"]\");\n        }\n        return \"[\".concat(name).concat(getActionValue(token.action), \"=\\\"\").concat(escapeName(token.value, charsToEscapeInAttributeValue), \"\\\"\").concat(token.ignoreCase === null ? \"\" : token.ignoreCase ? \" i\" : \" s\", \"]\");\n      }\n  }\n}\nfunction getActionValue(action) {\n  switch (action) {\n    case AttributeAction.Equals:\n      return \"\";\n    case AttributeAction.Element:\n      return \"~\";\n    case AttributeAction.Start:\n      return \"^\";\n    case AttributeAction.End:\n      return \"$\";\n    case AttributeAction.Any:\n      return \"*\";\n    case AttributeAction.Not:\n      return \"!\";\n    case AttributeAction.Hyphen:\n      return \"|\";\n    case AttributeAction.Exists:\n      throw new Error(\"Shouldn't be here\");\n  }\n}\nfunction getNamespacedName(token) {\n  return \"\".concat(getNamespace(token.namespace)).concat(escapeName(token.name, charsToEscapeInName));\n}\nfunction getNamespace(namespace) {\n  return namespace !== null ? \"\".concat(namespace === \"*\" ? \"*\" : escapeName(namespace, charsToEscapeInName), \"|\") : \"\";\n}\nfunction escapeName(str, charsToEscape) {\n  var lastIdx = 0;\n  var ret = \"\";\n  for (var i = 0; i < str.length; i++) {\n    if (charsToEscape.has(str.charCodeAt(i))) {\n      ret += \"\".concat(str.slice(lastIdx, i), \"\\\\\").concat(str.charAt(i));\n      lastIdx = i + 1;\n    }\n  }\n  return ret.length > 0 ? ret + str.slice(lastIdx) : str;\n}","map":null,"metadata":{},"sourceType":"module"}