{"ast":null,"code":"var cmpChar = require('../../tokenizer').cmpChar;\nvar cmpStr = require('../../tokenizer').cmpStr;\nvar TYPE = require('../../tokenizer').TYPE;\nvar IDENT = TYPE.Ident;\nvar STRING = TYPE.String;\nvar NUMBER = TYPE.Number;\nvar FUNCTION = TYPE.Function;\nvar URL = TYPE.Url;\nvar HASH = TYPE.Hash;\nvar DIMENSION = TYPE.Dimension;\nvar PERCENTAGE = TYPE.Percentage;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar COMMA = TYPE.Comma;\nvar DELIM = TYPE.Delim;\nvar NUMBERSIGN = 0x0023; // U+0023 NUMBER SIGN (#)\nvar ASTERISK = 0x002A; // U+002A ASTERISK (*)\nvar PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\nvar HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\nvar SOLIDUS = 0x002F; // U+002F SOLIDUS (/)\nvar U = 0x0075; // U+0075 LATIN SMALL LETTER U (u)\n\nmodule.exports = function defaultRecognizer(context) {\n  switch (this.scanner.tokenType) {\n    case HASH:\n      return this.Hash();\n    case COMMA:\n      context.space = null;\n      context.ignoreWSAfter = true;\n      return this.Operator();\n    case LEFTPARENTHESIS:\n      return this.Parentheses(this.readSequence, context.recognizer);\n    case LEFTSQUAREBRACKET:\n      return this.Brackets(this.readSequence, context.recognizer);\n    case STRING:\n      return this.String();\n    case DIMENSION:\n      return this.Dimension();\n    case PERCENTAGE:\n      return this.Percentage();\n    case NUMBER:\n      return this.Number();\n    case FUNCTION:\n      return cmpStr(this.scanner.source, this.scanner.tokenStart, this.scanner.tokenEnd, 'url(') ? this.Url() : this.Function(this.readSequence, context.recognizer);\n    case URL:\n      return this.Url();\n    case IDENT:\n      // check for unicode range, it should start with u+ or U+\n      if (cmpChar(this.scanner.source, this.scanner.tokenStart, U) && cmpChar(this.scanner.source, this.scanner.tokenStart + 1, PLUSSIGN)) {\n        return this.UnicodeRange();\n      } else {\n        return this.Identifier();\n      }\n    case DELIM:\n      var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n      if (code === SOLIDUS || code === ASTERISK || code === PLUSSIGN || code === HYPHENMINUS) {\n        return this.Operator(); // TODO: replace with Delim\n      }\n\n      // TODO: produce a node with Delim node type\n\n      if (code === NUMBERSIGN) {\n        this.error('Hex or identifier is expected', this.scanner.tokenStart + 1);\n      }\n      break;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}