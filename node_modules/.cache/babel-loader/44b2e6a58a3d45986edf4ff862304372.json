{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyStylesheets = exports.renderElements = exports.renderBucketElement = exports.collapseWhitespace = exports.renderElement = exports.bucketElements = exports.hasBlockContent = exports.isBlockStyle = void 0;\nvar react_1 = __importDefault(require(\"react\"));\nvar renderers_1 = __importStar(require(\"./renderers\"));\nvar renderer_1 = require(\"@react-pdf/renderer\");\nvar parse_1 = __importDefault(require(\"./parse\"));\nvar styles_1 = require(\"./styles\");\nvar tags_1 = require(\"./tags\");\nvar convertEntities = function convertEntities(input) {\n  var entities = [['amp', '&'], ['apos', \"'\"], ['#x27', \"'\"], ['#x2F', '/'], ['#39', \"'\"], ['#47', '/'], ['lt', '<'], ['gt', '>'], ['nbsp', ' '], ['quot', '\"']];\n  var text = input;\n  for (var _i = 0, _entities = entities; _i < _entities.length; _i++) {\n    var entity = _entities[_i];\n    text = text.replace(new RegExp('&' + entity[0] + ';', 'g'), entity[1]);\n  }\n  return text;\n};\nvar isBlockStyle = function isBlockStyle(style) {\n  return ['block', 'flex'].includes(style.display);\n};\nexports.isBlockStyle = isBlockStyle;\nvar hasBlockContent = function hasBlockContent(element) {\n  var _a;\n  if (typeof element === 'string') {\n    return false;\n  }\n  if (element.tag === 'a' || tags_1.isText[element.tag]) {\n    if ((_a = element.style) === null || _a === void 0 ? void 0 : _a.some(exports.isBlockStyle)) {\n      return true;\n    }\n    // anchor tags match their content\n    if (element.content) {\n      return element.content.some(exports.hasBlockContent);\n    }\n    return false;\n  }\n  return true;\n};\nexports.hasBlockContent = hasBlockContent;\nvar ltrim = function ltrim(text) {\n  return text.replace(/^\\s+/, '');\n};\nvar rtrim = function rtrim(text) {\n  return text.replace(/\\s+$/, '');\n};\n/**\n * Groups all block and non-block elements into buckets so that all non-block elements can be rendered in a parent Text element\n * @param elements Elements to place in buckets of block and non-block content\n * @param collapse\n * @param parentTag\n */\nvar bucketElements = function bucketElements(elements, collapse, parentTag) {\n  var bucket;\n  var hasBlock;\n  var buckets = [];\n  elements.forEach(function (element, index) {\n    // clear empty strings between block elements\n    if (typeof element === 'string') {\n      if (collapse) {\n        if (parentTag === 'pre') {\n          if (element[0] === '\\n') {\n            element = element.substr(1);\n          }\n          if (element[element.length - 1] === '\\n') {\n            element = element.substr(0, element.length - 1);\n          }\n        } else {\n          if (hasBlock || hasBlock === undefined) {\n            element = ltrim(element);\n          }\n          var next = elements[index + 1];\n          if (next && (0, exports.hasBlockContent)(next)) {\n            element = rtrim(element);\n          }\n        }\n      }\n      if (element === '') {\n        return;\n      }\n    }\n    var block = (0, exports.hasBlockContent)(element);\n    if (block !== hasBlock) {\n      hasBlock = block;\n      bucket = {\n        hasBlock: hasBlock,\n        content: []\n      };\n      buckets.push(bucket);\n    }\n    bucket.content.push(element);\n  });\n  return buckets;\n};\nexports.bucketElements = bucketElements;\nvar renderElement = function renderElement(element, stylesheets, renderers, children, index) {\n  if (typeof element === 'string') {\n    element = convertEntities(element);\n    if (/(\\s )|( \\s)/.test(element)) {\n      // hack to avoid collapsing sequential spaces\n      return element.split(/(\\s{2,})/g).reduce(function (strings, string, index) {\n        return string === '' ? strings : strings.concat(index % 2 ? string.split('') : string);\n      }, []);\n    }\n    return element;\n  }\n  var Element = renderers[element.tag];\n  if (!Element) {\n    if (!(element.tag in tags_1.isText)) {\n      // Unknown element, do nothing\n      console.warn(\"Excluding \\\"\".concat(element.tag, \"\\\" because it has no renderer\"));\n      Element = renderers_1.renderNoop;\n    } else {\n      Element = (0, exports.hasBlockContent)(element) ? renderers_1.renderBlock : renderers_1.renderInline;\n    }\n  }\n  return react_1.default.createElement(Element, {\n    key: index,\n    style: element.style,\n    children: children,\n    element: element,\n    stylesheets: stylesheets\n  });\n};\nexports.renderElement = renderElement;\nvar collapseWhitespace = function collapseWhitespace(string) {\n  return string.replace(/(\\s+)/g, ' ');\n};\nexports.collapseWhitespace = collapseWhitespace;\nvar renderBucketElement = function renderBucketElement(element, options, index) {\n  if (typeof element === 'string') {\n    return (0, exports.renderElement)(options.collapse ? (0, exports.collapseWhitespace)(element) : element, options.stylesheets, options.renderers, undefined, index);\n  }\n  return (0, exports.renderElement)(element, options.stylesheets, options.renderers, (0, exports.renderElements)(element.content, element.tag === 'pre' ? Object.assign(Object.assign({}, options), {\n    collapse: false\n  }) : options, element), index);\n};\nexports.renderBucketElement = renderBucketElement;\nvar isAnchor = function isAnchor(content) {\n  return Array.isArray(content) ? content.length === 1 && typeof content[0] !== 'string' && content[0].tag === 'a' : content.tag === 'a';\n};\nvar renderElements = function renderElements(elements, options, parent) {\n  var buckets = (0, exports.bucketElements)(elements, options.collapse, parent === null || parent === void 0 ? void 0 : parent.tag);\n  var parentIsText = parent && !isAnchor(parent) && !(0, exports.hasBlockContent)(parent);\n  var renderedBuckets = buckets.map(function (bucket, bucketIndex) {\n    var wrapWithText = !bucket.hasBlock && !parentIsText && !isAnchor(bucket.content);\n    // Avoid extra array\n    if (bucket.content.length === 1 && !wrapWithText) {\n      return (0, exports.renderBucketElement)(bucket.content[0], options, bucketIndex);\n    }\n    var rendered = bucket.content.map(function (element, index) {\n      return (0, exports.renderBucketElement)(element, options, index);\n    });\n    // unwrap extra array\n    if (rendered.length === 1) {\n      rendered = rendered[0];\n    }\n    if (wrapWithText) {\n      return react_1.default.createElement(renderer_1.Text, {\n        key: bucketIndex\n      }, rendered);\n    } else {\n      return buckets.length === 1 ? rendered : react_1.default.createElement(react_1.default.Fragment, {\n        key: bucketIndex\n      }, rendered);\n    }\n  });\n  // unwrap extra array\n  return buckets.length === 1 ? renderedBuckets[0] : renderedBuckets;\n};\nexports.renderElements = renderElements;\nvar applyStylesheets = function applyStylesheets(stylesheets, rootElement) {\n  stylesheets.forEach(function (stylesheet) {\n    var _loop = function _loop() {\n      var selector = _Object$keys[_i2];\n      var elements = rootElement.querySelectorAll(selector);\n      elements.forEach(function (element) {\n        element.style.push(stylesheet[selector]);\n      });\n    };\n    for (var _i2 = 0, _Object$keys = Object.keys(stylesheet); _i2 < _Object$keys.length; _i2++) {\n      _loop();\n    }\n  });\n};\nexports.applyStylesheets = applyStylesheets;\nvar renderHtml = function renderHtml(text) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var defaultFontSize = 18;\n  var fontSizeStyle = {\n    fontSize: defaultFontSize\n  };\n  var styles = options.style ? Array.isArray(options.style) ? options.style : [options.style] : [];\n  styles.forEach(function (style) {\n    if (!style) {\n      return;\n    }\n    if (typeof style.fontSize === 'number') {\n      fontSizeStyle.fontSize = style.fontSize;\n    }\n    if (typeof style.fontSize === 'string' && style.fontSize.endsWith('px')) {\n      fontSizeStyle.fontSize = parseInt(style.fontSize, 10);\n    }\n  });\n  var baseStyles = (0, styles_1.createHtmlStylesheet)(fontSizeStyle.fontSize, options.resetStyles);\n  var parsed = (0, parse_1.default)(text);\n  var stylesheets = options.stylesheet ? Array.isArray(options.stylesheet) ? options.stylesheet : [options.stylesheet] : [];\n  var opts = Object.assign(Object.assign({\n    collapse: true,\n    resetStyles: false\n  }, options), {\n    renderers: Object.assign(Object.assign({}, renderers_1.default), options.renderers),\n    stylesheets: [baseStyles].concat(_toConsumableArray(stylesheets), _toConsumableArray(parsed.stylesheets))\n  });\n  (0, exports.applyStylesheets)(opts.stylesheets, parsed.rootElement);\n  return react_1.default.createElement(renderer_1.View, {\n    style: Object.assign(Object.assign({}, styles), fontSizeStyle)\n  }, (0, exports.renderElements)(parsed.rootElement.content, opts));\n};\nexports.default = renderHtml;","map":null,"metadata":{},"sourceType":"script"}