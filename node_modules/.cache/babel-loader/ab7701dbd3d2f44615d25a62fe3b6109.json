{"ast":null,"code":"var isDigit = require('../../tokenizer').isDigit;\nvar TYPE = require('../../tokenizer').TYPE;\nvar NUMBER = TYPE.Number;\nvar DELIM = TYPE.Delim;\nvar SOLIDUS = 0x002F; // U+002F SOLIDUS (/)\nvar FULLSTOP = 0x002E; // U+002E FULL STOP (.)\n\n// Terms of <ratio> should be a positive numbers (not zero or negative)\n// (see https://drafts.csswg.org/mediaqueries-3/#values)\n// However, -o-min-device-pixel-ratio takes fractional values as a ratio's term\n// and this is using by various sites. Therefore we relax checking on parse\n// to test a term is unsigned number without an exponent part.\n// Additional checking may be applied on lexer validation.\nfunction consumeNumber() {\n  this.scanner.skipWS();\n  var value = this.consume(NUMBER);\n  for (var i = 0; i < value.length; i++) {\n    var code = value.charCodeAt(i);\n    if (!isDigit(code) && code !== FULLSTOP) {\n      this.error('Unsigned number is expected', this.scanner.tokenStart - value.length + i);\n    }\n  }\n  if (Number(value) === 0) {\n    this.error('Zero number is not allowed', this.scanner.tokenStart - value.length);\n  }\n  return value;\n}\n\n// <positive-integer> S* '/' S* <positive-integer>\nmodule.exports = {\n  name: 'Ratio',\n  structure: {\n    left: String,\n    right: String\n  },\n  parse: function parse() {\n    var start = this.scanner.tokenStart;\n    var left = consumeNumber.call(this);\n    var right;\n    this.scanner.skipWS();\n    if (!this.scanner.isDelim(SOLIDUS)) {\n      this.error('Solidus is expected');\n    }\n    this.eat(DELIM);\n    right = consumeNumber.call(this);\n    return {\n      type: 'Ratio',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      left: left,\n      right: right\n    };\n  },\n  generate: function generate(node) {\n    this.chunk(node.left);\n    this.chunk('/');\n    this.chunk(node.right);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}