{"ast":null,"code":"import _toConsumableArray from \"/Users/koonk/Documents/GitHub/final-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { factory } from '../../../utils/factory.js';\nimport { extend } from '../../../utils/object.js';\nimport { createMatAlgo13xDD } from './matAlgo13xDD.js';\nimport { createMatAlgo14xDs } from './matAlgo14xDs.js';\nimport { createBroadcast } from './broadcast.js';\nvar name = 'matrixAlgorithmSuite';\nvar dependencies = ['typed', 'matrix', 'concat'];\nexport var createMatrixAlgorithmSuite = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    concat = _ref.concat;\n  var matAlgo13xDD = createMatAlgo13xDD({\n    typed: typed\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed: typed\n  });\n  var broadcast = createBroadcast({\n    concat: concat\n  });\n\n  /**\n   * Return a signatures object with the usual boilerplate of\n   * matrix algorithms, based on a plain options object with the\n   * following properties:\n   *   elop: function -- the elementwise operation to use, defaults to self\n   *   SS: function -- the algorithm to apply for two sparse matrices\n   *   DS: function -- the algorithm to apply for a dense and a sparse matrix\n   *   SD: function -- algo for a sparse and a dense; defaults to SD flipped\n   *   Ss: function -- the algorithm to apply for a sparse matrix and scalar\n   *   sS: function -- algo for scalar and sparse; defaults to Ss flipped\n   *   scalar: string -- typed-function type for scalars, defaults to 'any'\n   *\n   * If Ss is not specified, no matrix-scalar signatures are generated.\n   *\n   * @param {object} options\n   * @return {Object<string, function>} signatures\n   */\n  return function matrixAlgorithmSuite(options) {\n    var elop = options.elop;\n    var SD = options.SD || options.DS;\n    var matrixSignatures;\n    if (elop) {\n      // First the dense ones\n      matrixSignatures = {\n        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n          return matAlgo13xDD.apply(void 0, _toConsumableArray(broadcast(x, y)).concat([elop]));\n        },\n        'Array, Array': function ArrayArray(x, y) {\n          return matAlgo13xDD.apply(void 0, _toConsumableArray(broadcast(matrix(x), matrix(y))).concat([elop])).valueOf();\n        },\n        'Array, DenseMatrix': function ArrayDenseMatrix(x, y) {\n          return matAlgo13xDD.apply(void 0, _toConsumableArray(broadcast(matrix(x), y)).concat([elop]));\n        },\n        'DenseMatrix, Array': function DenseMatrixArray(x, y) {\n          return matAlgo13xDD.apply(void 0, _toConsumableArray(broadcast(x, matrix(y))).concat([elop]));\n        }\n      };\n      // Now incorporate sparse matrices\n      if (options.SS) {\n        matrixSignatures['SparseMatrix, SparseMatrix'] = function (x, y) {\n          return options.SS.apply(options, _toConsumableArray(broadcast(x, y)).concat([elop, false]));\n        };\n      }\n      if (options.DS) {\n        matrixSignatures['DenseMatrix, SparseMatrix'] = function (x, y) {\n          return options.DS.apply(options, _toConsumableArray(broadcast(x, y)).concat([elop, false]));\n        };\n        matrixSignatures['Array, SparseMatrix'] = function (x, y) {\n          return options.DS.apply(options, _toConsumableArray(broadcast(matrix(x), y)).concat([elop, false]));\n        };\n      }\n      if (SD) {\n        matrixSignatures['SparseMatrix, DenseMatrix'] = function (x, y) {\n          return SD.apply(void 0, _toConsumableArray(broadcast(y, x)).concat([elop, true]));\n        };\n        matrixSignatures['SparseMatrix, Array'] = function (x, y) {\n          return SD.apply(void 0, _toConsumableArray(broadcast(matrix(y), x)).concat([elop, true]));\n        };\n      }\n    } else {\n      // No elop, use this\n      // First the dense ones\n      matrixSignatures = {\n        'DenseMatrix, DenseMatrix': typed.referToSelf(function (self) {\n          return function (x, y) {\n            return matAlgo13xDD.apply(void 0, _toConsumableArray(broadcast(x, y)).concat([self]));\n          };\n        }),\n        'Array, Array': typed.referToSelf(function (self) {\n          return function (x, y) {\n            return matAlgo13xDD.apply(void 0, _toConsumableArray(broadcast(matrix(x), matrix(y))).concat([self])).valueOf();\n          };\n        }),\n        'Array, DenseMatrix': typed.referToSelf(function (self) {\n          return function (x, y) {\n            return matAlgo13xDD.apply(void 0, _toConsumableArray(broadcast(matrix(x), y)).concat([self]));\n          };\n        }),\n        'DenseMatrix, Array': typed.referToSelf(function (self) {\n          return function (x, y) {\n            return matAlgo13xDD.apply(void 0, _toConsumableArray(broadcast(x, matrix(y))).concat([self]));\n          };\n        })\n      };\n      // Now incorporate sparse matrices\n      if (options.SS) {\n        matrixSignatures['SparseMatrix, SparseMatrix'] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return options.SS.apply(options, _toConsumableArray(broadcast(x, y)).concat([self, false]));\n          };\n        });\n      }\n      if (options.DS) {\n        matrixSignatures['DenseMatrix, SparseMatrix'] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return options.DS.apply(options, _toConsumableArray(broadcast(x, y)).concat([self, false]));\n          };\n        });\n        matrixSignatures['Array, SparseMatrix'] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return options.DS.apply(options, _toConsumableArray(broadcast(matrix(x), y)).concat([self, false]));\n          };\n        });\n      }\n      if (SD) {\n        matrixSignatures['SparseMatrix, DenseMatrix'] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return SD.apply(void 0, _toConsumableArray(broadcast(y, x)).concat([self, true]));\n          };\n        });\n        matrixSignatures['SparseMatrix, Array'] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return SD.apply(void 0, _toConsumableArray(broadcast(matrix(y), x)).concat([self, true]));\n          };\n        });\n      }\n    }\n\n    // Now add the scalars\n    var scalar = options.scalar || 'any';\n    var Ds = options.Ds || options.Ss;\n    if (Ds) {\n      if (elop) {\n        matrixSignatures['DenseMatrix,' + scalar] = function (x, y) {\n          return matAlgo14xDs(x, y, elop, false);\n        };\n        matrixSignatures[scalar + ', DenseMatrix'] = function (x, y) {\n          return matAlgo14xDs(y, x, elop, true);\n        };\n        matrixSignatures['Array,' + scalar] = function (x, y) {\n          return matAlgo14xDs(matrix(x), y, elop, false).valueOf();\n        };\n        matrixSignatures[scalar + ', Array'] = function (x, y) {\n          return matAlgo14xDs(matrix(y), x, elop, true).valueOf();\n        };\n      } else {\n        matrixSignatures['DenseMatrix,' + scalar] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return matAlgo14xDs(x, y, self, false);\n          };\n        });\n        matrixSignatures[scalar + ', DenseMatrix'] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return matAlgo14xDs(y, x, self, true);\n          };\n        });\n        matrixSignatures['Array,' + scalar] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return matAlgo14xDs(matrix(x), y, self, false).valueOf();\n          };\n        });\n        matrixSignatures[scalar + ', Array'] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n          };\n        });\n      }\n    }\n    var sS = options.sS !== undefined ? options.sS : options.Ss;\n    if (elop) {\n      if (options.Ss) {\n        matrixSignatures['SparseMatrix,' + scalar] = function (x, y) {\n          return options.Ss(x, y, elop, false);\n        };\n      }\n      if (sS) {\n        matrixSignatures[scalar + ', SparseMatrix'] = function (x, y) {\n          return sS(y, x, elop, true);\n        };\n      }\n    } else {\n      if (options.Ss) {\n        matrixSignatures['SparseMatrix,' + scalar] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return options.Ss(x, y, self, false);\n          };\n        });\n      }\n      if (sS) {\n        matrixSignatures[scalar + ', SparseMatrix'] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return sS(y, x, self, true);\n          };\n        });\n      }\n    }\n    // Also pull in the scalar signatures if the operator is a typed function\n    if (elop && elop.signatures) {\n      extend(matrixSignatures, elop.signatures);\n    }\n    return matrixSignatures;\n  };\n});","map":null,"metadata":{},"sourceType":"module"}