{"ast":null,"code":"import _classCallCheck from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nimport { assignFactory } from './utils/assign.js';\nimport { getPrecedence } from '../operators.js';\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix',\n// FIXME: should not be needed at all, should be handled by subset\n'Node'];\nexport var createAssignmentNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var subset = _ref.subset,\n    matrix = _ref.matrix,\n    Node = _ref.Node;\n  var access = accessFactory({\n    subset: subset\n  });\n  var assign = assignFactory({\n    subset: subset,\n    matrix: matrix\n  });\n\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @param {string} implicit\n   * @private\n   */\n  function needParenthesis(node, parenthesis, implicit) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n    var precedence = getPrecedence(node, parenthesis, implicit);\n    var exprPrecedence = getPrecedence(node.value, parenthesis, implicit);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  var AssignmentNode = /*#__PURE__*/function (_Node) {\n    _inherits(AssignmentNode, _Node);\n    /**\n     * @constructor AssignmentNode\n     * @extends {Node}\n     *\n     * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n     * replace a subset of a matrix like `A[2,2]=42`.\n     *\n     * Syntax:\n     *\n     *     new AssignmentNode(symbol, value)\n     *     new AssignmentNode(object, index, value)\n     *\n     * Usage:\n     *\n     *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))  // a=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode('b'),\n     *                       new ConstantNode(2))   // a.b=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode(1, 2),\n     *                       new ConstantNode(3))  // a[1,2]=3\n     *\n     * @param {SymbolNode | AccessorNode} object\n     *     Object on which to assign a value\n     * @param {IndexNode} [index=null]\n     *     Index, property name or matrix index. Optional. If not provided\n     *     and `object` is a SymbolNode, the property is assigned to the\n     *     global scope.\n     * @param {Node} value\n     *     The value to be assigned\n     */\n    function AssignmentNode(object, index, value) {\n      var _this;\n      _classCallCheck(this, AssignmentNode);\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(AssignmentNode).call(this));\n      _this.object = object;\n      _this.index = value ? index : null;\n      _this.value = value || index;\n\n      // validate input\n      if (!isSymbolNode(object) && !isAccessorNode(object)) {\n        throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n      }\n      if (isSymbolNode(object) && object.name === 'end') {\n        throw new Error('Cannot assign to symbol \"end\"');\n      }\n      if (_this.index && !isIndexNode(_this.index)) {\n        // index is optional\n        throw new TypeError('IndexNode expected as \"index\"');\n      }\n      if (!isNode(_this.value)) {\n        throw new TypeError('Node expected as \"value\"');\n      }\n      return _this;\n    }\n\n    // class name for typing purposes:\n\n    // readonly property name\n    _createClass(AssignmentNode, [{\n      key: \"_compile\",\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n      value: function _compile(math, argNames) {\n        var evalObject = this.object._compile(math, argNames);\n        var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n        var evalValue = this.value._compile(math, argNames);\n        var name = this.object.name;\n        if (!this.index) {\n          // apply a variable to the scope, for example `a=2`\n          if (!isSymbolNode(this.object)) {\n            throw new TypeError('SymbolNode expected as object');\n          }\n          return function evalAssignmentNode(scope, args, context) {\n            var value = evalValue(scope, args, context);\n            scope.set(name, value);\n            return value;\n          };\n        } else if (this.index.isObjectProperty()) {\n          // apply an object property for example `a.b=2`\n          var prop = this.index.getObjectProperty();\n          return function evalAssignmentNode(scope, args, context) {\n            var object = evalObject(scope, args, context);\n            var value = evalValue(scope, args, context);\n            setSafeProperty(object, prop, value);\n            return value;\n          };\n        } else if (isSymbolNode(this.object)) {\n          // update a matrix subset, for example `a[2]=3`\n          return function evalAssignmentNode(scope, args, context) {\n            var childObject = evalObject(scope, args, context);\n            var value = evalValue(scope, args, context);\n            // Important:  we pass childObject instead of context:\n            var index = evalIndex(scope, args, childObject);\n            scope.set(name, assign(childObject, index, value));\n            return value;\n          };\n        } else {\n          // isAccessorNode(node.object) === true\n          // update a matrix subset, for example `a.b[2]=3`\n\n          // we will not use the compile function of the AccessorNode, but\n          // compile it ourselves here as we need the parent object of the\n          // AccessorNode:\n          // wee need to apply the updated object to parent object\n          var evalParentObject = this.object.object._compile(math, argNames);\n          if (this.object.index.isObjectProperty()) {\n            var parentProp = this.object.index.getObjectProperty();\n            return function evalAssignmentNode(scope, args, context) {\n              var parent = evalParentObject(scope, args, context);\n              var childObject = getSafeProperty(parent, parentProp);\n              // Important: we pass childObject instead of context:\n              var index = evalIndex(scope, args, childObject);\n              var value = evalValue(scope, args, context);\n              setSafeProperty(parent, parentProp, assign(childObject, index, value));\n              return value;\n            };\n          } else {\n            // if some parameters use the 'end' parameter, we need to calculate\n            // the size\n            var evalParentIndex = this.object.index._compile(math, argNames);\n            return function evalAssignmentNode(scope, args, context) {\n              var parent = evalParentObject(scope, args, context);\n              // Important: we pass parent instead of context:\n              var parentIndex = evalParentIndex(scope, args, parent);\n              var childObject = access(parent, parentIndex);\n              // Important:  we pass childObject instead of context\n              var index = evalIndex(scope, args, childObject);\n              var value = evalValue(scope, args, context);\n              assign(parent, parentIndex, assign(childObject, index, value));\n              return value;\n            };\n          }\n        }\n      }\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        callback(this.object, 'object', this);\n        if (this.index) {\n          callback(this.index, 'index', this);\n        }\n        callback(this.value, 'value', this);\n      }\n      /**\n       * Create a new AssignmentNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {AssignmentNode} Returns a transformed copy of the node\n       */\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var object = this._ifNode(callback(this.object, 'object', this));\n        var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n        var value = this._ifNode(callback(this.value, 'value', this));\n        return new AssignmentNode(object, index, value);\n      }\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {AssignmentNode}\n       */\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new AssignmentNode(this.object, this.index, this.value);\n      }\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string}\n       */\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        var object = this.object.toString(options);\n        var index = this.index ? this.index.toString(options) : '';\n        var value = this.value.toString(options);\n        if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n          value = '(' + value + ')';\n        }\n        return object + index + ' = ' + value;\n      }\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          object: this.object,\n          index: this.index,\n          value: this.value\n        };\n      }\n      /**\n       * Instantiate an AssignmentNode from its JSON representation\n       * @param {Object} json\n       *     An object structured like\n       *     `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n       *     where mathjs is optional\n       * @returns {AssignmentNode}\n       */\n    }, {\n      key: \"toHTML\",\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string}\n       */\n      value: function toHTML(options) {\n        var object = this.object.toHTML(options);\n        var index = this.index ? this.index.toHTML(options) : '';\n        var value = this.value.toHTML(options);\n        if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n          value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n        }\n        return object + index + '<span class=\"math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n      }\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string}\n       */\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        var object = this.object.toTex(options);\n        var index = this.index ? this.index.toTex(options) : '';\n        var value = this.value.toTex(options);\n        if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n          value = \"\\\\left(\".concat(value, \"\\\\right)\");\n        }\n        return object + index + ':=' + value;\n      }\n    }, {\n      key: \"name\",\n      get: function get() {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isAssignmentNode\",\n      get: function get() {\n        return true;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new AssignmentNode(json.object, json.index, json.value);\n      }\n    }]);\n    return AssignmentNode;\n  }(Node);\n  _defineProperty(AssignmentNode, \"name\", name);\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":null,"metadata":{},"sourceType":"module"}