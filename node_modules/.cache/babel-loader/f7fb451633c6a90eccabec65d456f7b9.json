{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n///<reference path='../button/button-model.d.ts'/>\nimport { getUniqueID, NotifyPropertyChanges, Property, EventHandler } from '@syncfusion/ej2-base';\nimport { select } from '@syncfusion/ej2-base';\nimport { Button } from '../button/button';\nvar FABHIDDEN = 'e-fab-hidden';\nvar FIXEDFAB = 'e-fab-fixed';\nvar FABVERTDIST = '--fabVertDist';\nvar FABHORZDIST = '--fabHorzDist';\nvar FABTOP = 'e-fab-top';\nvar FABBOTTOM = 'e-fab-bottom';\nvar FABRIGHT = 'e-fab-right';\nvar FABLEFT = 'e-fab-left';\nvar FABMIDDLE = 'e-fab-middle';\nvar FABCENTER = 'e-fab-center';\n/**\n * Defines the position of FAB (Floating Action Button) in target.\n */\nexport var FabPosition;\n(function (FabPosition) {\n  /**\n   * Positions the FAB at the target's top left corner.\n   */\n  FabPosition[\"TopLeft\"] = \"TopLeft\";\n  /**\n   * Places the FAB on the top-center position of the target.\n   */\n  FabPosition[\"TopCenter\"] = \"TopCenter\";\n  /**\n   * Positions the FAB at the target's top right corner.\n   */\n  FabPosition[\"TopRight\"] = \"TopRight\";\n  /**\n   * Positions the FAB in the middle of target's left side.\n   */\n  FabPosition[\"MiddleLeft\"] = \"MiddleLeft\";\n  /**\n   * Positions the FAB in the center of target.\n   */\n  FabPosition[\"MiddleCenter\"] = \"MiddleCenter\";\n  /**\n   * Positions the FAB in the middle of target's right side.\n   */\n  FabPosition[\"MiddleRight\"] = \"MiddleRight\";\n  /**\n   * Positions the FAB at the target's bottom left corner.\n   */\n  FabPosition[\"BottomLeft\"] = \"BottomLeft\";\n  /**\n   * Places the FAB on the bottom-center position of the target.\n   */\n  FabPosition[\"BottomCenter\"] = \"BottomCenter\";\n  /**\n   * Positions the FAB at the target's bottom right corner.\n   */\n  FabPosition[\"BottomRight\"] = \"BottomRight\";\n})(FabPosition || (FabPosition = {}));\n/**\n * The FAB Component (Floating Action Button) is an extension of Button Component that appears in front of all the contents of the page and performs the primary action.\n */\nvar Fab = /** @class */function (_super) {\n  __extends(Fab, _super);\n  /**\n   * Constructor for creating the widget\n   *\n   * @param  {FabModel} options - Specifies the floating action button model\n   * @param  {string|HTMLButtonElement} element - Specifies the target element\n   */\n  function Fab(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n  /**\n   * Initialize the control rendering\n   *\n   * @returns {void}\n   * @private\n   */\n  Fab.prototype.render = function () {\n    _super.prototype.render.call(this);\n    this.initializeFab();\n  };\n  Fab.prototype.preRender = function () {\n    _super.prototype.preRender.call(this);\n    if (!this.element.id) {\n      this.element.id = getUniqueID('e-' + this.getModuleName());\n    }\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string} - Persist data\n   */\n  Fab.prototype.getPersistData = function () {\n    _super.prototype.getPersistData.call(this);\n    return this.addOnPersist([]);\n  };\n  /**\n   * Get component name.\n   *\n   * @returns {string} - Module name\n   * @private\n   */\n  Fab.prototype.getModuleName = function () {\n    return 'fab';\n  };\n  Fab.prototype.initializeFab = function () {\n    // To add 'e-btn' class\n    this.element.classList.add('e-' + _super.prototype.getModuleName.call(this));\n    this.checkTarget();\n    this.setPosition();\n    this.setVisibility();\n    EventHandler.add(window, 'resize', this.resizeHandler, this);\n  };\n  Fab.prototype.checkTarget = function () {\n    this.isFixed = true;\n    if (this.target) {\n      this.targetEle = typeof this.target === 'string' ? select(this.target) : this.target;\n      if (this.targetEle) {\n        this.isFixed = false;\n        this.targetEle.appendChild(this.element);\n      }\n    }\n    this.element.classList[this.isFixed ? 'add' : 'remove'](FIXEDFAB);\n  };\n  Fab.prototype.setVisibility = function () {\n    this.element.classList[this.visible ? 'remove' : 'add'](FABHIDDEN);\n  };\n  Fab.prototype.setPosition = function () {\n    this.setVerticalPosition();\n    this.setHorizontalPosition();\n  };\n  Fab.prototype.setVerticalPosition = function () {\n    //Check for middle position and middle class and vertical distance atttribute.\n    if (['MiddleLeft', 'MiddleRight', 'MiddleCenter'].indexOf(this.position) !== -1) {\n      var yoffset = ((this.isFixed ? window.innerHeight : this.targetEle.clientHeight) - this.element.offsetHeight) / 2;\n      this.element.style.setProperty(FABVERTDIST, yoffset + 'px');\n      this.element.classList.add(FABMIDDLE);\n    }\n    //Check for bottom position and bottom class else add top class.\n    this.element.classList.add(['BottomLeft', 'BottomCenter', 'BottomRight'].indexOf(this.position) !== -1 ? FABBOTTOM : FABTOP);\n  };\n  Fab.prototype.setHorizontalPosition = function () {\n    //Check for center position and center class and horizontal distance atttribute.\n    if (['TopCenter', 'BottomCenter', 'MiddleCenter'].indexOf(this.position) !== -1) {\n      var xoffset = ((this.isFixed ? window.innerWidth : this.targetEle.clientWidth) - this.element.offsetWidth) / 2;\n      this.element.style.setProperty(FABHORZDIST, xoffset + 'px');\n      this.element.classList.add(FABCENTER);\n    }\n    var isRight = ['TopRight', 'MiddleRight', 'BottomRight'].indexOf(this.position) !== -1;\n    this.element.classList.add(!(this.enableRtl || isRight) || this.enableRtl && isRight ? FABLEFT : FABRIGHT);\n  };\n  Fab.prototype.clearPosition = function () {\n    this.element.style.removeProperty(FABVERTDIST);\n    this.element.classList.remove(FABTOP, FABBOTTOM, FABMIDDLE);\n    this.clearHorizontalPosition();\n  };\n  Fab.prototype.clearHorizontalPosition = function () {\n    this.element.style.removeProperty(FABHORZDIST);\n    this.element.classList.remove(FABRIGHT, FABLEFT, FABCENTER);\n  };\n  /**\n   * Refreshes the FAB position. You can call this method to re-position FAB when target is resized.\n   *\n   * @returns {void}\n   */\n  Fab.prototype.refreshPosition = function () {\n    this.resizeHandler();\n  };\n  Fab.prototype.resizeHandler = function () {\n    this.setPosition();\n  };\n  /**\n   * Destroys the FAB instance.\n   *\n   * @returns {void}\n   *\n   */\n  Fab.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n    // To remove 'e-btn' class\n    this.element.classList.remove('e-' + _super.prototype.getModuleName.call(this));\n    this.clearPosition();\n    EventHandler.remove(window, 'resize', this.resizeHandler);\n  };\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param  {FabModel} newProp - Specifies new properties\n   * @param  {FabModel} oldProp - Specifies old properties\n   * @returns {void}\n   * @private\n   */\n  Fab.prototype.onPropertyChanged = function (newProp, oldProp) {\n    _super.prototype.onPropertyChanged.call(this, newProp, oldProp);\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n      switch (prop) {\n        case 'enableRtl':\n          this.clearHorizontalPosition();\n          this.setHorizontalPosition();\n          break;\n        case 'visible':\n          this.setVisibility();\n          break;\n        case 'position':\n          this.clearPosition();\n          this.setPosition();\n          break;\n        case 'target':\n          this.checkTarget();\n          this.setPosition();\n          break;\n      }\n    }\n  };\n  __decorate([Property('BottomRight')], Fab.prototype, \"position\", void 0);\n  __decorate([Property('')], Fab.prototype, \"target\", void 0);\n  __decorate([Property(true)], Fab.prototype, \"visible\", void 0);\n  __decorate([Property(true)], Fab.prototype, \"isPrimary\", void 0);\n  Fab = __decorate([NotifyPropertyChanges], Fab);\n  return Fab;\n}(Button);\nexport { Fab };","map":null,"metadata":{},"sourceType":"module"}