{"ast":null,"code":"var tokenizer = require('../tokenizer');\nvar isIdentifierStart = tokenizer.isIdentifierStart;\nvar isHexDigit = tokenizer.isHexDigit;\nvar isDigit = tokenizer.isDigit;\nvar cmpStr = tokenizer.cmpStr;\nvar consumeNumber = tokenizer.consumeNumber;\nvar TYPE = tokenizer.TYPE;\nvar anPlusB = require('./generic-an-plus-b');\nvar urange = require('./generic-urange');\nvar cssWideKeywords = ['unset', 'initial', 'inherit'];\nvar calcFunctionNames = ['calc(', '-moz-calc(', '-webkit-calc('];\n\n// https://www.w3.org/TR/css-values-3/#lengths\nvar LENGTH = {\n  // absolute length units\n  'px': true,\n  'mm': true,\n  'cm': true,\n  'in': true,\n  'pt': true,\n  'pc': true,\n  'q': true,\n  // relative length units\n  'em': true,\n  'ex': true,\n  'ch': true,\n  'rem': true,\n  // viewport-percentage lengths\n  'vh': true,\n  'vw': true,\n  'vmin': true,\n  'vmax': true,\n  'vm': true\n};\nvar ANGLE = {\n  'deg': true,\n  'grad': true,\n  'rad': true,\n  'turn': true\n};\nvar TIME = {\n  's': true,\n  'ms': true\n};\nvar FREQUENCY = {\n  'hz': true,\n  'khz': true\n};\n\n// https://www.w3.org/TR/css-values-3/#resolution (https://drafts.csswg.org/css-values/#resolution)\nvar RESOLUTION = {\n  'dpi': true,\n  'dpcm': true,\n  'dppx': true,\n  'x': true // https://github.com/w3c/csswg-drafts/issues/461\n};\n\n// https://drafts.csswg.org/css-grid/#fr-unit\nvar FLEX = {\n  'fr': true\n};\n\n// https://www.w3.org/TR/css3-speech/#mixing-props-voice-volume\nvar DECIBEL = {\n  'db': true\n};\n\n// https://www.w3.org/TR/css3-speech/#voice-props-voice-pitch\nvar SEMITONES = {\n  'st': true\n};\n\n// safe char code getter\nfunction charCode(str, index) {\n  return index < str.length ? str.charCodeAt(index) : 0;\n}\nfunction eqStr(actual, expected) {\n  return cmpStr(actual, 0, actual.length, expected);\n}\nfunction eqStrAny(actual, expected) {\n  for (var i = 0; i < expected.length; i++) {\n    if (eqStr(actual, expected[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// IE postfix hack, i.e. 123\\0 or 123px\\9\nfunction isPostfixIeHack(str, offset) {\n  if (offset !== str.length - 2) {\n    return false;\n  }\n  return str.charCodeAt(offset) === 0x005C &&\n  // U+005C REVERSE SOLIDUS (\\)\n  isDigit(str.charCodeAt(offset + 1));\n}\nfunction outOfRange(opts, value, numEnd) {\n  if (opts && opts.type === 'Range') {\n    var num = Number(numEnd !== undefined && numEnd !== value.length ? value.substr(0, numEnd) : value);\n    if (isNaN(num)) {\n      return true;\n    }\n    if (opts.min !== null && num < opts.min) {\n      return true;\n    }\n    if (opts.max !== null && num > opts.max) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction consumeFunction(token, getNextToken) {\n  var startIdx = token.index;\n  var length = 0;\n\n  // balanced token consuming\n  do {\n    length++;\n    if (token.balance <= startIdx) {\n      break;\n    }\n  } while (token = getNextToken(length));\n  return length;\n}\n\n// TODO: implement\n// can be used wherever <length>, <frequency>, <angle>, <time>, <percentage>, <number>, or <integer> values are allowed\n// https://drafts.csswg.org/css-values/#calc-notation\nfunction calc(next) {\n  return function (token, getNextToken, opts) {\n    if (token === null) {\n      return 0;\n    }\n    if (token.type === TYPE.Function && eqStrAny(token.value, calcFunctionNames)) {\n      return consumeFunction(token, getNextToken);\n    }\n    return next(token, getNextToken, opts);\n  };\n}\nfunction tokenType(expectedTokenType) {\n  return function (token) {\n    if (token === null || token.type !== expectedTokenType) {\n      return 0;\n    }\n    return 1;\n  };\n}\nfunction func(name) {\n  name = name + '(';\n  return function (token, getNextToken) {\n    if (token !== null && eqStr(token.value, name)) {\n      return consumeFunction(token, getNextToken);\n    }\n    return 0;\n  };\n}\n\n// =========================\n// Complex types\n//\n\n// https://drafts.csswg.org/css-values-4/#custom-idents\n// 4.2. Author-defined Identifiers: the <custom-ident> type\n// Some properties accept arbitrary author-defined identifiers as a component value.\n// This generic data type is denoted by <custom-ident>, and represents any valid CSS identifier\n// that would not be misinterpreted as a pre-defined keyword in that property’s value definition.\n//\n// See also: https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident\nfunction customIdent(token) {\n  if (token === null || token.type !== TYPE.Ident) {\n    return 0;\n  }\n  var name = token.value.toLowerCase();\n\n  // The CSS-wide keywords are not valid <custom-ident>s\n  if (eqStrAny(name, cssWideKeywords)) {\n    return 0;\n  }\n\n  // The default keyword is reserved and is also not a valid <custom-ident>\n  if (eqStr(name, 'default')) {\n    return 0;\n  }\n\n  // TODO: ignore property specific keywords (as described https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident)\n  // Specifications using <custom-ident> must specify clearly what other keywords\n  // are excluded from <custom-ident>, if any—for example by saying that any pre-defined keywords\n  // in that property’s value definition are excluded. Excluded keywords are excluded\n  // in all ASCII case permutations.\n\n  return 1;\n}\n\n// https://drafts.csswg.org/css-variables/#typedef-custom-property-name\n// A custom property is any property whose name starts with two dashes (U+002D HYPHEN-MINUS), like --foo.\n// The <custom-property-name> production corresponds to this: it’s defined as any valid identifier\n// that starts with two dashes, except -- itself, which is reserved for future use by CSS.\n// NOTE: Current implementation treat `--` as a valid name since most (all?) major browsers treat it as valid.\nfunction customPropertyName(token) {\n  // ... defined as any valid identifier\n  if (token === null || token.type !== TYPE.Ident) {\n    return 0;\n  }\n\n  // ... that starts with two dashes (U+002D HYPHEN-MINUS)\n  if (charCode(token.value, 0) !== 0x002D || charCode(token.value, 1) !== 0x002D) {\n    return 0;\n  }\n  return 1;\n}\n\n// https://drafts.csswg.org/css-color-4/#hex-notation\n// The syntax of a <hex-color> is a <hash-token> token whose value consists of 3, 4, 6, or 8 hexadecimal digits.\n// In other words, a hex color is written as a hash character, \"#\", followed by some number of digits 0-9 or\n// letters a-f (the case of the letters doesn’t matter - #00ff00 is identical to #00FF00).\nfunction hexColor(token) {\n  if (token === null || token.type !== TYPE.Hash) {\n    return 0;\n  }\n  var length = token.value.length;\n\n  // valid values (length): #rgb (4), #rgba (5), #rrggbb (7), #rrggbbaa (9)\n  if (length !== 4 && length !== 5 && length !== 7 && length !== 9) {\n    return 0;\n  }\n  for (var i = 1; i < length; i++) {\n    if (!isHexDigit(token.value.charCodeAt(i))) {\n      return 0;\n    }\n  }\n  return 1;\n}\nfunction idSelector(token) {\n  if (token === null || token.type !== TYPE.Hash) {\n    return 0;\n  }\n  if (!isIdentifierStart(charCode(token.value, 1), charCode(token.value, 2), charCode(token.value, 3))) {\n    return 0;\n  }\n  return 1;\n}\n\n// https://drafts.csswg.org/css-syntax/#any-value\n// It represents the entirety of what a valid declaration can have as its value.\nfunction declarationValue(token, getNextToken) {\n  if (!token) {\n    return 0;\n  }\n  var length = 0;\n  var level = 0;\n  var startIdx = token.index;\n\n  // The <declaration-value> production matches any sequence of one or more tokens,\n  // so long as the sequence ...\n  scan: do {\n    switch (token.type) {\n      // ... does not contain <bad-string-token>, <bad-url-token>,\n      case TYPE.BadString:\n      case TYPE.BadUrl:\n        break scan;\n\n      // ... unmatched <)-token>, <]-token>, or <}-token>,\n      case TYPE.RightCurlyBracket:\n      case TYPE.RightParenthesis:\n      case TYPE.RightSquareBracket:\n        if (token.balance > token.index || token.balance < startIdx) {\n          break scan;\n        }\n        level--;\n        break;\n\n      // ... or top-level <semicolon-token> tokens\n      case TYPE.Semicolon:\n        if (level === 0) {\n          break scan;\n        }\n        break;\n\n      // ... or <delim-token> tokens with a value of \"!\"\n      case TYPE.Delim:\n        if (token.value === '!' && level === 0) {\n          break scan;\n        }\n        break;\n      case TYPE.Function:\n      case TYPE.LeftParenthesis:\n      case TYPE.LeftSquareBracket:\n      case TYPE.LeftCurlyBracket:\n        level++;\n        break;\n    }\n    length++;\n\n    // until balance closing\n    if (token.balance <= startIdx) {\n      break;\n    }\n  } while (token = getNextToken(length));\n  return length;\n}\n\n// https://drafts.csswg.org/css-syntax/#any-value\n// The <any-value> production is identical to <declaration-value>, but also\n// allows top-level <semicolon-token> tokens and <delim-token> tokens\n// with a value of \"!\". It represents the entirety of what valid CSS can be in any context.\nfunction anyValue(token, getNextToken) {\n  if (!token) {\n    return 0;\n  }\n  var startIdx = token.index;\n  var length = 0;\n\n  // The <any-value> production matches any sequence of one or more tokens,\n  // so long as the sequence ...\n  scan: do {\n    switch (token.type) {\n      // ... does not contain <bad-string-token>, <bad-url-token>,\n      case TYPE.BadString:\n      case TYPE.BadUrl:\n        break scan;\n\n      // ... unmatched <)-token>, <]-token>, or <}-token>,\n      case TYPE.RightCurlyBracket:\n      case TYPE.RightParenthesis:\n      case TYPE.RightSquareBracket:\n        if (token.balance > token.index || token.balance < startIdx) {\n          break scan;\n        }\n        break;\n    }\n    length++;\n\n    // until balance closing\n    if (token.balance <= startIdx) {\n      break;\n    }\n  } while (token = getNextToken(length));\n  return length;\n}\n\n// =========================\n// Dimensions\n//\n\nfunction dimension(type) {\n  return function (token, getNextToken, opts) {\n    if (token === null || token.type !== TYPE.Dimension) {\n      return 0;\n    }\n    var numberEnd = consumeNumber(token.value, 0);\n\n    // check unit\n    if (type !== null) {\n      // check for IE postfix hack, i.e. 123px\\0 or 123px\\9\n      var reverseSolidusOffset = token.value.indexOf('\\\\', numberEnd);\n      var unit = reverseSolidusOffset === -1 || !isPostfixIeHack(token.value, reverseSolidusOffset) ? token.value.substr(numberEnd) : token.value.substring(numberEnd, reverseSolidusOffset);\n      if (type.hasOwnProperty(unit.toLowerCase()) === false) {\n        return 0;\n      }\n    }\n\n    // check range if specified\n    if (outOfRange(opts, token.value, numberEnd)) {\n      return 0;\n    }\n    return 1;\n  };\n}\n\n// =========================\n// Percentage\n//\n\n// §5.5. Percentages: the <percentage> type\n// https://drafts.csswg.org/css-values-4/#percentages\nfunction percentage(token, getNextToken, opts) {\n  // ... corresponds to the <percentage-token> production\n  if (token === null || token.type !== TYPE.Percentage) {\n    return 0;\n  }\n\n  // check range if specified\n  if (outOfRange(opts, token.value, token.value.length - 1)) {\n    return 0;\n  }\n  return 1;\n}\n\n// =========================\n// Numeric\n//\n\n// https://drafts.csswg.org/css-values-4/#numbers\n// The value <zero> represents a literal number with the value 0. Expressions that merely\n// evaluate to a <number> with the value 0 (for example, calc(0)) do not match <zero>;\n// only literal <number-token>s do.\nfunction zero(next) {\n  if (typeof next !== 'function') {\n    next = function next() {\n      return 0;\n    };\n  }\n  return function (token, getNextToken, opts) {\n    if (token !== null && token.type === TYPE.Number) {\n      if (Number(token.value) === 0) {\n        return 1;\n      }\n    }\n    return next(token, getNextToken, opts);\n  };\n}\n\n// § 5.3. Real Numbers: the <number> type\n// https://drafts.csswg.org/css-values-4/#numbers\n// Number values are denoted by <number>, and represent real numbers, possibly with a fractional component.\n// ... It corresponds to the <number-token> production\nfunction number(token, getNextToken, opts) {\n  if (token === null) {\n    return 0;\n  }\n  var numberEnd = consumeNumber(token.value, 0);\n  var isNumber = numberEnd === token.value.length;\n  if (!isNumber && !isPostfixIeHack(token.value, numberEnd)) {\n    return 0;\n  }\n\n  // check range if specified\n  if (outOfRange(opts, token.value, numberEnd)) {\n    return 0;\n  }\n  return 1;\n}\n\n// §5.2. Integers: the <integer> type\n// https://drafts.csswg.org/css-values-4/#integers\nfunction integer(token, getNextToken, opts) {\n  // ... corresponds to a subset of the <number-token> production\n  if (token === null || token.type !== TYPE.Number) {\n    return 0;\n  }\n\n  // The first digit of an integer may be immediately preceded by `-` or `+` to indicate the integer’s sign.\n  var i = token.value.charCodeAt(0) === 0x002B ||\n  // U+002B PLUS SIGN (+)\n  token.value.charCodeAt(0) === 0x002D ? 1 : 0; // U+002D HYPHEN-MINUS (-)\n\n  // When written literally, an integer is one or more decimal digits 0 through 9 ...\n  for (; i < token.value.length; i++) {\n    if (!isDigit(token.value.charCodeAt(i))) {\n      return 0;\n    }\n  }\n\n  // check range if specified\n  if (outOfRange(opts, token.value, i)) {\n    return 0;\n  }\n  return 1;\n}\nmodule.exports = {\n  // token types\n  'ident-token': tokenType(TYPE.Ident),\n  'function-token': tokenType(TYPE.Function),\n  'at-keyword-token': tokenType(TYPE.AtKeyword),\n  'hash-token': tokenType(TYPE.Hash),\n  'string-token': tokenType(TYPE.String),\n  'bad-string-token': tokenType(TYPE.BadString),\n  'url-token': tokenType(TYPE.Url),\n  'bad-url-token': tokenType(TYPE.BadUrl),\n  'delim-token': tokenType(TYPE.Delim),\n  'number-token': tokenType(TYPE.Number),\n  'percentage-token': tokenType(TYPE.Percentage),\n  'dimension-token': tokenType(TYPE.Dimension),\n  'whitespace-token': tokenType(TYPE.WhiteSpace),\n  'CDO-token': tokenType(TYPE.CDO),\n  'CDC-token': tokenType(TYPE.CDC),\n  'colon-token': tokenType(TYPE.Colon),\n  'semicolon-token': tokenType(TYPE.Semicolon),\n  'comma-token': tokenType(TYPE.Comma),\n  '[-token': tokenType(TYPE.LeftSquareBracket),\n  ']-token': tokenType(TYPE.RightSquareBracket),\n  '(-token': tokenType(TYPE.LeftParenthesis),\n  ')-token': tokenType(TYPE.RightParenthesis),\n  '{-token': tokenType(TYPE.LeftCurlyBracket),\n  '}-token': tokenType(TYPE.RightCurlyBracket),\n  // token type aliases\n  'string': tokenType(TYPE.String),\n  'ident': tokenType(TYPE.Ident),\n  // complex types\n  'custom-ident': customIdent,\n  'custom-property-name': customPropertyName,\n  'hex-color': hexColor,\n  'id-selector': idSelector,\n  // element( <id-selector> )\n  'an-plus-b': anPlusB,\n  'urange': urange,\n  'declaration-value': declarationValue,\n  'any-value': anyValue,\n  // dimensions\n  'dimension': calc(dimension(null)),\n  'angle': calc(dimension(ANGLE)),\n  'decibel': calc(dimension(DECIBEL)),\n  'frequency': calc(dimension(FREQUENCY)),\n  'flex': calc(dimension(FLEX)),\n  'length': calc(zero(dimension(LENGTH))),\n  'resolution': calc(dimension(RESOLUTION)),\n  'semitones': calc(dimension(SEMITONES)),\n  'time': calc(dimension(TIME)),\n  // percentage\n  'percentage': calc(percentage),\n  // numeric\n  'zero': zero(),\n  'number': calc(number),\n  'integer': calc(integer),\n  // old IE stuff\n  '-ms-legacy-expression': func('expression')\n};","map":null,"metadata":{},"sourceType":"script"}