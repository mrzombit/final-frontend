{"ast":null,"code":"import { isNil, last, dropLast as dropLast$2, adjust, compose } from '@react-pdf/fns';\nimport _extends from '@babel/runtime/helpers/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/objectWithoutPropertiesLoose';\nimport _createForOfIteratorHelperLoose from '@babel/runtime/helpers/createForOfIteratorHelperLoose';\nimport unicode from 'unicode-properties';\nimport hyphen from 'hyphen';\nimport pattern from 'hyphen/patterns/en-us';\n\n/**\n * Create attributed string from text fragments\n *\n * @param  {Array}  fragments\n * @return {Object} attributed string\n */\nvar fromFragments = function fromFragments(fragments) {\n  var offset = 0;\n  var string = '';\n  var runs = [];\n  fragments.forEach(function (fragment) {\n    string += fragment.string;\n    runs.push({\n      start: offset,\n      end: offset + fragment.string.length,\n      attributes: fragment.attributes || {}\n    });\n    offset += fragment.string.length;\n  });\n  return {\n    string: string,\n    runs: runs\n  };\n};\n\n/**\n * Default word hyphenation engine used when no one provided.\n * Does not perform word hyphenation at all\n *\n * @param  {String} word\n * @return {Array} same word\n */\nvar defaultHyphenationEngine = function defaultHyphenationEngine(word) {\n  return [word];\n};\n\n/**\n * Wrap words of attribute string\n *\n * @param  {Object} layout engines\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} attributed string including syllables\n */\nvar wrapWords = function wrapWords(engines, options) {\n  if (engines === void 0) {\n    engines = {};\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  return function (attributedString) {\n    var _engines$wordHyphenat, _engines;\n    var syllables = [];\n    var fragments = [];\n    var hyphenateWord = options.hyphenationCallback || ((_engines$wordHyphenat = (_engines = engines).wordHyphenation) === null || _engines$wordHyphenat === void 0 ? void 0 : _engines$wordHyphenat.call(_engines, options)) || defaultHyphenationEngine;\n    for (var i = 0; i < attributedString.runs.length; i += 1) {\n      var string = '';\n      var run = attributedString.runs[i];\n      var words = attributedString.string.slice(run.start, run.end).split(/([ ]+)/g).filter(Boolean);\n      for (var j = 0; j < words.length; j += 1) {\n        var word = words[j];\n        var parts = hyphenateWord(word);\n        syllables.push.apply(syllables, parts);\n        string += parts.join('');\n      }\n      fragments.push({\n        string: string,\n        attributes: run.attributes\n      });\n    }\n    return _extends({}, fromFragments(fragments), {\n      syllables: syllables\n    });\n  };\n};\n\n/**\n * Clone rect\n *\n * @param  {Object}  rect\n * @return {Object} cloned rect\n */\nvar copy = function copy(rect) {\n  return Object.assign({}, rect);\n};\nvar partition = function partition(rect, height) {\n  var a = Object.assign({}, rect, {\n    height: height\n  });\n  var b = Object.assign({}, rect, {\n    y: rect.y + height,\n    height: rect.height - height\n  });\n  return [a, b];\n};\n\n/**\n * Crop upper section of rect\n *\n * @param  {Object}  rect\n * @return {Object} cropped rect\n */\nvar crop = function crop(height, rect) {\n  var _partition = partition(rect, height),\n    result = _partition[1];\n  return result;\n};\n\n/**\n * Get paragraph block height\n *\n * @param  {Object}  paragraph block\n * @return {number} paragraph block height\n */\nvar height$2 = function height(paragraph) {\n  return paragraph.reduce(function (acc, block) {\n    return acc + block.box.height;\n  }, 0);\n};\n\n/**\n * Calculate run scale\n *\n * @param  {Object}  run\n * @return {number} scale\n */\nvar calculateScale = function calculateScale(run) {\n  var _attributes$font;\n  var attributes = run.attributes || {};\n  var fontSize = attributes.fontSize || 12;\n  var unitsPerEm = (_attributes$font = attributes.font) === null || _attributes$font === void 0 ? void 0 : _attributes$font.unitsPerEm;\n  return unitsPerEm ? fontSize / unitsPerEm : 0;\n};\n\n/**\n * Get run scale\n *\n * @param  {Object}  run\n * @return {number} scale\n */\nvar scale = function scale(run) {\n  var _run$attributes;\n  return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.scale) || calculateScale(run);\n};\n\n/**\n * Get ligature offset by index\n *\n * Ex. ffi ligature\n *\n *   glyphs:         l  o  f  f  i  m\n *   glyphIndices:   0  1  2  2  2  3\n *   offset:         0  0  0  1  2  0\n *\n * @param  {number}  index\n * @param  {Object}  run\n * @return {number} ligature offset\n */\nvar offset = function offset(index, run) {\n  if (!run) return 0;\n  var glyphIndices = run.glyphIndices || [];\n  var value = glyphIndices[index];\n  return glyphIndices.slice(0, index).filter(function (i) {\n    return i === value;\n  }).length;\n};\n\n/**\n * Get run font\n *\n * @param  {Object}  run\n * @return {Object} font\n */\nvar getFont = function getFont(run) {\n  var _run$attributes;\n  return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.font) || null;\n};\n\n/**\n * Slice glyph between codePoints range\n * Util for breaking ligatures\n *\n * @param  {number}  start code point index\n * @param  {number}  end code point index\n * @param  {Object}  font to generate new glyph\n * @param  {Object} glyph to be sliced\n * @return {Array} sliced glyph parts\n */\nvar slice$2 = function slice(start, end, font, glyph) {\n  if (!glyph) return [];\n  if (start === end) return [];\n  if (start === 0 && end === glyph.codePoints.length) return [glyph];\n  var codePoints = glyph.codePoints.slice(start, end);\n  var string = String.fromCodePoint.apply(String, codePoints);\n  return font ? font.layout(string).glyphs : [glyph];\n};\n\n/**\n * Return glyph index at string index, if glyph indices present.\n * Otherwise return string index\n *\n * @param  {number}  string index\n * @param  {Object}  run\n * @return {number}  glyph index\n */\nvar glyphIndexAt = function glyphIndexAt(index, run) {\n  var _run$glyphIndices;\n  var result = run === null || run === void 0 ? void 0 : (_run$glyphIndices = run.glyphIndices) === null || _run$glyphIndices === void 0 ? void 0 : _run$glyphIndices[index];\n  return isNil(result) ? index : result;\n};\n\n/**\n * Returns new array starting with zero, and keeping same relation between consecutive values\n *\n * @param  {Array[number]}  list\n * @return {boolean} normalized array\n */\nvar normalize = function normalize(array) {\n  var head = array[0];\n  return array.map(function (value) {\n    return value - head;\n  });\n};\n\n/**\n * Slice run between glyph indices range\n *\n * @param  {number}  start glyph index\n * @param  {number}  end glyph index\n * @param  {Object}  run\n * @return {Object} sliced run\n */\nvar slice$1 = function slice(start, end, run) {\n  var _run$glyphs, _run$glyphs2;\n  var runScale = scale(run);\n  var font = getFont(run);\n\n  // Get glyph start and end indices\n  var startIndex = glyphIndexAt(start, run);\n  var endIndex = glyphIndexAt(end, run);\n\n  // Get start and end glyph\n  var startGlyph = (_run$glyphs = run.glyphs) === null || _run$glyphs === void 0 ? void 0 : _run$glyphs[startIndex];\n  var endGlyph = (_run$glyphs2 = run.glyphs) === null || _run$glyphs2 === void 0 ? void 0 : _run$glyphs2[endIndex];\n\n  // Get start ligature chunks (if any)\n  var startOffset = offset(start, run);\n  var startGlyphs = startOffset > 0 ? slice$2(startOffset, Infinity, font, startGlyph) : [];\n\n  // Get end ligature chunks (if any)\n  var endOffset = offset(end, run);\n  var endGlyphs = slice$2(0, endOffset, font, endGlyph);\n\n  // Compute new glyphs\n  var sliceStart = startIndex + Math.min(1, startOffset);\n  var glyphs = (run.glyphs || []).slice(sliceStart, endIndex);\n\n  // Compute new positions\n  var glyphPosition = function glyphPosition(g) {\n    return {\n      xAdvance: g.advanceWidth * runScale\n    };\n  };\n  var startPositions = startGlyphs.map(glyphPosition);\n  var positions = (run.positions || []).slice(sliceStart, endIndex);\n  var endPositions = endGlyphs.map(glyphPosition);\n  return Object.assign({}, run, {\n    start: run.start + start,\n    end: Math.min(run.end, run.start + end),\n    glyphIndices: normalize((run.glyphIndices || []).slice(start, end)),\n    glyphs: [startGlyphs, glyphs, endGlyphs].flat(),\n    positions: [startPositions, positions, endPositions].flat()\n  });\n};\n\n/**\n * Get run index that contains passed index\n *\n * @param  {number}  char index\n * @param  {Array}  runs array\n * @return {Array} run index\n */\nvar runIndexAt$1 = function runIndexAt(n, runs) {\n  if (!runs) return -1;\n  return runs.findIndex(function (run) {\n    return run.start <= n && n < run.end;\n  });\n};\n\n/**\n * Filter runs contained between start and end\n *\n * @param  {number}  start\n * @param  {number}  end\n * @param  {Array}  runs\n * @return {boolean} filtered runs\n */\nvar filter = function filter(start, end, runs) {\n  var startIndex = runIndexAt$1(start, runs);\n  var endIndex = Math.max(runIndexAt$1(end - 1, runs), startIndex);\n  return runs.slice(startIndex, endIndex + 1);\n};\n\n/**\n * Subtract scalar to run\n *\n * @param  {number}  scalar\n * @param  {Object}  run\n * @return {Object} subtracted run\n */\nvar subtract = function subtract(n, run) {\n  var start = run.start - n;\n  var end = run.end - n;\n  return Object.assign({}, run, {\n    start: start,\n    end: end\n  });\n};\n\n/**\n * Slice array of runs\n *\n * @param  {number}  start offset\n * @param  {number}  end offset\n * @param  {Array}  runs\n * @return {Array} sliced runs\n */\nvar sliceRuns = function sliceRuns(start, end, runs) {\n  var sliceFirstRun = function sliceFirstRun(a) {\n    return slice$1(start - a.start, end - a.start, a);\n  };\n  var sliceLastRun = function sliceLastRun(a) {\n    return slice$1(0, end - a.start, a);\n  };\n  return runs.map(function (run, i) {\n    var result = run;\n    var isFirst = i === 0;\n    var isLast = !isFirst && i === runs.length - 1;\n    if (isFirst) result = sliceFirstRun(run);\n    if (isLast) result = sliceLastRun(run);\n    return subtract(start, result);\n  });\n};\n\n/**\n * Slice attributed string between two indices\n *\n * @param  {number}  start offset\n * @param  {number}  end offset\n * @param  {Object}  attributedString\n * @return {Object} attributedString\n */\nvar slice = function slice(start, end, attributedString) {\n  if (attributedString.string.length === 0) return attributedString;\n  var string = attributedString.string.slice(start, end);\n  var filteredRuns = filter(start, end, attributedString.runs);\n  var slicedRuns = sliceRuns(start, end, filteredRuns);\n  return Object.assign({}, attributedString, {\n    string: string,\n    runs: slicedRuns\n  });\n};\nvar findCharIndex = function findCharIndex(string) {\n  return string.search(/\\S/g);\n};\nvar findLastCharIndex = function findLastCharIndex(string) {\n  var match = string.match(/\\S/g);\n  return match ? string.lastIndexOf(match[match.length - 1]) : -1;\n};\n\n/**\n * Removes (strips) whitespace from both ends of the attributted string.\n *\n * @param  {Object}  attributedString\n * @return {Object} attributedString\n */\nvar trim = function trim(attributedString) {\n  var start = findCharIndex(attributedString.string);\n  var end = findLastCharIndex(attributedString.string);\n  return slice(start, end + 1, attributedString);\n};\n\n/**\n * Returns empty run\n *\n * @return {Object} empty run\n */\nvar empty$1 = function empty() {\n  return {\n    start: 0,\n    end: 0,\n    glyphIndices: [],\n    glyphs: [],\n    positions: [],\n    attributes: {}\n  };\n};\nvar isNumber = function isNumber(value) {\n  return typeof value === 'number';\n};\n\n/**\n * Append glyph indices with given length\n *\n * Ex. appendIndices(3, [0, 1, 2, 2]) => [0, 1, 2, 2, 3, 3, 3]\n *\n * @param  {number}  length\n * @param  {Array}  glyph indices\n * @return {Array}  extended glyph indices\n */\nvar appendIndices = function appendIndices(length, indices) {\n  var lastIndex = last(indices);\n  var value = isNil(lastIndex) ? 0 : lastIndex + 1;\n  var newIndices = Array(length).fill(value);\n  return indices.concat(newIndices);\n};\n\n/**\n * Get glyph for a given code point\n *\n * @param  {number}  codePoint\n * @param  {Object}  font\n * @return {Object}  glyph\n * */\nvar fromCodePoint = function fromCodePoint(value, font) {\n  return font && value ? font.glyphForCodePoint(value) : null;\n};\n\n/**\n * Append glyph to run\n *\n * @param  {Object}  glyph\n * @param  {Object}  run\n * @return {Object} run with glyph\n */\nvar appendGlyph = function appendGlyph(glyph, run) {\n  var _glyph$codePoints;\n  var glyphLength = ((_glyph$codePoints = glyph.codePoints) === null || _glyph$codePoints === void 0 ? void 0 : _glyph$codePoints.length) || 0;\n  var end = run.end + glyphLength;\n  var glyphs = run.glyphs.concat(glyph);\n  var glyphIndices = appendIndices(glyphLength, run.glyphIndices);\n  if (!run.positions) return Object.assign({}, run, {\n    end: end,\n    glyphs: glyphs,\n    glyphIndices: glyphIndices\n  });\n  var positions = run.positions.concat({\n    xAdvance: glyph.advanceWidth * scale(run)\n  });\n  return Object.assign({}, run, {\n    end: end,\n    glyphs: glyphs,\n    glyphIndices: glyphIndices,\n    positions: positions\n  });\n};\n\n/**\n * Append glyph or code point to run\n *\n * @param  {Object | number}  glyph | codePoint\n * @param  {Object}  run\n * @return {Object} run with glyph\n */\nvar append$1 = function append(value, run) {\n  if (!value) return run;\n  var font = getFont(run);\n  var glyph = isNumber(value) ? fromCodePoint(value, font) : value;\n  return appendGlyph(glyph, run);\n};\n\n/**\n * Get string from array of code points\n *\n * @param {Array} code points\n * @return {String} string\n */\nvar stringFromCodePoints = function stringFromCodePoints(codePoints) {\n  return String.fromCodePoint.apply(String, codePoints);\n};\n\n/**\n * Append glyph into last run of attributed string\n *\n * @param {Object} glyph\n * @param {Object} attributed string\n * @return {Object} attributed string with new glyph\n */\nvar append = function append(glyph, attributedString) {\n  var codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];\n  var codePointsString = stringFromCodePoints(codePoints);\n  var string = attributedString.string + codePointsString;\n  var firstRuns = attributedString.runs.slice(0, -1);\n  var lastRun = last(attributedString.runs) || empty$1();\n  var runs = firstRuns.concat(append$1(glyph, lastRun));\n  return Object.assign({}, attributedString, {\n    string: string,\n    runs: runs\n  });\n};\nvar ELLIPSIS_UNICODE = 8230;\nvar ELLIPSIS_STRING = String.fromCharCode(ELLIPSIS_UNICODE);\n\n/**\n * Get ellipsis codepoint. This may be different in standard and embedded fonts\n *\n * @param  {number}  font\n * @return {Object} ellipsis codepoint\n */\nvar getEllipsisCodePoint = function getEllipsisCodePoint(font) {\n  if (!font.encode) return ELLIPSIS_UNICODE;\n  var _font$encode = font.encode(ELLIPSIS_STRING),\n    codePoints = _font$encode[0];\n  return parseInt(codePoints[0], 16);\n};\n\n/**\n * Trucante block with ellipsis\n *\n * @param  {number}  lines quantity\n * @param  {Object}  paragraph block\n * @return {Object} sliced paragraph block\n */\nvar truncate = function truncate(block) {\n  var _last, _last2, _last2$attributes;\n  var runs = ((_last = last(block)) === null || _last === void 0 ? void 0 : _last.runs) || [];\n  var font = (_last2 = last(runs)) === null || _last2 === void 0 ? void 0 : (_last2$attributes = _last2.attributes) === null || _last2$attributes === void 0 ? void 0 : _last2$attributes.font;\n  if (font) {\n    var _Object$assign;\n    var index = block.length - 1;\n    var codePoint = getEllipsisCodePoint(font);\n    var glyph = font.glyphForCodePoint(codePoint);\n    var lastBlock = append(glyph, trim(block[index]));\n    return Object.assign([], block, (_Object$assign = {}, _Object$assign[index] = lastBlock, _Object$assign));\n  }\n  return block;\n};\n\n/**\n * Omit attribute from run\n *\n * @param  {Object}  run\n * @return {Object} run without ommited attribute\n */\nvar omit = function omit(value, run) {\n  var attributes = Object.assign({}, run.attributes);\n  delete attributes[value];\n  return Object.assign({}, run, {\n    attributes: attributes\n  });\n};\n\n/**\n * Get run ascent\n *\n * @param  {Object}  run\n * @return {boolean} ascent\n */\nvar ascent$1 = function ascent(run) {\n  var _run$attributes, _run$attributes$attac, _run$attributes2, _run$attributes2$font;\n  var attachmentHeight = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$attac = _run$attributes.attachment) === null || _run$attributes$attac === void 0 ? void 0 : _run$attributes$attac.height) || 0;\n  var fontAscent = ((_run$attributes2 = run.attributes) === null || _run$attributes2 === void 0 ? void 0 : (_run$attributes2$font = _run$attributes2.font) === null || _run$attributes2$font === void 0 ? void 0 : _run$attributes2$font.ascent) || 0;\n  return Math.max(attachmentHeight, fontAscent * scale(run));\n};\n\n/**\n * Get run descent\n *\n * @param  {Object}  run\n * @return {number} descent\n */\nvar descent = function descent(run) {\n  var _run$attributes, _run$attributes$font;\n  var fontDescent = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.descent) || 0;\n  return scale(run) * fontDescent;\n};\n\n/**\n * Get run lineGap\n *\n * @param  {Object}  run\n * @return {number} lineGap\n */\nvar lineGap = function lineGap(run) {\n  var _run$attributes, _run$attributes$font;\n  return (((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.lineGap) || 0) * scale(run);\n};\n\n/**\n * Get run height\n *\n * @param  {Object}  run\n * @return {number} height\n */\nvar height$1 = function height(run) {\n  var _run$attributes;\n  var lineHeight = (_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.lineHeight;\n  return lineHeight || lineGap(run) + ascent$1(run) - descent(run);\n};\n\n/**\n * Returns attributed string height\n *\n * @param {Object} attributed string\n * @return {number} height\n */\nvar height = function height(attributeString) {\n  var reducer = function reducer(acc, run) {\n    return Math.max(acc, height$1(run));\n  };\n  return attributeString.runs.reduce(reducer, 0);\n};\n\n/**\n * Checks if two rects intersect each other\n *\n * @param {Rect} a\n * @param {Rect} b\n * @returns {Boolean} rects intersects\n */\nvar intersects = function intersects(a, b) {\n  var x = Math.max(a.x, b.x);\n  var num1 = Math.min(a.x + a.width, b.x + b.width);\n  var y = Math.max(a.y, b.y);\n  var num2 = Math.min(a.y + a.height, b.y + b.height);\n  return num1 >= x && num2 >= y;\n};\nvar _excluded = [\"excludeRects\"];\nvar getLineFragment = function getLineFragment(lineRect, excludeRect) {\n  if (!intersects(excludeRect, lineRect)) return [lineRect];\n  var eStart = excludeRect.x;\n  var eEnd = excludeRect.x + excludeRect.width;\n  var lStart = lineRect.x;\n  var lEnd = lineRect.x + lineRect.width;\n  var a = Object.assign({}, lineRect, {\n    width: eStart - lStart\n  });\n  var b = Object.assign({}, lineRect, {\n    x: eEnd,\n    width: lEnd - eEnd\n  });\n  return [a, b].filter(function (r) {\n    return r.width > 0;\n  });\n};\nvar getLineFragments = function getLineFragments(rect, excludeRects) {\n  var fragments = [rect];\n  var _loop = function _loop() {\n    var excludeRect = excludeRects[i];\n    fragments = fragments.reduce(function (acc, fragment) {\n      var pieces = getLineFragment(fragment, excludeRect);\n      return acc.concat(pieces);\n    }, []);\n  };\n  for (var i = 0; i < excludeRects.length; i += 1) {\n    _loop();\n  }\n  return fragments;\n};\nvar generateLineRects = function generateLineRects(container, height) {\n  var excludeRects = container.excludeRects,\n    rect = _objectWithoutPropertiesLoose(container, _excluded);\n  if (!excludeRects) return [rect];\n  var lineRects = [];\n  var maxY = Math.max.apply(Math, excludeRects.map(function (r) {\n    return r.y + r.height;\n  }));\n  var currentRect = rect;\n  while (currentRect.y < maxY) {\n    var _partition = partition(currentRect, height),\n      lineRect = _partition[0],\n      rest = _partition[1];\n    var lineRectFragments = getLineFragments(lineRect, excludeRects);\n    currentRect = rest;\n    lineRects.push.apply(lineRects, lineRectFragments);\n  }\n  return [].concat(lineRects, [currentRect]);\n};\nvar ATTACHMENT_CODE$1 = \"\\uFFFC\"; // 65532\n\n/**\n * Remove attachment attribute if no char present\n *\n * @param  {Object} attributed string\n * @return {Object} attributed string\n */\nvar purgeAttachments = function purgeAttachments(attributedString) {\n  var shouldPurge = !attributedString.string.includes(ATTACHMENT_CODE$1);\n  if (!shouldPurge) return attributedString;\n  var runs = attributedString.runs.map(function (run) {\n    return omit('attachment', run);\n  });\n  return Object.assign({}, attributedString, {\n    runs: runs\n  });\n};\n\n/**\n * Layout paragraphs inside rectangle\n *\n * @param  {Object} rect\n * @param  {Array} attributed strings\n * @return {Object} layout blocks\n */\nvar layoutLines = function layoutLines(rects, lines, indent) {\n  var rect = rects.shift();\n  var currentY = rect.y;\n  return lines.map(function (line, i) {\n    var _line$runs, _line$runs$;\n    var lineIndent = i === 0 ? indent : 0;\n    var style = ((_line$runs = line.runs) === null || _line$runs === void 0 ? void 0 : (_line$runs$ = _line$runs[0]) === null || _line$runs$ === void 0 ? void 0 : _line$runs$.attributes) || {};\n    var height$1 = Math.max(height(line), style.lineHeight);\n    if (currentY + height$1 > rect.y + rect.height && rects.length > 0) {\n      rect = rects.shift();\n      currentY = rect.y;\n    }\n    var newLine = Object.assign({}, line);\n    delete newLine.syllables;\n    newLine.box = {\n      x: rect.x + lineIndent,\n      y: currentY,\n      width: rect.width - lineIndent,\n      height: height$1\n    };\n    currentY += height$1;\n    return purgeAttachments(newLine);\n  });\n};\n\n/**\n * Performs line breaking and layout\n *\n * @param  {Object} engines\n * @param  {Object}  layout options\n * @param  {Object} rect\n * @param  {Object} attributed string\n * @return {Object} layout block\n */\nvar layoutParagraph = function layoutParagraph(engines, options) {\n  return function (container, paragraph) {\n    var _paragraph$runs, _paragraph$runs$, _paragraph$runs$$attr;\n    var height$1 = height(paragraph);\n    var indent = ((_paragraph$runs = paragraph.runs) === null || _paragraph$runs === void 0 ? void 0 : (_paragraph$runs$ = _paragraph$runs[0]) === null || _paragraph$runs$ === void 0 ? void 0 : (_paragraph$runs$$attr = _paragraph$runs$.attributes) === null || _paragraph$runs$$attr === void 0 ? void 0 : _paragraph$runs$$attr.indent) || 0;\n    var rects = generateLineRects(container, height$1);\n    var availableWidths = rects.map(function (r) {\n      return r.width;\n    });\n    availableWidths[0] -= indent;\n    var lines = engines.linebreaker(options)(paragraph, availableWidths);\n    return layoutLines(rects, lines, indent);\n  };\n};\n\n/**\n * Slice block at given height\n *\n * @param  {number}  height\n * @param  {Object}  paragraph block\n * @return {number} sliced paragraph block\n */\nvar sliceAtHeight = function sliceAtHeight(height, block) {\n  var newBlock = [];\n  var counter = 0;\n  for (var i = 0; i < block.length; i += 1) {\n    var line = block[i];\n    counter += line.box.height;\n    if (counter < height) {\n      newBlock.push(line);\n    } else {\n      break;\n    }\n  }\n  return newBlock;\n};\n\n/**\n * Layout paragraphs inside container until it does not\n * fit anymore, performing line wrapping in the process.\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Object}  container rect\n * @param  {Object}  attributed strings (paragraphs)\n * @return {Array} paragraph blocks\n */\nvar typesetter = function typesetter(engines, options, container) {\n  return function (attributedStrings) {\n    var blocks = [];\n    var paragraphs = [].concat(attributedStrings);\n    var layoutBlock = layoutParagraph(engines, options);\n    var maxLines = isNil(container.maxLines) ? Infinity : container.maxLines;\n    var truncateEllipsis = container.truncateMode === 'ellipsis';\n    var linesCount = maxLines;\n    var paragraphRect = copy(container);\n    var nextParagraph = paragraphs.shift();\n    while (linesCount > 0 && nextParagraph) {\n      var block = layoutBlock(paragraphRect, nextParagraph);\n      var slicedBlock = block.slice(0, linesCount);\n      var linesHeight = height$2(slicedBlock);\n      var shouldTruncate = truncateEllipsis && block.length !== slicedBlock.length;\n      linesCount -= slicedBlock.length;\n      if (paragraphRect.height >= linesHeight) {\n        blocks.push(shouldTruncate ? truncate(slicedBlock) : slicedBlock);\n        paragraphRect = crop(linesHeight, paragraphRect);\n        nextParagraph = paragraphs.shift();\n      } else {\n        blocks.push(truncate(sliceAtHeight(paragraphRect.height, slicedBlock)));\n        break;\n      }\n    }\n    return blocks;\n  };\n};\nvar DUMMY_CODEPOINT = 123;\n\n/**\n * Resolve string indices based on glyphs code points\n *\n * @param  {Array}  glyphs\n * @return {Array} glyph indices\n */\nvar resolve = function resolve(glyphs) {\n  if (glyphs === void 0) {\n    glyphs = [];\n  }\n  return glyphs.reduce(function (acc, glyph) {\n    var codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [DUMMY_CODEPOINT];\n    if (acc.length === 0) return codePoints.map(function () {\n      return 0;\n    });\n    var last = acc[acc.length - 1];\n    var next = codePoints.map(function () {\n      return last + 1;\n    });\n    return [].concat(acc, next);\n  }, []);\n};\nvar getCharacterSpacing = function getCharacterSpacing(run) {\n  var _run$attributes;\n  return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.characterSpacing) || 0;\n};\n\n/**\n * Scale run positions\n *\n * @param  {Object}  run\n * @param  {Array}  positions\n * @return {Array} scaled positions\n */\nvar scalePositions = function scalePositions(run, positions) {\n  var runScale = scale(run);\n  var characterSpacing = getCharacterSpacing(run);\n  return positions.map(function (position, i) {\n    var isLast = i === positions.length;\n    var xSpacing = isLast ? 0 : characterSpacing;\n    return Object.assign({}, position, {\n      xAdvance: position.xAdvance * runScale + xSpacing,\n      yAdvance: position.yAdvance * runScale,\n      xOffset: position.xOffset * runScale,\n      yOffset: position.yOffset * runScale\n    });\n  });\n};\n\n/**\n * Create glyph run\n *\n * @param  {String}  string\n * @param  {Object}  run\n * @return {Object}  glyph run\n */\nvar layoutRun = function layoutRun(string) {\n  return function (run) {\n    var start = run.start,\n      end = run.end,\n      _run$attributes2 = run.attributes,\n      attributes = _run$attributes2 === void 0 ? {} : _run$attributes2;\n    var font = attributes.font;\n    if (!font) return _extends({}, run, {\n      glyphs: [],\n      glyphIndices: [],\n      positions: []\n    });\n    var runString = string.slice(start, end);\n    var glyphRun = font.layout(runString);\n    var positions = scalePositions(run, glyphRun.positions);\n    var glyphIndices = resolve(glyphRun.glyphs);\n    return _extends({}, run, {\n      positions: positions,\n      glyphIndices: glyphIndices,\n      glyphs: glyphRun.glyphs\n    });\n  };\n};\n\n/**\n * Generate glyphs for single attributed string\n *\n * @param  {Object}  layout engines\n * @param  {Object}  layout options\n * @param  {Array}  attributed strings\n * @return {Array} attributed string with glyphs\n */\nvar generateGlyphs = function generateGlyphs() {\n  return function (attributedString) {\n    var runs = attributedString.runs.map(layoutRun(attributedString.string));\n    return Object.assign({}, attributedString, {\n      runs: runs\n    });\n  };\n};\n\n/**\n * Resolves yOffset for run\n *\n * @param  {Object}  run\n * @return {Object} run\n */\nvar resolveRunYOffset = function resolveRunYOffset(run) {\n  var _run$attributes, _run$attributes$font, _run$attributes2;\n  if (!run.positions) return run;\n  var unitsPerEm = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.unitsPerEm) || 0;\n  var yOffset = (((_run$attributes2 = run.attributes) === null || _run$attributes2 === void 0 ? void 0 : _run$attributes2.yOffset) || 0) * unitsPerEm;\n  var positions = run.positions.map(function (p) {\n    return Object.assign({}, p, {\n      yOffset: yOffset\n    });\n  });\n  return Object.assign({}, run, {\n    positions: positions\n  });\n};\n\n/**\n * Resolves yOffset for multiple paragraphs\n *\n * @param  {Object} layout engines\n * @param  {Object}  layout options\n * @param  {Array}  attributed strings (paragraphs)\n * @return {Array} attributed strings (paragraphs)\n */\nvar resolveYOffset = function resolveYOffset() {\n  return function (attributedString) {\n    var runs = attributedString.runs.map(resolveRunYOffset);\n    return Object.assign({}, attributedString, {\n      runs: runs\n    });\n  };\n};\n\n/**\n * Sort runs in ascending order\n *\n * @param  {Array}  runs\n * @return {Array} sorted runs\n */\nvar sort = function sort(runs) {\n  return runs.sort(function (a, b) {\n    return a.start - b.start || a.end - b.end;\n  });\n};\n\n/**\n * Is run empty (start === end)\n *\n * @param  {Object}  run\n * @return {Object} is run empty\n */\nvar isEmpty = function isEmpty(run) {\n  return run.start === run.end;\n};\nvar sortPoints = function sortPoints(a, b) {\n  return a[1] - b[1] || a[3] - b[3];\n};\nvar generatePoints = function generatePoints(runs) {\n  var result = runs.reduce(function (acc, run, i) {\n    return acc.concat([['start', run.start, run.attributes, i], ['end', run.end, run.attributes, i]]);\n  }, []);\n  return result.sort(sortPoints);\n};\nvar mergeRuns = function mergeRuns(runs) {\n  return runs.reduce(function (acc, run) {\n    var attributes = Object.assign({}, acc.attributes, run.attributes);\n    return Object.assign({}, run, {\n      attributes: attributes\n    });\n  }, {});\n};\nvar groupEmptyRuns = function groupEmptyRuns(runs) {\n  var groups = runs.reduce(function (acc, run) {\n    if (!acc[run.start]) acc[run.start] = [];\n    acc[run.start].push(run);\n    return acc;\n  }, {});\n  return Object.values(groups);\n};\nvar flattenEmptyRuns = function flattenEmptyRuns(runs) {\n  return groupEmptyRuns(runs).map(mergeRuns);\n};\nvar flattenRegularRuns = function flattenRegularRuns(runs) {\n  var res = [];\n  var points = generatePoints(runs);\n  var start = -1;\n  var attrs = {};\n  var stack = [];\n  for (var i = 0; i < points.length; i += 1) {\n    var _points$i = points[i],\n      type = _points$i[0],\n      offset = _points$i[1],\n      attributes = _points$i[2];\n    if (start !== -1 && start < offset) {\n      res.push({\n        start: start,\n        end: offset,\n        attributes: attrs\n      });\n    }\n    if (type === 'start') {\n      stack.push(attributes);\n      attrs = Object.assign({}, attrs, attributes);\n    } else {\n      attrs = {};\n      for (var j = 0; j < stack.length; j += 1) {\n        if (stack[j] === attributes) {\n          // eslint-disable-next-line no-plusplus\n          stack.splice(j--, 1);\n        } else {\n          attrs = Object.assign({}, attrs, stack[j]);\n        }\n      }\n    }\n    start = offset;\n  }\n  return res;\n};\n\n/**\n * Flatten many runs\n *\n * @param  {Array}  runs\n * @return {Array} flatten runs\n */\nvar flatten = function flatten(runs) {\n  if (runs === void 0) {\n    runs = [];\n  }\n  var emptyRuns = flattenEmptyRuns(runs.filter(function (run) {\n    return isEmpty(run);\n  }));\n  var regularRuns = flattenRegularRuns(runs.filter(function (run) {\n    return !isEmpty(run);\n  }));\n  return sort(emptyRuns.concat(regularRuns));\n};\n\n/**\n * Returns empty attributed string\n *\n * @return {Object} empty attributed string\n */\nvar empty = function empty() {\n  return {\n    string: '',\n    runs: []\n  };\n};\nvar omitFont = function omitFont(attributedString) {\n  var runs = attributedString.runs.map(function (run) {\n    return omit('font', run);\n  });\n  return Object.assign({}, attributedString, {\n    runs: runs\n  });\n};\n\n/**\n * Performs font substitution and script itemization on attributed string\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} processed attributed string\n */\nvar preprocessRuns = function preprocessRuns(engines, options) {\n  return function (attributedString) {\n    if (isNil(attributedString)) return empty();\n    var string = attributedString.string;\n    var fontSubstitution = engines.fontSubstitution,\n      scriptItemizer = engines.scriptItemizer;\n    var _omitFont = omitFont(attributedString),\n      omittedFontRuns = _omitFont.runs;\n    var _fontSubstitution = fontSubstitution(options)(attributedString),\n      substitutedRuns = _fontSubstitution.runs;\n    var _scriptItemizer = scriptItemizer(options)(attributedString),\n      itemizationRuns = _scriptItemizer.runs;\n    var runs = substitutedRuns.concat(itemizationRuns).concat(omittedFontRuns);\n    return {\n      string: string,\n      runs: flatten(runs)\n    };\n  };\n};\n\n/**\n * Get attributed string start value\n *\n * @param  {Object}  attributed string\n * @return {number} start\n */\nvar start = function start(attributedString) {\n  var runs = attributedString.runs;\n  return runs.length === 0 ? 0 : runs[0].start;\n};\n\n/**\n * Get attributed string end value\n *\n * @param  {Object}  attributed string\n * @return {number} end\n */\nvar end = function end(attributedString) {\n  var runs = attributedString.runs;\n  return runs.length === 0 ? 0 : last(runs).end;\n};\n\n/**\n * Get attributed string length\n *\n * @param  {Object}  glyph string\n * @return {number} end\n */\nvar length$1 = function length(attributedString) {\n  return end(attributedString) - start(attributedString);\n};\n\n/**\n * Breaks attributed string into paragraphs\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Array} attributed string array\n */\nvar splitParagraphs = function splitParagraphs() {\n  return function (attributedString) {\n    var res = [];\n    var start = 0;\n    var breakPoint = attributedString.string.indexOf('\\n') + 1;\n    while (breakPoint > 0) {\n      res.push(slice(start, breakPoint, attributedString));\n      start = breakPoint;\n      breakPoint = attributedString.string.indexOf('\\n', breakPoint) + 1;\n    }\n    if (start === 0) {\n      res.push(attributedString);\n    } else if (start < attributedString.string.length) {\n      res.push(slice(start, length$1(attributedString), attributedString));\n    }\n    return res;\n  };\n};\n\n/**\n * Return positions advance width\n *\n * @param  {Object}  positions\n * @return {number} advance width\n */\nvar advanceWidth$2 = function advanceWidth(positions) {\n  return positions.reduce(function (acc, pos) {\n    return acc + (pos.xAdvance || 0);\n  }, 0);\n};\n\n/**\n * Return run advance width\n *\n * @param  {Object}  run\n * @return {number} advance width\n */\nvar advanceWidth$1 = function advanceWidth(run) {\n  return advanceWidth$2(run.positions || []);\n};\n\n/**\n * Returns attributed string advancewidth\n *\n * @param {Object} attributed string\n * @return {number} advance width\n */\nvar advanceWidth = function advanceWidth(attributeString) {\n  var reducer = function reducer(acc, run) {\n    return acc + advanceWidth$1(run);\n  };\n  return attributeString.runs.reduce(reducer, 0);\n};\nvar WHITE_SPACES_CODE = 32;\n\n/**\n * Check if glyph is white space\n *\n * @param  {Object}  glyph\n * @return {Boolean}  is white space\n * */\nvar isWhiteSpace = function isWhiteSpace(glyph) {\n  var codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];\n  return codePoints.includes(WHITE_SPACES_CODE);\n};\n\n/**\n * Get white space leading positions\n *\n * @param  {Object}  run\n * @return {Array} white space leading positions\n */\nvar leadingPositions = function leadingPositions(run) {\n  var glyphs = run.glyphs || [];\n  var positions = run.positions || [];\n  var leadingWhitespaces = glyphs.findIndex(function (g) {\n    return !isWhiteSpace(g);\n  });\n  return positions.slice(0, leadingWhitespaces);\n};\n\n/**\n * Get run leading white space offset\n *\n * @param  {Object}  run\n * @return {number} leading white space offset\n */\nvar leadingOffset$1 = function leadingOffset(run) {\n  var positions = leadingPositions(run);\n  return positions.reduce(function (acc, pos) {\n    return acc + (pos.xAdvance || 0);\n  }, 0);\n};\n\n/**\n * Get attributed string leading white space offset\n *\n * @param  {Object}  attributed string\n * @return {number} leading white space offset\n */\nvar leadingOffset = function leadingOffset(attributedString) {\n  var runs = attributedString.runs || [];\n  return leadingOffset$1(runs[0]);\n};\nvar reverse = function reverse(array) {\n  return [].concat(array).reverse();\n};\n\n/**\n * Get white space trailing positions\n *\n * @param  {Object}  run\n * @return {Array} white space trailing positions\n */\nvar trailingPositions = function trailingPositions(run) {\n  var glyphs = reverse(run.glyphs || []);\n  var positions = reverse(run.positions || []);\n  var leadingWhitespaces = glyphs.findIndex(function (g) {\n    return !isWhiteSpace(g);\n  });\n  return positions.slice(0, leadingWhitespaces);\n};\n\n/**\n * Get run trailing white space offset\n *\n * @param  {Object}  run\n * @return {number} trailing white space offset\n */\nvar trailingOffset$1 = function trailingOffset(run) {\n  var positions = trailingPositions(run);\n  return positions.reduce(function (acc, pos) {\n    return acc + (pos.xAdvance || 0);\n  }, 0);\n};\n\n/**\n * Get attributed string trailing white space offset\n *\n * @param  {Object}  attributed string\n * @return {number} trailing white space offset\n */\nvar trailingOffset = function trailingOffset(attributedString) {\n  var runs = attributedString.runs || [];\n  return trailingOffset$1(last(runs));\n};\n\n/**\n * Drop last char of run\n *\n * @param  {Object}  run\n * @return {boolean} run without last char\n */\nvar dropLast$1 = function dropLast(run) {\n  return slice$1(0, run.end - run.start - 1, run);\n};\n\n/**\n * Drop last glyph\n *\n * @param {Object} attributed string\n * @return {Object} attributed string with new glyph\n */\nvar dropLast = function dropLast(attributeString) {\n  var string = dropLast$2(attributeString.string);\n  var runs = adjust(-1, dropLast$1, attributeString.runs);\n  return Object.assign({}, attributeString, {\n    string: string,\n    runs: runs\n  });\n};\nvar ALIGNMENT_FACTORS = {\n  center: 0.5,\n  right: 1\n};\n\n/**\n * Remove new line char at the end of line if present\n *\n * @param  {Object}  line\n * @return {Object} line\n */\nvar removeNewLine = function removeNewLine(line) {\n  return last(line.string) === '\\n' ? dropLast(line) : line;\n};\nvar getOverflowLeft = function getOverflowLeft(line) {\n  return leadingOffset(line) + (line.overflowLeft || 0);\n};\nvar getOverflowRight = function getOverflowRight(line) {\n  return trailingOffset(line) + (line.overflowRight || 0);\n};\n\n/**\n * Ignore whitespace at the start and end of a line for alignment\n *\n * @param  {Object}  line\n * @return {Object} line\n */\nvar adjustOverflow = function adjustOverflow(line) {\n  var overflowLeft = getOverflowLeft(line);\n  var overflowRight = getOverflowRight(line);\n  var x = line.box.x - overflowLeft;\n  var width = line.box.width + overflowLeft + overflowRight;\n  var box = Object.assign({}, line.box, {\n    x: x,\n    width: width\n  });\n  return Object.assign({}, line, {\n    box: box,\n    overflowLeft: overflowLeft,\n    overflowRight: overflowRight\n  });\n};\n\n/**\n * Performs line justification by calling appropiate engine\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {string}  text align\n * @param  {Object}  line\n * @return {Object} line\n */\nvar justifyLine$1 = function justifyLine(engines, options, align) {\n  return function (line) {\n    var lineWidth = advanceWidth(line);\n    var alignFactor = ALIGNMENT_FACTORS[align] || 0;\n    var remainingWidth = Math.max(0, line.box.width - lineWidth);\n    var shouldJustify = align === 'justify' || lineWidth > line.box.width;\n    var x = line.box.x + remainingWidth * alignFactor;\n    var box = Object.assign({}, line.box, {\n      x: x\n    });\n    var newLine = Object.assign({}, line, {\n      box: box\n    });\n    return shouldJustify ? engines.justification(options)(newLine) : newLine;\n  };\n};\nvar finalizeLine = function finalizeLine(line) {\n  var lineAscent = 0;\n  var lineDescent = 0;\n  var lineHeight = 0;\n  var lineXAdvance = 0;\n  var runs = line.runs.map(function (run) {\n    var height = height$1(run);\n    var ascent = ascent$1(run);\n    var descent$1 = descent(run);\n    var xAdvance = advanceWidth$1(run);\n    lineHeight = Math.max(lineHeight, height);\n    lineAscent = Math.max(lineAscent, ascent);\n    lineDescent = Math.max(lineDescent, descent$1);\n    lineXAdvance += xAdvance;\n    return Object.assign({}, run, {\n      height: height,\n      ascent: ascent,\n      descent: descent$1,\n      xAdvance: xAdvance\n    });\n  });\n  return Object.assign({}, line, {\n    runs: runs,\n    height: lineHeight,\n    ascent: lineAscent,\n    descent: lineDescent,\n    xAdvance: lineXAdvance\n  });\n};\n\n/**\n * Finalize line by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Object}  line\n * @param  {number}  line index\n * @param  {Array}  total lines\n * @return {Object} line\n */\nvar finalizeBlock = function finalizeBlock(engines, options) {\n  if (engines === void 0) {\n    engines = {};\n  }\n  return function (line, i, lines) {\n    var _line$runs, _line$runs$;\n    var isLastFragment = i === lines.length - 1;\n    var style = ((_line$runs = line.runs) === null || _line$runs === void 0 ? void 0 : (_line$runs$ = _line$runs[0]) === null || _line$runs$ === void 0 ? void 0 : _line$runs$.attributes) || {};\n    var align = isLastFragment ? style.alignLastLine : style.align;\n    return compose(finalizeLine, engines.textDecoration(options), justifyLine$1(engines, options, align), adjustOverflow, removeNewLine)(line);\n  };\n};\n\n/**\n * Finalize line block by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Array}  line blocks\n * @return {Array} line blocks\n */\nvar finalizeFragments = function finalizeFragments(engines, options) {\n  return function (blocks) {\n    var blockFinalizer = finalizeBlock(engines, options);\n    return blocks.map(function (block) {\n      return block.map(blockFinalizer);\n    });\n  };\n};\nvar ATTACHMENT_CODE = 0xfffc; // 65532\n\nvar isReplaceGlyph = function isReplaceGlyph(glyph) {\n  return glyph.codePoints.includes(ATTACHMENT_CODE);\n};\n\n/**\n * Resolve attachments of run\n *\n * @param  {Object}  run\n * @return {Object} run\n */\nvar resolveRunAttachments = function resolveRunAttachments(run) {\n  var _run$attributes;\n  if (!run.positions) return run;\n  var glyphs = run.glyphs || [];\n  var attachment = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.attachment) || {};\n  var positions = run.positions.map(function (position, i) {\n    var glyph = glyphs[i];\n    if (attachment && attachment.width && isReplaceGlyph(glyph)) {\n      return Object.assign({}, position, {\n        xAdvance: attachment.width\n      });\n    }\n    return Object.assign({}, position);\n  });\n  return Object.assign({}, run, {\n    positions: positions\n  });\n};\n\n/**\n * Resolve attachments for multiple paragraphs\n *\n * @param  {Object} layout engines\n * @param  {Object}  layout options\n * @param  {Array}  attributed strings (paragraphs)\n * @return {Array} attributed strings (paragraphs)\n */\nvar resolveAttachments = function resolveAttachments() {\n  return function (attributedString) {\n    var runs = attributedString.runs.map(resolveRunAttachments);\n    return Object.assign({}, attributedString, {\n      runs: runs\n    });\n  };\n};\nvar applyAttributes = function applyAttributes(a) {\n  return {\n    align: a.align || 'left',\n    alignLastLine: a.alignLastLine || (a.align === 'justify' ? 'left' : a.align || 'left'),\n    attachment: a.attachment || null,\n    backgroundColor: a.backgroundColor || null,\n    bidiLevel: a.bidiLevel || null,\n    bullet: a.bullet || null,\n    characterSpacing: a.characterSpacing || 0,\n    color: a.color || 'black',\n    features: a.features || [],\n    fill: a.fill !== false,\n    font: a.font || null,\n    fontSize: a.fontSize || 12,\n    hangingPunctuation: a.hangingPunctuation || false,\n    hyphenationFactor: a.hyphenationFactor || 0,\n    indent: a.indent || 0,\n    justificationFactor: a.justificationFactor || 1,\n    lineHeight: a.lineHeight || null,\n    lineSpacing: a.lineSpacing || 0,\n    link: a.link || null,\n    marginLeft: a.marginLeft || a.margin || 0,\n    marginRight: a.marginRight || a.margin || 0,\n    opacity: a.opacity,\n    paddingTop: a.paddingTop || a.padding || 0,\n    paragraphSpacing: a.paragraphSpacing || 0,\n    underline: a.underline || false,\n    underlineColor: a.underlineColor || a.color || 'black',\n    underlineStyle: a.underlineStyle || 'solid',\n    script: a.script || null,\n    shrinkFactor: a.shrinkFactor || 0,\n    strike: a.strike || false,\n    strikeColor: a.strikeColor || a.color || 'black',\n    strikeStyle: a.strikeStyle || 'solid',\n    stroke: a.stroke || false,\n    verticalAlign: a.verticalAlign || null,\n    wordSpacing: a.wordSpacing || 0,\n    yOffset: a.yOffset || 0\n  };\n};\n\n/**\n * Apply default style to run\n *\n * @param  {Object}  run\n * @return {Object} run with styles\n */\nvar applyRunStyles = function applyRunStyles(run) {\n  var attributes = applyAttributes(run.attributes);\n  return Object.assign({}, run, {\n    attributes: attributes\n  });\n};\n\n/**\n * Apply default attributes for an attributed string\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} attributed string\n */\nvar applyDefaultStyles = function applyDefaultStyles() {\n  return function (attributedString) {\n    var string = attributedString.string || '';\n    var runs = (attributedString.runs || []).map(applyRunStyles);\n    return {\n      string: string,\n      runs: runs\n    };\n  };\n};\n\n/* eslint-disable no-restricted-syntax */\n\n/**\n * Apply scaling and yOffset for verticalAlign 'sub' and 'super'.\n *\n * @param  {Object} layout options\n * @param  {Object} attributed string\n * @return {Object} attributed string\n */\nvar verticalAlignment = function verticalAlignment() {\n  return function (attributedString) {\n    attributedString.runs.forEach(function (run) {\n      var attributes = run.attributes;\n      var verticalAlign = attributes.verticalAlign;\n      if (verticalAlign === 'sub') {\n        attributes.yOffset = -0.2;\n      } else if (verticalAlign === 'super') {\n        attributes.yOffset = 0.4;\n      }\n    });\n    return attributedString;\n  };\n};\n\n/**\n * A LayoutEngine is the main object that performs text layout.\n * It accepts an AttributedString and a Container object\n * to layout text into, and uses several helper objects to perform\n * various layout tasks. These objects can be overridden to customize\n * layout behavior.\n *\n * @param  {Object}  engines\n * @param  {Object}  attributed string\n * @param  {Object}  container rect\n * @param  {Object}  layout options\n * @return {Array} paragraph blocks\n */\nvar layoutEngine = function layoutEngine(engines) {\n  return function (attributedString, container, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var processParagraph = compose(resolveYOffset(), resolveAttachments(), generateGlyphs(), verticalAlignment(), wrapWords(engines, options));\n    var processParagraphs = function processParagraphs(paragraphs) {\n      return paragraphs.map(processParagraph);\n    };\n    return compose(finalizeFragments(engines, options), typesetter(engines, options, container), processParagraphs, splitParagraphs(), preprocessRuns(engines, options), applyDefaultStyles())(attributedString);\n  };\n};\n\n/* eslint-disable no-plusplus */\nvar INFINITY = 10000;\nvar getNextBreakpoint = function getNextBreakpoint(subnodes, widths, lineNumber) {\n  var position = null;\n  var minimumBadness = Infinity;\n  var sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0\n  };\n  var lineLength = widths[Math.min(lineNumber, widths.length - 1)];\n  var calculateRatio = function calculateRatio(node) {\n    if (sum.width < lineLength) {\n      return sum.stretch - node.stretch > 0 ? (lineLength - sum.width) / sum.stretch : INFINITY;\n    }\n    if (sum.width > lineLength) {\n      return sum.shrink - node.shrink > 0 ? (lineLength - sum.width) / sum.shrink : INFINITY;\n    }\n    return 0;\n  };\n  for (var i = 0; i < subnodes.length; i += 1) {\n    var node = subnodes[i];\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    }\n    if (sum.width - sum.shrink > lineLength) {\n      if (position === null) {\n        var j = i === 0 ? i + 1 : i;\n        while (j < subnodes.length && (subnodes[j].type === 'glue' || subnodes[j].type === 'penalty')) {\n          j++;\n        }\n        position = j - 1;\n      }\n      break;\n    }\n    if (node.type === 'penalty' || node.type === 'glue') {\n      var ratio = calculateRatio(node);\n      var penalty = node.type === 'penalty' ? node.penalty : 0;\n      var badness = 100 * Math.pow(Math.abs(ratio), 3) + penalty;\n      if (minimumBadness >= badness) {\n        position = i;\n        minimumBadness = badness;\n      }\n    }\n  }\n  return sum.width - sum.shrink > lineLength ? position : null;\n};\nvar applyBestFit = function applyBestFit(nodes, widths) {\n  var count = 0;\n  var lineNumber = 0;\n  var subnodes = nodes;\n  var breakpoints = [{\n    position: 0\n  }];\n  while (subnodes.length > 0) {\n    var breakpoint = getNextBreakpoint(subnodes, widths, lineNumber);\n    if (breakpoint !== null) {\n      count += breakpoint;\n      breakpoints.push({\n        position: count\n      });\n      subnodes = subnodes.slice(breakpoint + 1, subnodes.length);\n      count++;\n      lineNumber++;\n    } else {\n      subnodes = [];\n    }\n  }\n  return breakpoints;\n};\n\n/* eslint-disable no-param-reassign */\n/* eslint-disable max-classes-per-file */\nvar Node = /*#__PURE__*/function () {\n  function Node(data) {\n    this.prev = null;\n    this.next = null;\n    this.data = data;\n  }\n  var _proto = Node.prototype;\n  _proto.toString = function toString() {\n    return this.data.toString();\n  };\n  return Node;\n}();\nvar LinkedList = /*#__PURE__*/function () {\n  function LinkedList() {\n    this.head = null;\n    this.tail = null;\n    this.listSize = 0;\n  }\n  var _proto2 = LinkedList.prototype;\n  _proto2.isLinked = function isLinked(node) {\n    return !(node && node.prev === null && node.next === null && this.tail !== node && this.head !== node || this.isEmpty());\n  };\n  _proto2.size = function size() {\n    return this.listSize;\n  };\n  _proto2.isEmpty = function isEmpty() {\n    return this.listSize === 0;\n  };\n  _proto2.first = function first() {\n    return this.head;\n  };\n  _proto2.last = function last() {\n    return this.last;\n  };\n  _proto2.toString = function toString() {\n    return this.toArray().toString();\n  };\n  _proto2.toArray = function toArray() {\n    var node = this.head;\n    var result = [];\n    while (node !== null) {\n      result.push(node);\n      node = node.next;\n    }\n    return result;\n  };\n  _proto2.forEach = function forEach(fun) {\n    var node = this.head;\n    while (node !== null) {\n      fun(node);\n      node = node.next;\n    }\n  };\n  _proto2.contains = function contains(n) {\n    var node = this.head;\n    if (!this.isLinked(n)) {\n      return false;\n    }\n    while (node !== null) {\n      if (node === n) {\n        return true;\n      }\n      node = node.next;\n    }\n    return false;\n  };\n  _proto2.at = function at(i) {\n    var node = this.head;\n    var index = 0;\n    if (i >= this.listLength || i < 0) {\n      return null;\n    }\n    while (node !== null) {\n      if (i === index) {\n        return node;\n      }\n      node = node.next;\n      index += 1;\n    }\n    return null;\n  };\n  _proto2.insertAfter = function insertAfter(node, newNode) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next === null) {\n      this.tail = newNode;\n    } else {\n      node.next.prev = newNode;\n    }\n    node.next = newNode;\n    this.listSize += 1;\n    return this;\n  };\n  _proto2.insertBefore = function insertBefore(node, newNode) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev === null) {\n      this.head = newNode;\n    } else {\n      node.prev.next = newNode;\n    }\n    node.prev = newNode;\n    this.listSize += 1;\n    return this;\n  };\n  _proto2.push = function push(node) {\n    if (this.head === null) {\n      this.unshift(node);\n    } else {\n      this.insertAfter(this.tail, node);\n    }\n    return this;\n  };\n  _proto2.unshift = function unshift(node) {\n    if (this.head === null) {\n      this.head = node;\n      this.tail = node;\n      node.prev = null;\n      node.next = null;\n      this.listSize += 1;\n    } else {\n      this.insertBefore(this.head, node);\n    }\n    return this;\n  };\n  _proto2.remove = function remove(node) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    if (node.prev === null) {\n      this.head = node.next;\n    } else {\n      node.prev.next = node.next;\n    }\n    if (node.next === null) {\n      this.tail = node.prev;\n    } else {\n      node.next.prev = node.prev;\n    }\n    this.listSize -= 1;\n    return this;\n  };\n  _proto2.pop = function pop() {\n    var node = this.tail;\n    this.tail.prev.next = null;\n    this.tail = this.tail.prev;\n    this.listSize -= 1;\n    node.prev = null;\n    node.next = null;\n    return node;\n  };\n  _proto2.shift = function shift() {\n    var node = this.head;\n    this.head.next.prev = null;\n    this.head = this.head.next;\n    this.listSize -= 1;\n    node.prev = null;\n    node.next = null;\n    return node;\n  };\n  return LinkedList;\n}();\nLinkedList.Node = Node;\n\n/* eslint-disable no-restricted-properties */\n\n/**\n * @preserve Knuth and Plass line breaking algorithm in JavaScript\n *\n * Licensed under the new BSD License.\n * Copyright 2009-2010, Bram Stein\n * All rights reserved.\n */\nvar linebreak = function linebreak(nodes, lines, settings) {\n  var options = {\n    demerits: {\n      line: settings && settings.demerits && settings.demerits.line || 10,\n      flagged: settings && settings.demerits && settings.demerits.flagged || 100,\n      fitness: settings && settings.demerits && settings.demerits.fitness || 3000\n    },\n    tolerance: settings && settings.tolerance || 3\n  };\n  var activeNodes = new LinkedList();\n  var sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0\n  };\n  var lineLengths = lines;\n  var breaks = [];\n  var tmp = {\n    data: {\n      demerits: Infinity\n    }\n  };\n  function breakpoint(position, demerits, ratio, line, fitnessClass, totals, previous) {\n    return {\n      position: position,\n      demerits: demerits,\n      ratio: ratio,\n      line: line,\n      fitnessClass: fitnessClass,\n      totals: totals || {\n        width: 0,\n        stretch: 0,\n        shrink: 0\n      },\n      previous: previous\n    };\n  }\n  function computeCost(start, end, active, currentLine) {\n    var width = sum.width - active.totals.width;\n    var stretch = 0;\n    var shrink = 0;\n    // If the current line index is within the list of linelengths, use it, otherwise use\n    // the last line length of the list.\n    var lineLength = currentLine < lineLengths.length ? lineLengths[currentLine - 1] : lineLengths[lineLengths.length - 1];\n    if (nodes[end].type === 'penalty') {\n      width += nodes[end].width;\n    }\n    if (width < lineLength) {\n      // Calculate the stretch ratio\n      stretch = sum.stretch - active.totals.stretch;\n      if (stretch > 0) {\n        return (lineLength - width) / stretch;\n      }\n      return linebreak.infinity;\n    }\n    if (width > lineLength) {\n      // Calculate the shrink ratio\n      shrink = sum.shrink - active.totals.shrink;\n      if (shrink > 0) {\n        return (lineLength - width) / shrink;\n      }\n      return linebreak.infinity;\n    }\n\n    // perfect match\n    return 0;\n  }\n\n  // Add width, stretch and shrink values from the current\n  // break point up to the next box or forced penalty.\n  function computeSum(breakPointIndex) {\n    var result = {\n      width: sum.width,\n      stretch: sum.stretch,\n      shrink: sum.shrink\n    };\n    for (var i = breakPointIndex; i < nodes.length; i += 1) {\n      if (nodes[i].type === 'glue') {\n        result.width += nodes[i].width;\n        result.stretch += nodes[i].stretch;\n        result.shrink += nodes[i].shrink;\n      } else if (nodes[i].type === 'box' || nodes[i].type === 'penalty' && nodes[i].penalty === -linebreak.infinity && i > breakPointIndex) {\n        break;\n      }\n    }\n    return result;\n  }\n\n  // The main loop of the algorithm\n  // eslint-disable-next-line no-shadow\n  function mainLoop(node, index, nodes) {\n    var active = activeNodes.first();\n    var next = null;\n    var ratio = 0;\n    var demerits = 0;\n    var candidates = [];\n    var badness;\n    var currentLine = 0;\n    var tmpSum;\n    var currentClass = 0;\n    var fitnessClass;\n    var candidate;\n    var newNode;\n\n    // The inner loop iterates through all the active nodes with line < currentLine and then\n    // breaks out to insert the new active node candidates before looking at the next active\n    // nodes for the next lines. The result of this is that the active node list is always\n    // sorted by line number.\n    while (active !== null) {\n      candidates = [{\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }];\n\n      // Iterate through the linked list of active nodes to find new potential active nodes\n      // and deactivate current active nodes.\n      while (active !== null) {\n        next = active.next;\n        currentLine = active.data.line + 1;\n        ratio = computeCost(active.data.position, index, active.data, currentLine);\n\n        // Deactive nodes when the distance between the current active node and the\n        // current node becomes too large (i.e. it exceeds the stretch limit and the stretch\n        // ratio becomes negative) or when the current node is a forced break (i.e. the end\n        // of the paragraph when we want to remove all active nodes, but possibly have a final\n        // candidate active node---if the paragraph can be set using the given tolerance value.)\n        if (ratio < -1 || node.type === 'penalty' && node.penalty === -linebreak.infinity) {\n          activeNodes.remove(active);\n        }\n\n        // If the ratio is within the valid range of -1 <= ratio <= tolerance calculate the\n        // total demerits and record a candidate active node.\n        if (ratio >= -1 && ratio <= options.tolerance) {\n          badness = 100 * Math.pow(Math.abs(ratio), 3);\n\n          // Positive penalty\n          if (node.type === 'penalty' && node.penalty >= 0) {\n            demerits = Math.pow(options.demerits.line + badness, 2) + Math.pow(node.penalty, 2);\n            // Negative penalty but not a forced break\n          } else if (node.type === 'penalty' && node.penalty !== -linebreak.infinity) {\n            demerits = Math.pow(options.demerits.line + badness, 2) - Math.pow(node.penalty, 2);\n            // All other cases\n          } else {\n            demerits = Math.pow(options.demerits.line + badness, 2);\n          }\n          if (node.type === 'penalty' && nodes[active.data.position].type === 'penalty') {\n            demerits += options.demerits.flagged * node.flagged * nodes[active.data.position].flagged;\n          }\n\n          // Calculate the fitness class for this candidate active node.\n          if (ratio < -0.5) {\n            currentClass = 0;\n          } else if (ratio <= 0.5) {\n            currentClass = 1;\n          } else if (ratio <= 1) {\n            currentClass = 2;\n          } else {\n            currentClass = 3;\n          }\n\n          // Add a fitness penalty to the demerits if the fitness classes of two adjacent lines\n          // differ too much.\n          if (Math.abs(currentClass - active.data.fitnessClass) > 1) {\n            demerits += options.demerits.fitness;\n          }\n\n          // Add the total demerits of the active node to get the total demerits of this candidate node.\n          demerits += active.data.demerits;\n\n          // Only store the best candidate for each fitness class\n          if (demerits < candidates[currentClass].demerits) {\n            candidates[currentClass] = {\n              active: active,\n              demerits: demerits,\n              ratio: ratio\n            };\n          }\n        }\n        active = next;\n\n        // Stop iterating through active nodes to insert new candidate active nodes in the active list\n        // before moving on to the active nodes for the next line.\n        // TODO: The Knuth and Plass paper suggests a conditional for currentLine < j0. This means paragraphs\n        // with identical line lengths will not be sorted by line number. Find out if that is a desirable outcome.\n        // For now I left this out, as it only adds minimal overhead to the algorithm and keeping the active node\n        // list sorted has a higher priority.\n        if (active !== null && active.data.line >= currentLine) {\n          break;\n        }\n      }\n      tmpSum = computeSum(index);\n      for (fitnessClass = 0; fitnessClass < candidates.length; fitnessClass += 1) {\n        candidate = candidates[fitnessClass];\n        if (candidate.demerits < Infinity) {\n          newNode = new LinkedList.Node(breakpoint(index, candidate.demerits, candidate.ratio, candidate.active.data.line + 1, fitnessClass, tmpSum, candidate.active));\n          if (active !== null) {\n            activeNodes.insertBefore(active, newNode);\n          } else {\n            activeNodes.push(newNode);\n          }\n        }\n      }\n    }\n  }\n\n  // Add an active node for the start of the paragraph.\n  activeNodes.push(new LinkedList.Node(breakpoint(0, 0, 0, 0, 0, undefined, null)));\n\n  // eslint-disable-next-line no-shadow\n  nodes.forEach(function (node, index, nodes) {\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      if (index > 0 && nodes[index - 1].type === 'box') {\n        mainLoop(node, index, nodes);\n      }\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    } else if (node.type === 'penalty' && node.penalty !== linebreak.infinity) {\n      mainLoop(node, index, nodes);\n    }\n  });\n  if (activeNodes.size() !== 0) {\n    // Find the best active node (the one with the least total demerits.)\n    activeNodes.forEach(function (node) {\n      if (node.data.demerits < tmp.data.demerits) {\n        tmp = node;\n      }\n    });\n    while (tmp !== null) {\n      breaks.push({\n        position: tmp.data.position,\n        ratio: tmp.data.ratio\n      });\n      tmp = tmp.data.previous;\n    }\n    return breaks.reverse();\n  }\n  return [];\n};\nlinebreak.infinity = 10000;\nlinebreak.glue = function (width, value, stretch, shrink) {\n  return {\n    type: 'glue',\n    value: value,\n    width: width,\n    stretch: stretch,\n    shrink: shrink\n  };\n};\nlinebreak.box = function (width, value, hyphenated) {\n  if (hyphenated === void 0) {\n    hyphenated = false;\n  }\n  return {\n    type: 'box',\n    width: width,\n    value: value,\n    hyphenated: hyphenated\n  };\n};\nlinebreak.penalty = function (width, penalty, flagged) {\n  return {\n    type: 'penalty',\n    width: width,\n    penalty: penalty,\n    flagged: flagged\n  };\n};\n\n/**\n * Add scalar to run\n *\n * @param  {number}  scalar\n * @param  {Object}  run\n * @return {Object} added run\n */\nvar add = function add(n, run) {\n  var start = run.start + n;\n  var end = run.end + n;\n  return Object.assign({}, run, {\n    start: start,\n    end: end\n  });\n};\n\n/**\n * Get run length\n *\n * @param  {Object}  run\n * @return {number} length\n */\nvar length = function length(run) {\n  return run.end - run.start;\n};\n\n/**\n * Concats two runs into one\n *\n * @param  {Object}  first run\n * @param  {Object}  second run\n * @return {Object}  concatenated run\n */\nvar concat = function concat(runA, runB) {\n  var end = runA.end + length(runB);\n  var glyphs = (runA.glyphs || []).concat(runB.glyphs || []);\n  var positions = (runA.positions || []).concat(runB.positions || []);\n  var attributes = Object.assign({}, runA.attributes, runB.attributes);\n  var runAIndices = runA.glyphIndices || [];\n  var runALastIndex = last(runAIndices) || 0;\n  var runBIndices = (runB.glyphIndices || []).map(function (i) {\n    return i + runALastIndex + 1;\n  });\n  var glyphIndices = normalize(runAIndices.concat(runBIndices));\n  return Object.assign({}, runA, {\n    end: end,\n    glyphs: glyphs,\n    positions: positions,\n    attributes: attributes,\n    glyphIndices: glyphIndices\n  });\n};\n\n/**\n * Insert glyph to run in the given index\n *\n * @param  {number}  string index\n * @param  {Object}  glyph\n * @param  {Object}  run\n * @return {Object}  run with glyph\n */\nvar insertGlyph$1 = function insertGlyph(index, glyph, run) {\n  if (!glyph) return run;\n\n  // Split resolves ligature splitting in case new glyph breaks some\n  var leadingRun = slice$1(0, index, run);\n  var trailingRun = slice$1(index, Infinity, run);\n  return concat(append$1(glyph, leadingRun), trailingRun);\n};\n\n/**\n * Insert either glyph or code point to run in the given index\n *\n * @param  {number}  string index\n * @param  {Object | number}  glyph | codePoint\n * @param  {Object}  run\n * @return {Object}  run with glyph\n */\nvar insert = function insert(index, value, run) {\n  var font = getFont(run);\n  var glyph = isNumber(value) ? fromCodePoint(value, font) : value;\n  return insertGlyph$1(index, glyph, run);\n};\n\n/**\n * Get run index at char index\n *\n * @param  {number}  char index\n * @param  {Object}  attributedString\n * @return {number} run index\n */\nvar runIndexAt = function runIndexAt(n, string) {\n  return runIndexAt$1(n, string.runs);\n};\n\n/**\n * Insert glyph into attributed string\n *\n * @param {number} index\n * @param {Object} glyph\n * @param {Object} attributed string\n * @return {Object} attributed string with new glyph\n */\nvar insertGlyph = function insertGlyph(index, glyph, attributedString) {\n  var runIndex = runIndexAt(index, attributedString);\n\n  // Add glyph to the end if run index invalid\n  if (runIndex === -1) return append(glyph, attributedString);\n  var codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];\n  var string = attributedString.string.slice(0, index) + stringFromCodePoints(codePoints) + attributedString.string.slice(index);\n  var runs = attributedString.runs.map(function (run, i) {\n    if (i === runIndex) return insert(index - run.start, glyph, run);\n    if (i > runIndex) return add(codePoints.length, run);\n    return run;\n  });\n  return Object.assign({}, attributedString, {\n    string: string,\n    runs: runs\n  });\n};\n\n/**\n * Advance width between two string indices\n *\n * @param  {number}  start glyph index\n * @param  {number}  end glyph index\n * @param  {Object}  run\n * @return {Object} advanced width run\n */\nvar advanceWidthBetween$1 = function advanceWidthBetween(start, end, run) {\n  var runStart = run.start || 0;\n  var glyphStartIndex = Math.max(0, glyphIndexAt(start - runStart, run));\n  var glyphEndIndex = Math.max(0, glyphIndexAt(end - runStart, run));\n  var positions = (run.positions || []).slice(glyphStartIndex, glyphEndIndex);\n  return advanceWidth$2(positions);\n};\n\n/**\n * Advance width between start and end\n * Does not consider ligature splitting for the moment.\n * Check performance impact on supporting this\n *\n * @param  {number}  start offset\n * @param  {number}  end offset\n * @param  {Object}  attributedString\n * @return {number} advance width\n */\nvar advanceWidthBetween = function advanceWidthBetween(start, end, attributedString) {\n  var runs = filter(start, end, attributedString.runs);\n  return runs.reduce(function (acc, run) {\n    return acc + advanceWidthBetween$1(start, end, run);\n  }, 0);\n};\nvar HYPHEN = 0x002d;\nvar TOLERANCE_STEPS = 5;\nvar TOLERANCE_LIMIT = 50;\nvar opts = {\n  width: 3,\n  stretch: 6,\n  shrink: 9\n};\n\n/**\n * Slice attributed string to many lines\n *\n * @param {Object} attributed string\n * @param  {Array}  nodes\n * @param  {Array}  breaks\n * @return {Array} attributed strings\n */\nvar breakLines = function breakLines(string, nodes, breaks) {\n  var start = 0;\n  var end = null;\n  var lines = breaks.reduce(function (acc, breakPoint) {\n    var node = nodes[breakPoint.position];\n    var prevNode = nodes[breakPoint.position - 1];\n\n    // Last breakpoint corresponds to K&P mandatory final glue\n    if (breakPoint.position === nodes.length - 1) return acc;\n    var line;\n    if (node.type === 'penalty') {\n      end = prevNode.value.end;\n      line = slice(start, end, string);\n      line = insertGlyph(line.length, HYPHEN, line);\n    } else {\n      end = node.value.end;\n      line = slice(start, end, string);\n    }\n    start = end;\n    return [].concat(acc, [line]);\n  }, []);\n\n  // Last line\n  lines.push(slice(start, string.string.length, string));\n  return lines;\n};\n\n/**\n * Return Knuth & Plass nodes based on line and previously calculated syllables\n *\n * @param {Object} attributed string\n * @param  {Object}  attributed string\n * @param  {Object}  layout options\n * @return {Array} attributed strings\n */\nvar getNodes = function getNodes(attributedString, _ref, options) {\n  var align = _ref.align;\n  var start = 0;\n  var hyphenWidth = 5;\n  var syllables = attributedString.syllables;\n  var hyphenPenalty = options.hyphenationPenalty || (align === 'justify' ? 100 : 600);\n  var result = syllables.reduce(function (acc, s, index) {\n    var width = advanceWidthBetween(start, start + s.length, attributedString);\n    if (s.trim() === '') {\n      var stretch = width * opts.width / opts.stretch;\n      var shrink = width * opts.width / opts.shrink;\n      var value = {\n        start: start,\n        end: start + s.length\n      };\n      acc.push(linebreak.glue(width, value, stretch, shrink));\n    } else {\n      var hyphenated = syllables[index + 1] !== ' ';\n      var _value = {\n        start: start,\n        end: start + s.length\n      };\n      acc.push(linebreak.box(width, _value, hyphenated));\n      if (syllables[index + 1] && hyphenated) {\n        acc.push(linebreak.penalty(hyphenWidth, hyphenPenalty, 1));\n      }\n    }\n    start += s.length;\n    return acc;\n  }, []);\n  result.push(linebreak.glue(0, null, linebreak.infinity, 0));\n  result.push(linebreak.penalty(0, -linebreak.infinity, 1));\n  return result;\n};\nvar getStyles = function getStyles(attributedString) {\n  var _attributedString$run, _attributedString$run2;\n  return ((_attributedString$run = attributedString.runs) === null || _attributedString$run === void 0 ? void 0 : (_attributedString$run2 = _attributedString$run[0]) === null || _attributedString$run2 === void 0 ? void 0 : _attributedString$run2.attributes) || {};\n};\n\n/**\n * Performs Knuth & Plass line breaking algorithm\n * Fallbacks to best fit algorithm if latter not successful\n *\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @param {Object} attributed string\n * @return {Array} attributed strings\n */\nvar linebreaker = function linebreaker(options) {\n  return function (attributedString, availableWidths) {\n    var tolerance = options.tolerance || 4;\n    var style = getStyles(attributedString);\n    var nodes = getNodes(attributedString, style, options);\n    var breaks = linebreak(nodes, availableWidths, {\n      tolerance: tolerance\n    });\n\n    // Try again with a higher tolerance if the line breaking failed.\n    while (breaks.length === 0 && tolerance < TOLERANCE_LIMIT) {\n      tolerance += TOLERANCE_STEPS;\n      breaks = linebreak(nodes, availableWidths, {\n        tolerance: tolerance\n      });\n    }\n    if (breaks.length === 0 || breaks.length === 1 && breaks[0].position === 0) {\n      breaks = applyBestFit(nodes, availableWidths);\n    }\n    return breakLines(attributedString, nodes, breaks.slice(1));\n  };\n};\nvar WHITESPACE_PRIORITY = 1;\nvar LETTER_PRIORITY = 2;\nvar EXPAND_WHITESPACE_FACTOR = {\n  before: 0.5,\n  after: 0.5,\n  priority: WHITESPACE_PRIORITY,\n  unconstrained: false\n};\nvar EXPAND_CHAR_FACTOR = {\n  before: 0.14453125,\n  // 37/256\n  after: 0.14453125,\n  priority: LETTER_PRIORITY,\n  unconstrained: false\n};\nvar SHRINK_WHITESPACE_FACTOR = {\n  before: -0.04296875,\n  // -11/256\n  after: -0.04296875,\n  priority: WHITESPACE_PRIORITY,\n  unconstrained: false\n};\nvar SHRINK_CHAR_FACTOR = {\n  before: -0.04296875,\n  after: -0.04296875,\n  priority: LETTER_PRIORITY,\n  unconstrained: false\n};\nvar getCharFactor = function getCharFactor(direction, options) {\n  var expandCharFactor = options.expandCharFactor || {};\n  var shrinkCharFactor = options.shrinkCharFactor || {};\n  return direction === 'GROW' ? Object.assign({}, EXPAND_CHAR_FACTOR, expandCharFactor) : Object.assign({}, SHRINK_CHAR_FACTOR, shrinkCharFactor);\n};\nvar getWhitespaceFactor = function getWhitespaceFactor(direction, options) {\n  var expandWhitespaceFactor = options.expandWhitespaceFactor || {};\n  var shrinkWhitespaceFactor = options.shrinkWhitespaceFactor || {};\n  return direction === 'GROW' ? Object.assign({}, EXPAND_WHITESPACE_FACTOR, expandWhitespaceFactor) : Object.assign({}, SHRINK_WHITESPACE_FACTOR, shrinkWhitespaceFactor);\n};\nvar factor = function factor(direction, options) {\n  return function (glyphs) {\n    var charFactor = getCharFactor(direction, options);\n    var whitespaceFactor = getWhitespaceFactor(direction, options);\n    var factors = [];\n    for (var index = 0; index < glyphs.length; index += 1) {\n      var f = void 0;\n      var glyph = glyphs[index];\n      if (isWhiteSpace(glyph)) {\n        f = Object.assign({}, whitespaceFactor);\n        if (index === glyphs.length - 1) {\n          f.before = 0;\n          if (index > 0) {\n            factors[index - 1].after = 0;\n          }\n        }\n      } else if (glyph.isMark && index > 0) {\n        f = Object.assign({}, factors[index - 1]);\n        f.before = 0;\n        factors[index - 1].after = 0;\n      } else {\n        f = Object.assign({}, charFactor);\n      }\n      factors.push(f);\n    }\n    return factors;\n  };\n};\nvar getFactors = function getFactors(gap, line, options) {\n  var direction = gap > 0 ? 'GROW' : 'SHRINK';\n  var getFactor = factor(direction, options);\n  var factors = line.runs.reduce(function (acc, run) {\n    return acc.concat(getFactor(run.glyphs));\n  }, []);\n  factors[0].before = 0;\n  factors[factors.length - 1].after = 0;\n  return factors;\n};\n\n/* eslint-disable no-multi-assign */\nvar KASHIDA_PRIORITY = 0;\nvar NULL_PRIORITY = 3;\nvar getDistances = function getDistances(gap, factors) {\n  var total = 0;\n  var priorities = [];\n  var unconstrained = [];\n  for (var _priority = KASHIDA_PRIORITY; _priority <= NULL_PRIORITY; _priority += 1) {\n    priorities[_priority] = unconstrained[_priority] = 0;\n  }\n\n  // sum the factors at each priority\n  for (var j = 0; j < factors.length; j += 1) {\n    var f = factors[j];\n    var sum = f.before + f.after;\n    total += sum;\n    priorities[f.priority] += sum;\n    if (f.unconstrained) {\n      unconstrained[f.priority] += sum;\n    }\n  }\n\n  // choose the priorities that need to be applied\n  var highestPriority = -1;\n  var highestPrioritySum = 0;\n  var remainingGap = gap;\n  var priority;\n  for (priority = KASHIDA_PRIORITY; priority <= NULL_PRIORITY; priority += 1) {\n    var prioritySum = priorities[priority];\n    if (prioritySum !== 0) {\n      if (highestPriority === -1) {\n        highestPriority = priority;\n        highestPrioritySum = prioritySum;\n      }\n\n      // if this priority covers the remaining gap, we're done\n      if (Math.abs(remainingGap) <= Math.abs(prioritySum)) {\n        priorities[priority] = remainingGap / prioritySum;\n        unconstrained[priority] = 0;\n        remainingGap = 0;\n        break;\n      }\n\n      // mark that we need to use 100% of the adjustment from\n      // this priority, and subtract the space that it consumes\n      priorities[priority] = 1;\n      remainingGap -= prioritySum;\n\n      // if this priority has unconstrained glyphs, let them consume the remaining space\n      if (unconstrained[priority] !== 0) {\n        unconstrained[priority] = remainingGap / unconstrained[priority];\n        remainingGap = 0;\n        break;\n      }\n    }\n  }\n\n  // zero out remaining priorities (if any)\n  for (var p = priority + 1; p <= NULL_PRIORITY; p += 1) {\n    priorities[p] = 0;\n    unconstrained[p] = 0;\n  }\n\n  // if there is still space left over, assign it to the highest priority that we saw.\n  // this violates their factors, but it only happens in extreme cases\n  if (remainingGap > 0 && highestPriority > -1) {\n    priorities[highestPriority] = (highestPrioritySum + (gap - total)) / highestPrioritySum;\n  }\n\n  // create and return an array of distances to add to each glyph's advance\n  var distances = [];\n  for (var index = 0; index < factors.length; index += 1) {\n    // the distance to add to this glyph is the sum of the space to add\n    // after this glyph, and the space to add before the next glyph\n    var _f = factors[index];\n    var next = factors[index + 1];\n    var dist = _f.after * priorities[_f.priority];\n    if (next) {\n      dist += next.before * priorities[next.priority];\n    }\n\n    // if this glyph is unconstrained, add the unconstrained distance as well\n    if (_f.unconstrained) {\n      dist += _f.after * unconstrained[_f.priority];\n      if (next) {\n        dist += next.before * unconstrained[next.priority];\n      }\n    }\n    distances.push(dist);\n  }\n  return distances;\n};\n\n/**\n * Adjust run positions by given distances\n *\n * @param {Array} distances\n * @param {Object} line\n * @returns {Object} line\n */\nvar justifyLine = function justifyLine(distances, line) {\n  var index = 0;\n  for (var _iterator = _createForOfIteratorHelperLoose(line.runs), _step; !(_step = _iterator()).done;) {\n    var run = _step.value;\n    for (var _iterator2 = _createForOfIteratorHelperLoose(run.positions), _step2; !(_step2 = _iterator2()).done;) {\n      var position = _step2.value;\n      position.xAdvance += distances[index++];\n    }\n  }\n  return line;\n};\n\n/**\n * A JustificationEngine is used by a Typesetter to perform line fragment\n * justification. This implementation is based on a description of Apple's\n * justification algorithm from a PDF in the Apple Font Tools package.\n *\n * //TODO: Make it immutable\n *\n * @param {Object} layout options\n * @param {Object} line\n * @returns {Object} line\n */\nvar justification = function justification(options) {\n  return function (line) {\n    var gap = line.box.width - advanceWidth(line);\n    if (gap === 0) return; // Exact fit\n\n    var factors = getFactors(gap, line, options);\n    var distances = getDistances(gap, factors);\n    return justifyLine(distances, line);\n  };\n};\n\n/**\n * Returns attributed string ascent\n *\n * @param {Object} attributed string\n * @return {number} ascent\n */\nvar ascent = function ascent(attributeString) {\n  var reducer = function reducer(acc, run) {\n    return Math.max(acc, ascent$1(run));\n  };\n  return attributeString.runs.reduce(reducer, 0);\n};\n\n/* eslint-disable no-param-reassign */\n\n// The base font size used for calculating underline thickness.\nvar BASE_FONT_SIZE = 12;\n\n/**\n * A TextDecorationEngine is used by a Typesetter to generate\n * DecorationLines for a line fragment, including underlines\n * and strikes.\n */\nvar textDecoration = function textDecoration() {\n  return function (lineFragment) {\n    var x = lineFragment.overflowLeft || 0;\n    var overflowRight = lineFragment.overflowRight || 0;\n    var maxX = advanceWidth(lineFragment) - overflowRight;\n    lineFragment.decorationLines = [];\n    for (var i = 0; i < lineFragment.runs.length; i += 1) {\n      var run = lineFragment.runs[i];\n      var width = Math.min(maxX - x, advanceWidth$1(run));\n      var thickness = Math.max(0.5, Math.floor(run.attributes.fontSize / BASE_FONT_SIZE));\n      if (run.attributes.underline) {\n        var rect = {\n          x: x,\n          y: ascent(lineFragment) + thickness * 2,\n          width: width,\n          height: thickness\n        };\n        var line = {\n          rect: rect,\n          opacity: run.attributes.opacity,\n          color: run.attributes.underlineColor || 'black',\n          style: run.attributes.underlineStyle || 'solid'\n        };\n        lineFragment.decorationLines.push(line);\n      }\n      if (run.attributes.strike) {\n        var y = ascent(lineFragment) - ascent$1(run) / 3;\n        var _rect = {\n          x: x,\n          y: y,\n          width: width,\n          height: thickness\n        };\n        var _line = {\n          rect: _rect,\n          opacity: run.attributes.opacity,\n          color: run.attributes.strikeColor || 'black',\n          style: run.attributes.strikeStyle || 'solid'\n        };\n        lineFragment.decorationLines.push(_line);\n      }\n      x += width;\n    }\n    return lineFragment;\n  };\n};\nvar ignoredScripts = ['Common', 'Inherited', 'Unknown'];\n\n/**\n * Resolves unicode script in runs, grouping equal runs together\n *\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} attributed string\n */\nvar scriptItemizer = function scriptItemizer() {\n  return function (attributedString) {\n    var string = attributedString.string;\n    var lastScript = 'Unknown';\n    var lastIndex = 0;\n    var index = 0;\n    var res = [];\n    if (!string) return empty();\n    for (var i = 0; i < string.length; i += 1) {\n      var char = string[i];\n      var codePoint = char.codePointAt();\n      var script = unicode.getScript(codePoint);\n      if (script !== lastScript && !ignoredScripts.includes(script)) {\n        if (lastScript !== 'Unknown') {\n          res.push({\n            start: lastIndex,\n            end: index,\n            attributes: {\n              script: lastScript\n            }\n          });\n        }\n        lastIndex = index;\n        lastScript = script;\n      }\n      index += char.length;\n    }\n    if (lastIndex < string.length) {\n      res.push({\n        start: lastIndex,\n        end: string.length,\n        attributes: {\n          script: lastScript\n        }\n      });\n    }\n    return {\n      string: string,\n      runs: res\n    };\n  };\n};\nvar SOFT_HYPHEN = \"\\xAD\";\nvar hyphenator = hyphen(pattern);\nvar splitHyphen = function splitHyphen(word) {\n  return word.split(SOFT_HYPHEN);\n};\nvar cache = {};\nvar getParts = function getParts(word) {\n  var base = word.includes(SOFT_HYPHEN) ? word : hyphenator(word);\n  return splitHyphen(base);\n};\nvar wordHyphenation = function wordHyphenation() {\n  return function (word) {\n    var cacheKey = \"_\" + word;\n    if (isNil(word)) return [];\n    if (cache[cacheKey]) return cache[cacheKey];\n    cache[cacheKey] = getParts(word);\n    return cache[cacheKey];\n  };\n};\nvar getFontSize = function getFontSize(value) {\n  return value.attributes.fontSize || 12;\n};\n\n/**\n * Resolve font runs in an AttributedString, grouping equal\n * runs and performing font substitution where necessary.\n *\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} attributed string\n */\nvar fontSubstitution = function fontSubstitution() {\n  return function (attributedString) {\n    var string = attributedString.string,\n      runs = attributedString.runs;\n    var lastFont = null;\n    var lastIndex = 0;\n    var index = 0;\n    var res = [];\n    if (!string) return empty();\n    for (var _iterator = _createForOfIteratorHelperLoose(runs), _step; !(_step = _iterator()).done;) {\n      var run = _step.value;\n      var _fontSize = getFontSize(run);\n      var defaultFont = run.attributes.font;\n      if (string.length === 0) {\n        res.push({\n          start: 0,\n          end: 0,\n          attributes: {\n            font: defaultFont\n          }\n        });\n        break;\n      }\n      for (var _iterator2 = _createForOfIteratorHelperLoose(string.slice(run.start, run.end)), _step2; !(_step2 = _iterator2()).done;) {\n        var char = _step2.value;\n        var font = defaultFont;\n        if (font !== lastFont) {\n          if (lastFont) {\n            res.push({\n              start: lastIndex,\n              end: index,\n              attributes: {\n                font: lastFont,\n                scale: lastFont ? _fontSize / lastFont.unitsPerEm : 0\n              }\n            });\n          }\n          lastFont = font;\n          lastIndex = index;\n        }\n        index += char.length;\n      }\n    }\n    if (lastIndex < string.length) {\n      var fontSize = getFontSize(last(runs));\n      res.push({\n        start: lastIndex,\n        end: string.length,\n        attributes: {\n          font: lastFont,\n          scale: lastFont ? fontSize / lastFont.unitsPerEm : 0\n        }\n      });\n    }\n    return {\n      string: string,\n      runs: res\n    };\n  };\n};\nexport { layoutEngine as default, fontSubstitution, justification, linebreaker, scriptItemizer, textDecoration, wordHyphenation };","map":null,"metadata":{},"sourceType":"module"}