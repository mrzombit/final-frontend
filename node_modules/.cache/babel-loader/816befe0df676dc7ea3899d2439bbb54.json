{"ast":null,"code":"import NodeType from './nodes/type';\nfunction isTag(node) {\n  return node && node.nodeType === NodeType.ELEMENT_NODE;\n}\nfunction getAttributeValue(elem, name) {\n  return isTag(elem) ? elem.getAttribute(name) : undefined;\n}\nfunction getName(elem) {\n  return (elem && elem.rawTagName || '').toLowerCase();\n}\nfunction getChildren(node) {\n  return node && node.childNodes;\n}\nfunction getParent(node) {\n  return node ? node.parentNode : null;\n}\nfunction getText(node) {\n  return node.text;\n}\nfunction removeSubsets(nodes) {\n  var idx = nodes.length;\n  var node;\n  var ancestor;\n  var replace;\n  // Check if each node (or one of its ancestors) is already contained in the\n  // array.\n  while (--idx > -1) {\n    node = ancestor = nodes[idx];\n    // Temporarily remove the node under consideration\n    nodes[idx] = null;\n    replace = true;\n    while (ancestor) {\n      if (nodes.indexOf(ancestor) > -1) {\n        replace = false;\n        nodes.splice(idx, 1);\n        break;\n      }\n      ancestor = getParent(ancestor);\n    }\n    // If the node has been found to be unique, re-insert it.\n    if (replace) {\n      nodes[idx] = node;\n    }\n  }\n  return nodes;\n}\nfunction existsOne(test, elems) {\n  return elems.some(function (elem) {\n    return isTag(elem) ? test(elem) || existsOne(test, getChildren(elem)) : false;\n  });\n}\nfunction getSiblings(node) {\n  var parent = getParent(node);\n  return parent && getChildren(parent);\n}\nfunction hasAttrib(elem, name) {\n  return getAttributeValue(elem, name) !== undefined;\n}\nfunction findOne(test, elems) {\n  var elem = null;\n  for (var i = 0, l = elems.length; i < l && !elem; i++) {\n    var el = elems[i];\n    if (test(el)) {\n      elem = el;\n    } else {\n      var childs = getChildren(el);\n      if (childs && childs.length > 0) {\n        elem = findOne(test, childs);\n      }\n    }\n  }\n  return elem;\n}\nfunction findAll(test, nodes) {\n  var result = [];\n  for (var i = 0, j = nodes.length; i < j; i++) {\n    if (!isTag(nodes[i])) continue;\n    if (test(nodes[i])) result.push(nodes[i]);\n    var childs = getChildren(nodes[i]);\n    if (childs) result = result.concat(findAll(test, childs));\n  }\n  return result;\n}\nexport default {\n  isTag: isTag,\n  getAttributeValue: getAttributeValue,\n  getName: getName,\n  getChildren: getChildren,\n  getParent: getParent,\n  getText: getText,\n  removeSubsets: removeSubsets,\n  existsOne: existsOne,\n  getSiblings: getSiblings,\n  hasAttrib: hasAttrib,\n  findOne: findOne,\n  findAll: findAll\n};","map":null,"metadata":{},"sourceType":"module"}