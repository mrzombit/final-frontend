{"ast":null,"code":"var TYPE = require('../../tokenizer').TYPE;\nvar rawMode = require('./Raw').mode;\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\nfunction consumeRaw(startToken) {\n  return this.Raw(startToken, rawMode.leftCurlyBracket, true);\n}\nfunction consumePrelude() {\n  var prelude = this.SelectorList();\n  if (prelude.type !== 'Raw' && this.scanner.eof === false && this.scanner.tokenType !== LEFTCURLYBRACKET) {\n    this.error();\n  }\n  return prelude;\n}\nmodule.exports = {\n  name: 'Rule',\n  structure: {\n    prelude: ['SelectorList', 'Raw'],\n    block: ['Block']\n  },\n  parse: function parse() {\n    var startToken = this.scanner.tokenIndex;\n    var startOffset = this.scanner.tokenStart;\n    var prelude;\n    var block;\n    if (this.parseRulePrelude) {\n      prelude = this.parseWithFallback(consumePrelude, consumeRaw);\n    } else {\n      prelude = consumeRaw.call(this, startToken);\n    }\n    block = this.Block(true);\n    return {\n      type: 'Rule',\n      loc: this.getLocation(startOffset, this.scanner.tokenStart),\n      prelude: prelude,\n      block: block\n    };\n  },\n  generate: function generate(node) {\n    this.node(node.prelude);\n    this.node(node.block);\n  },\n  walkContext: 'rule'\n};","map":null,"metadata":{},"sourceType":"script"}