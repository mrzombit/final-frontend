{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compileGeneralSelector = void 0;\nvar attributes_1 = require(\"./attributes\");\nvar pseudo_selectors_1 = require(\"./pseudo-selectors\");\nvar css_what_1 = require(\"css-what\");\n/*\n * All available rules\n */\nfunction compileGeneralSelector(next, selector, options, context, compileToken) {\n  var adapter = options.adapter,\n    equals = options.equals;\n  switch (selector.type) {\n    case css_what_1.SelectorType.PseudoElement:\n      {\n        throw new Error(\"Pseudo-elements are not supported by css-select\");\n      }\n    case css_what_1.SelectorType.ColumnCombinator:\n      {\n        throw new Error(\"Column combinators are not yet supported by css-select\");\n      }\n    case css_what_1.SelectorType.Attribute:\n      {\n        if (selector.namespace != null) {\n          throw new Error(\"Namespaced attributes are not yet supported by css-select\");\n        }\n        if (!options.xmlMode || options.lowerCaseAttributeNames) {\n          selector.name = selector.name.toLowerCase();\n        }\n        return attributes_1.attributeRules[selector.action](next, selector, options);\n      }\n    case css_what_1.SelectorType.Pseudo:\n      {\n        return (0, pseudo_selectors_1.compilePseudoSelector)(next, selector, options, context, compileToken);\n      }\n    // Tags\n    case css_what_1.SelectorType.Tag:\n      {\n        if (selector.namespace != null) {\n          throw new Error(\"Namespaced tag names are not yet supported by css-select\");\n        }\n        var name_1 = selector.name;\n        if (!options.xmlMode || options.lowerCaseTags) {\n          name_1 = name_1.toLowerCase();\n        }\n        return function tag(elem) {\n          return adapter.getName(elem) === name_1 && next(elem);\n        };\n      }\n    // Traversal\n    case css_what_1.SelectorType.Descendant:\n      {\n        if (options.cacheResults === false || typeof WeakSet === \"undefined\") {\n          return function descendant(elem) {\n            var current = elem;\n            while (current = adapter.getParent(current)) {\n              if (adapter.isTag(current) && next(current)) {\n                return true;\n              }\n            }\n            return false;\n          };\n        }\n        // @ts-expect-error `ElementNode` is not extending object\n        var isFalseCache_1 = new WeakSet();\n        return function cachedDescendant(elem) {\n          var current = elem;\n          while (current = adapter.getParent(current)) {\n            if (!isFalseCache_1.has(current)) {\n              if (adapter.isTag(current) && next(current)) {\n                return true;\n              }\n              isFalseCache_1.add(current);\n            }\n          }\n          return false;\n        };\n      }\n    case \"_flexibleDescendant\":\n      {\n        // Include element itself, only used while querying an array\n        return function flexibleDescendant(elem) {\n          var current = elem;\n          do {\n            if (adapter.isTag(current) && next(current)) return true;\n          } while (current = adapter.getParent(current));\n          return false;\n        };\n      }\n    case css_what_1.SelectorType.Parent:\n      {\n        return function parent(elem) {\n          return adapter.getChildren(elem).some(function (elem) {\n            return adapter.isTag(elem) && next(elem);\n          });\n        };\n      }\n    case css_what_1.SelectorType.Child:\n      {\n        return function child(elem) {\n          var parent = adapter.getParent(elem);\n          return parent != null && adapter.isTag(parent) && next(parent);\n        };\n      }\n    case css_what_1.SelectorType.Sibling:\n      {\n        return function sibling(elem) {\n          var siblings = adapter.getSiblings(elem);\n          for (var i = 0; i < siblings.length; i++) {\n            var currentSibling = siblings[i];\n            if (equals(elem, currentSibling)) break;\n            if (adapter.isTag(currentSibling) && next(currentSibling)) {\n              return true;\n            }\n          }\n          return false;\n        };\n      }\n    case css_what_1.SelectorType.Adjacent:\n      {\n        if (adapter.prevElementSibling) {\n          return function adjacent(elem) {\n            var previous = adapter.prevElementSibling(elem);\n            return previous != null && next(previous);\n          };\n        }\n        return function adjacent(elem) {\n          var siblings = adapter.getSiblings(elem);\n          var lastElement;\n          for (var i = 0; i < siblings.length; i++) {\n            var currentSibling = siblings[i];\n            if (equals(elem, currentSibling)) break;\n            if (adapter.isTag(currentSibling)) {\n              lastElement = currentSibling;\n            }\n          }\n          return !!lastElement && next(lastElement);\n        };\n      }\n    case css_what_1.SelectorType.Universal:\n      {\n        if (selector.namespace != null && selector.namespace !== \"*\") {\n          throw new Error(\"Namespaced universal selectors are not yet supported by css-select\");\n        }\n        return next;\n      }\n  }\n}\nexports.compileGeneralSelector = compileGeneralSelector;","map":null,"metadata":{},"sourceType":"script"}