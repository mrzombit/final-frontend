{"ast":null,"code":"var TYPE = require('../../tokenizer').TYPE;\nvar IDENT = TYPE.Ident;\nvar PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\nvar SOLIDUS = 0x002F; // U+002F SOLIDUS (/)\nvar GREATERTHANSIGN = 0x003E; // U+003E GREATER-THAN SIGN (>)\nvar TILDE = 0x007E; // U+007E TILDE (~)\n\n// + | > | ~ | /deep/\nmodule.exports = {\n  name: 'Combinator',\n  structure: {\n    name: String\n  },\n  parse: function parse() {\n    var start = this.scanner.tokenStart;\n    var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n    switch (code) {\n      case GREATERTHANSIGN:\n      case PLUSSIGN:\n      case TILDE:\n        this.scanner.next();\n        break;\n      case SOLIDUS:\n        this.scanner.next();\n        if (this.scanner.tokenType !== IDENT || this.scanner.lookupValue(0, 'deep') === false) {\n          this.error('Identifier `deep` is expected');\n        }\n        this.scanner.next();\n        if (!this.scanner.isDelim(SOLIDUS)) {\n          this.error('Solidus is expected');\n        }\n        this.scanner.next();\n        break;\n      default:\n        this.error('Combinator is expected');\n    }\n    return {\n      type: 'Combinator',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      name: this.scanner.substrToCursor(start)\n    };\n  },\n  generate: function generate(node) {\n    this.chunk(node.name);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}