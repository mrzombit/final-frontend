{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Module dependencies\n */\nvar ElementType = __importStar(require(\"domelementtype\"));\nvar entities_1 = require(\"entities\");\n/**\n * Mixed-case SVG and MathML tags & attributes\n * recognized by the HTML parser.\n *\n * @see https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign\n */\nvar foreignNames_1 = require(\"./foreignNames\");\nvar unencodedElements = new Set([\"style\", \"script\", \"xmp\", \"iframe\", \"noembed\", \"noframes\", \"plaintext\", \"noscript\"]);\n/**\n * Format attributes\n */\nfunction formatAttributes(attributes, opts) {\n  if (!attributes) return;\n  return Object.keys(attributes).map(function (key) {\n    var _a, _b;\n    var value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : \"\";\n    if (opts.xmlMode === \"foreign\") {\n      /* Fix up mixed-case attribute names */\n      key = (_b = foreignNames_1.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;\n    }\n    if (!opts.emptyAttrs && !opts.xmlMode && value === \"\") {\n      return key;\n    }\n    return key + \"=\\\"\" + (opts.decodeEntities !== false ? entities_1.encodeXML(value) : value.replace(/\"/g, \"&quot;\")) + \"\\\"\";\n  }).join(\" \");\n}\n/**\n * Self-enclosing tags\n */\nvar singleTag = new Set([\"area\", \"base\", \"basefont\", \"br\", \"col\", \"command\", \"embed\", \"frame\", \"hr\", \"img\", \"input\", \"isindex\", \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"]);\n/**\n * Renders a DOM node or an array of DOM nodes to a string.\n *\n * Can be thought of as the equivalent of the `outerHTML` of the passed node(s).\n *\n * @param node Node to be rendered.\n * @param options Changes serialization behavior\n */\nfunction render(node, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var nodes = \"length\" in node ? node : [node];\n  var output = \"\";\n  for (var i = 0; i < nodes.length; i++) {\n    output += renderNode(nodes[i], options);\n  }\n  return output;\n}\nexports.default = render;\nfunction renderNode(node, options) {\n  switch (node.type) {\n    case ElementType.Root:\n      return render(node.children, options);\n    case ElementType.Directive:\n    case ElementType.Doctype:\n      return renderDirective(node);\n    case ElementType.Comment:\n      return renderComment(node);\n    case ElementType.CDATA:\n      return renderCdata(node);\n    case ElementType.Script:\n    case ElementType.Style:\n    case ElementType.Tag:\n      return renderTag(node, options);\n    case ElementType.Text:\n      return renderText(node, options);\n  }\n}\nvar foreignModeIntegrationPoints = new Set([\"mi\", \"mo\", \"mn\", \"ms\", \"mtext\", \"annotation-xml\", \"foreignObject\", \"desc\", \"title\"]);\nvar foreignElements = new Set([\"svg\", \"math\"]);\nfunction renderTag(elem, opts) {\n  var _a;\n  // Handle SVG / MathML in HTML\n  if (opts.xmlMode === \"foreign\") {\n    /* Fix up mixed-case element names */\n    elem.name = (_a = foreignNames_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;\n    /* Exit foreign mode at integration points */\n    if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) {\n      opts = __assign(__assign({}, opts), {\n        xmlMode: false\n      });\n    }\n  }\n  if (!opts.xmlMode && foreignElements.has(elem.name)) {\n    opts = __assign(__assign({}, opts), {\n      xmlMode: \"foreign\"\n    });\n  }\n  var tag = \"<\" + elem.name;\n  var attribs = formatAttributes(elem.attribs, opts);\n  if (attribs) {\n    tag += \" \" + attribs;\n  }\n  if (elem.children.length === 0 && (opts.xmlMode ?\n  // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags\n  opts.selfClosingTags !== false :\n  // User explicitly asked for self-closing tags, even in HTML mode\n  opts.selfClosingTags && singleTag.has(elem.name))) {\n    if (!opts.xmlMode) tag += \" \";\n    tag += \"/>\";\n  } else {\n    tag += \">\";\n    if (elem.children.length > 0) {\n      tag += render(elem.children, opts);\n    }\n    if (opts.xmlMode || !singleTag.has(elem.name)) {\n      tag += \"</\" + elem.name + \">\";\n    }\n  }\n  return tag;\n}\nfunction renderDirective(elem) {\n  return \"<\" + elem.data + \">\";\n}\nfunction renderText(elem, opts) {\n  var data = elem.data || \"\";\n  // If entities weren't decoded, no need to encode them back\n  if (opts.decodeEntities !== false && !(!opts.xmlMode && elem.parent && unencodedElements.has(elem.parent.name))) {\n    data = entities_1.encodeXML(data);\n  }\n  return data;\n}\nfunction renderCdata(elem) {\n  return \"<![CDATA[\" + elem.children[0].data + \"]]>\";\n}\nfunction renderComment(elem) {\n  return \"<!--\" + elem.data + \"-->\";\n}","map":null,"metadata":{},"sourceType":"script"}