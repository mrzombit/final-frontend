{"ast":null,"code":"var adoptBuffer = require('./adopt-buffer');\nvar isBOM = require('../tokenizer').isBOM;\nvar N = 10;\nvar F = 12;\nvar R = 13;\nfunction computeLinesAndColumns(host, source) {\n  var sourceLength = source.length;\n  var lines = adoptBuffer(host.lines, sourceLength); // +1\n  var line = host.startLine;\n  var columns = adoptBuffer(host.columns, sourceLength);\n  var column = host.startColumn;\n  var startOffset = source.length > 0 ? isBOM(source.charCodeAt(0)) : 0;\n  for (var i = startOffset; i < sourceLength; i++) {\n    // -1\n    var code = source.charCodeAt(i);\n    lines[i] = line;\n    columns[i] = column++;\n    if (code === N || code === R || code === F) {\n      if (code === R && i + 1 < sourceLength && source.charCodeAt(i + 1) === N) {\n        i++;\n        lines[i] = line;\n        columns[i] = column;\n      }\n      line++;\n      column = 1;\n    }\n  }\n  lines[i] = line;\n  columns[i] = column;\n  host.lines = lines;\n  host.columns = columns;\n}\nvar OffsetToLocation = function OffsetToLocation() {\n  this.lines = null;\n  this.columns = null;\n  this.linesAndColumnsComputed = false;\n};\nOffsetToLocation.prototype = {\n  setSource: function setSource(source, startOffset, startLine, startColumn) {\n    this.source = source;\n    this.startOffset = typeof startOffset === 'undefined' ? 0 : startOffset;\n    this.startLine = typeof startLine === 'undefined' ? 1 : startLine;\n    this.startColumn = typeof startColumn === 'undefined' ? 1 : startColumn;\n    this.linesAndColumnsComputed = false;\n  },\n  ensureLinesAndColumnsComputed: function ensureLinesAndColumnsComputed() {\n    if (!this.linesAndColumnsComputed) {\n      computeLinesAndColumns(this, this.source);\n      this.linesAndColumnsComputed = true;\n    }\n  },\n  getLocation: function getLocation(offset, filename) {\n    this.ensureLinesAndColumnsComputed();\n    return {\n      source: filename,\n      offset: this.startOffset + offset,\n      line: this.lines[offset],\n      column: this.columns[offset]\n    };\n  },\n  getLocationRange: function getLocationRange(start, end, filename) {\n    this.ensureLinesAndColumnsComputed();\n    return {\n      source: filename,\n      start: {\n        offset: this.startOffset + start,\n        line: this.lines[start],\n        column: this.columns[start]\n      },\n      end: {\n        offset: this.startOffset + end,\n        line: this.lines[end],\n        column: this.columns[end]\n      }\n    };\n  }\n};\nmodule.exports = OffsetToLocation;","map":null,"metadata":{},"sourceType":"script"}