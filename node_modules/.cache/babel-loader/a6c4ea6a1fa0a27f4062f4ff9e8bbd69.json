{"ast":null,"code":"var TYPE = require('../../tokenizer').TYPE;\nvar rawMode = require('./Raw').mode;\nvar ATKEYWORD = TYPE.AtKeyword;\nvar SEMICOLON = TYPE.Semicolon;\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\nvar RIGHTCURLYBRACKET = TYPE.RightCurlyBracket;\nfunction consumeRaw(startToken) {\n  return this.Raw(startToken, rawMode.leftCurlyBracketOrSemicolon, true);\n}\nfunction isDeclarationBlockAtrule() {\n  for (var offset = 1, type; type = this.scanner.lookupType(offset); offset++) {\n    if (type === RIGHTCURLYBRACKET) {\n      return true;\n    }\n    if (type === LEFTCURLYBRACKET || type === ATKEYWORD) {\n      return false;\n    }\n  }\n  return false;\n}\nmodule.exports = {\n  name: 'Atrule',\n  structure: {\n    name: String,\n    prelude: ['AtrulePrelude', 'Raw', null],\n    block: ['Block', null]\n  },\n  parse: function parse() {\n    var start = this.scanner.tokenStart;\n    var name;\n    var nameLowerCase;\n    var prelude = null;\n    var block = null;\n    this.eat(ATKEYWORD);\n    name = this.scanner.substrToCursor(start + 1);\n    nameLowerCase = name.toLowerCase();\n    this.scanner.skipSC();\n\n    // parse prelude\n    if (this.scanner.eof === false && this.scanner.tokenType !== LEFTCURLYBRACKET && this.scanner.tokenType !== SEMICOLON) {\n      if (this.parseAtrulePrelude) {\n        prelude = this.parseWithFallback(this.AtrulePrelude.bind(this, name), consumeRaw);\n\n        // turn empty AtrulePrelude into null\n        if (prelude.type === 'AtrulePrelude' && prelude.children.head === null) {\n          prelude = null;\n        }\n      } else {\n        prelude = consumeRaw.call(this, this.scanner.tokenIndex);\n      }\n      this.scanner.skipSC();\n    }\n    switch (this.scanner.tokenType) {\n      case SEMICOLON:\n        this.scanner.next();\n        break;\n      case LEFTCURLYBRACKET:\n        if (this.atrule.hasOwnProperty(nameLowerCase) && typeof this.atrule[nameLowerCase].block === 'function') {\n          block = this.atrule[nameLowerCase].block.call(this);\n        } else {\n          // TODO: should consume block content as Raw?\n          block = this.Block(isDeclarationBlockAtrule.call(this));\n        }\n        break;\n    }\n    return {\n      type: 'Atrule',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      name: name,\n      prelude: prelude,\n      block: block\n    };\n  },\n  generate: function generate(node) {\n    this.chunk('@');\n    this.chunk(node.name);\n    if (node.prelude !== null) {\n      this.chunk(' ');\n      this.node(node.prelude);\n    }\n    if (node.block) {\n      this.node(node.block);\n    } else {\n      this.chunk(';');\n    }\n  },\n  walkContext: 'atrule'\n};","map":null,"metadata":{},"sourceType":"script"}