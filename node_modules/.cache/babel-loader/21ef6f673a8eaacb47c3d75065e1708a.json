{"ast":null,"code":"import _classCallCheck from \"/Users/koonk/Documents/GitHub/final-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/koonk/Documents/GitHub/final-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/koonk/Documents/GitHub/final-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/koonk/Documents/GitHub/final-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/koonk/Documents/GitHub/final-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ParenthesisNode';\nvar dependencies = ['Node'];\nexport var createParenthesisNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n  var ParenthesisNode = /*#__PURE__*/function (_Node) {\n    _inherits(ParenthesisNode, _Node);\n    /**\n     * @constructor ParenthesisNode\n     * @extends {Node}\n     * A parenthesis node describes manual parenthesis from the user input\n     * @param {Node} content\n     * @extends {Node}\n     */\n    function ParenthesisNode(content) {\n      var _this;\n      _classCallCheck(this, ParenthesisNode);\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(ParenthesisNode).call(this));\n      // validate input\n      if (!isNode(content)) {\n        throw new TypeError('Node expected for parameter \"content\"');\n      }\n      _this.content = content;\n      return _this;\n    }\n    _createClass(ParenthesisNode, [{\n      key: \"_compile\",\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n      value: function _compile(math, argNames) {\n        return this.content._compile(math, argNames);\n      }\n      /**\n       * Get the content of the current Node.\n       * @return {Node} content\n       * @override\n       **/\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this.content.getContent();\n      }\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        callback(this.content, 'content', this);\n      }\n      /**\n       * Create a new ParenthesisNode whose child is the result of calling\n       * the provided callback function on the child of this node.\n       * @param {function(child: Node, path: string, parent: Node) : Node} callback\n       * @returns {ParenthesisNode} Returns a clone of the node\n       */\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var content = callback(this.content, 'content', this);\n        return new ParenthesisNode(content);\n      }\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {ParenthesisNode}\n       */\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new ParenthesisNode(this.content);\n      }\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n          return '(' + this.content.toString(options) + ')';\n        }\n        return this.content.toString(options);\n      }\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          content: this.content\n        };\n      }\n      /**\n       * Instantiate an ParenthesisNode from its JSON representation\n       * @param {Object} json  An object structured like\n       *                       `{\"mathjs\": \"ParenthesisNode\", \"content\": ...}`,\n       *                       where mathjs is optional\n       * @returns {ParenthesisNode}\n       */\n    }, {\n      key: \"toHTML\",\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n      value: function toHTML(options) {\n        if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n          return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n        return this.content.toHTML(options);\n      }\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n          return \"\\\\left(\".concat(this.content.toTex(options), \"\\\\right)\");\n        }\n        return this.content.toTex(options);\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isParenthesisNode\",\n      get: function get() {\n        return true;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new ParenthesisNode(json.content);\n      }\n    }]);\n    return ParenthesisNode;\n  }(Node);\n  _defineProperty(ParenthesisNode, \"name\", name);\n  return ParenthesisNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":null,"metadata":{},"sourceType":"module"}