{"ast":null,"code":"var TYPE = require('../../tokenizer').TYPE;\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar ATKEYWORD = TYPE.AtKeyword;\nvar CDO = TYPE.CDO;\nvar CDC = TYPE.CDC;\nvar EXCLAMATIONMARK = 0x0021; // U+0021 EXCLAMATION MARK (!)\n\nfunction consumeRaw(startToken) {\n  return this.Raw(startToken, null, false);\n}\nmodule.exports = {\n  name: 'StyleSheet',\n  structure: {\n    children: [['Comment', 'CDO', 'CDC', 'Atrule', 'Rule', 'Raw']]\n  },\n  parse: function parse() {\n    var start = this.scanner.tokenStart;\n    var children = this.createList();\n    var child;\n    scan: while (!this.scanner.eof) {\n      switch (this.scanner.tokenType) {\n        case WHITESPACE:\n          this.scanner.next();\n          continue;\n        case COMMENT:\n          // ignore comments except exclamation comments (i.e. /*! .. */) on top level\n          if (this.scanner.source.charCodeAt(this.scanner.tokenStart + 2) !== EXCLAMATIONMARK) {\n            this.scanner.next();\n            continue;\n          }\n          child = this.Comment();\n          break;\n        case CDO:\n          // <!--\n          child = this.CDO();\n          break;\n        case CDC:\n          // -->\n          child = this.CDC();\n          break;\n\n        // CSS Syntax Module Level 3\n        // ยง2.2 Error handling\n        // At the \"top level\" of a stylesheet, an <at-keyword-token> starts an at-rule.\n        case ATKEYWORD:\n          child = this.parseWithFallback(this.Atrule, consumeRaw);\n          break;\n\n        // Anything else starts a qualified rule ...\n        default:\n          child = this.parseWithFallback(this.Rule, consumeRaw);\n      }\n      children.push(child);\n    }\n    return {\n      type: 'StyleSheet',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      children: children\n    };\n  },\n  generate: function generate(node) {\n    this.children(node);\n  },\n  walkContext: 'stylesheet'\n};","map":null,"metadata":{},"sourceType":"script"}