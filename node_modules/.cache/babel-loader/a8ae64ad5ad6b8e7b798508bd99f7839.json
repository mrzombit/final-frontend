{"ast":null,"code":"import _classCallCheck from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isBigNumber, isComplex, isNode, isUnit, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { getPrecedence } from '../operators.js';\nvar name = 'ConditionalNode';\nvar dependencies = ['Node'];\nexport var createConditionalNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n  /**\n   * Test whether a condition is met\n   * @param {*} condition\n   * @returns {boolean} true if condition is true or non-zero, else false\n   */\n  function testCondition(condition) {\n    if (typeof condition === 'number' || typeof condition === 'boolean' || typeof condition === 'string') {\n      return !!condition;\n    }\n    if (condition) {\n      if (isBigNumber(condition)) {\n        return !condition.isZero();\n      }\n      if (isComplex(condition)) {\n        return !!(condition.re || condition.im);\n      }\n      if (isUnit(condition)) {\n        return !!condition.value;\n      }\n    }\n    if (condition === null || condition === undefined) {\n      return false;\n    }\n    throw new TypeError('Unsupported type of condition \"' + typeOf(condition) + '\"');\n  }\n  var ConditionalNode = /*#__PURE__*/function (_Node) {\n    _inherits(ConditionalNode, _Node);\n    /**\n     * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'\n     *\n     * @param {Node} condition   Condition, must result in a boolean\n     * @param {Node} trueExpr    Expression evaluated when condition is true\n     * @param {Node} falseExpr   Expression evaluated when condition is true\n     *\n     * @constructor ConditionalNode\n     * @extends {Node}\n     */\n    function ConditionalNode(condition, trueExpr, falseExpr) {\n      var _this;\n      _classCallCheck(this, ConditionalNode);\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(ConditionalNode).call(this));\n      if (!isNode(condition)) {\n        throw new TypeError('Parameter condition must be a Node');\n      }\n      if (!isNode(trueExpr)) {\n        throw new TypeError('Parameter trueExpr must be a Node');\n      }\n      if (!isNode(falseExpr)) {\n        throw new TypeError('Parameter falseExpr must be a Node');\n      }\n      _this.condition = condition;\n      _this.trueExpr = trueExpr;\n      _this.falseExpr = falseExpr;\n      return _this;\n    }\n    _createClass(ConditionalNode, [{\n      key: \"_compile\",\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n      value: function _compile(math, argNames) {\n        var evalCondition = this.condition._compile(math, argNames);\n        var evalTrueExpr = this.trueExpr._compile(math, argNames);\n        var evalFalseExpr = this.falseExpr._compile(math, argNames);\n        return function evalConditionalNode(scope, args, context) {\n          return testCondition(evalCondition(scope, args, context)) ? evalTrueExpr(scope, args, context) : evalFalseExpr(scope, args, context);\n        };\n      }\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        callback(this.condition, 'condition', this);\n        callback(this.trueExpr, 'trueExpr', this);\n        callback(this.falseExpr, 'falseExpr', this);\n      }\n      /**\n       * Create a new ConditionalNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {ConditionalNode} Returns a transformed copy of the node\n       */\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        return new ConditionalNode(this._ifNode(callback(this.condition, 'condition', this)), this._ifNode(callback(this.trueExpr, 'trueExpr', this)), this._ifNode(callback(this.falseExpr, 'falseExpr', this)));\n      }\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {ConditionalNode}\n       */\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);\n      }\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string} str\n       */\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n        var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n\n        // Enclose Arguments in parentheses if they are an OperatorNode\n        // or have lower or equal precedence\n        // NOTE: enclosing all OperatorNodes in parentheses is a decision\n        // purely based on aesthetics and readability\n        var condition = this.condition.toString(options);\n        var conditionPrecedence = getPrecedence(this.condition, parenthesis, options && options.implicit);\n        if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {\n          condition = '(' + condition + ')';\n        }\n        var trueExpr = this.trueExpr.toString(options);\n        var truePrecedence = getPrecedence(this.trueExpr, parenthesis, options && options.implicit);\n        if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {\n          trueExpr = '(' + trueExpr + ')';\n        }\n        var falseExpr = this.falseExpr.toString(options);\n        var falsePrecedence = getPrecedence(this.falseExpr, parenthesis, options && options.implicit);\n        if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {\n          falseExpr = '(' + falseExpr + ')';\n        }\n        return condition + ' ? ' + trueExpr + ' : ' + falseExpr;\n      }\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          condition: this.condition,\n          trueExpr: this.trueExpr,\n          falseExpr: this.falseExpr\n        };\n      }\n      /**\n       * Instantiate an ConditionalNode from its JSON representation\n       * @param {Object} json\n       *     An object structured like\n       *     ```\n       *     {\"mathjs\": \"ConditionalNode\",\n       *      \"condition\": ...,\n       *      \"trueExpr\": ...,\n       *      \"falseExpr\": ...}\n       *     ```\n       *     where mathjs is optional\n       * @returns {ConditionalNode}\n       */\n    }, {\n      key: \"toHTML\",\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string} str\n       */\n      value: function toHTML(options) {\n        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n        var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n\n        // Enclose Arguments in parentheses if they are an OperatorNode\n        // or have lower or equal precedence\n        // NOTE: enclosing all OperatorNodes in parentheses is a decision\n        // purely based on aesthetics and readability\n        var condition = this.condition.toHTML(options);\n        var conditionPrecedence = getPrecedence(this.condition, parenthesis, options && options.implicit);\n        if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {\n          condition = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + condition + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n        var trueExpr = this.trueExpr.toHTML(options);\n        var truePrecedence = getPrecedence(this.trueExpr, parenthesis, options && options.implicit);\n        if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {\n          trueExpr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + trueExpr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n        var falseExpr = this.falseExpr.toHTML(options);\n        var falsePrecedence = getPrecedence(this.falseExpr, parenthesis, options && options.implicit);\n        if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {\n          falseExpr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + falseExpr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n        return condition + '<span class=\"math-operator math-conditional-operator\">?</span>' + trueExpr + '<span class=\"math-operator math-conditional-operator\">:</span>' + falseExpr;\n      }\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string} str\n       */\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        return '\\\\begin{cases} {' + this.trueExpr.toTex(options) + '}, &\\\\quad{\\\\text{if }\\\\;' + this.condition.toTex(options) + '}\\\\\\\\{' + this.falseExpr.toTex(options) + '}, &\\\\quad{\\\\text{otherwise}}\\\\end{cases}';\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isConditionalNode\",\n      get: function get() {\n        return true;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new ConditionalNode(json.condition, json.trueExpr, json.falseExpr);\n      }\n    }]);\n    return ConditionalNode;\n  }(Node);\n  _defineProperty(ConditionalNode, \"name\", name);\n  return ConditionalNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":null,"metadata":{},"sourceType":"module"}