{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path='../calendar/calendar-model.d.ts'/>\nimport { EventHandler, Property, Internationalization, NotifyPropertyChanges } from '@syncfusion/ej2-base';\nimport { KeyboardEvents, Animation, Event, extend, L10n, Browser, formatUnit } from '@syncfusion/ej2-base';\nimport { detach, addClass, removeClass, closest, attributes } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, setValue, getUniqueID } from '@syncfusion/ej2-base';\nimport { Popup } from '@syncfusion/ej2-popups';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { Calendar } from '../calendar/calendar';\n//class constant defination\nvar DATEWRAPPER = 'e-date-wrapper';\nvar ROOT = 'e-datepicker';\nvar LIBRARY = 'e-lib';\nvar CONTROL = 'e-control';\nvar POPUPWRAPPER = 'e-popup-wrapper';\nvar INPUTWRAPPER = 'e-input-group-icon';\nvar POPUP = 'e-popup';\nvar INPUTCONTAINER = 'e-input-group';\nvar INPUTFOCUS = 'e-input-focus';\nvar INPUTROOT = 'e-input';\nvar ERROR = 'e-error';\nvar ACTIVE = 'e-active';\nvar OVERFLOW = 'e-date-overflow';\nvar DATEICON = 'e-date-icon';\nvar CLEARICON = 'e-clear-icon';\nvar ICONS = 'e-icons';\nvar OPENDURATION = 300;\nvar OFFSETVALUE = 4;\nvar SELECTED = 'e-selected';\nvar FOCUSEDDATE = 'e-focused-date';\nvar NONEDIT = 'e-non-edit';\nvar containerAttr = ['title', 'class', 'style'];\n/**\n * Represents the DatePicker component that allows user to select\n * or enter a date value.\n * ```html\n * <input id='datepicker'/>\n * ```\n * ```typescript\n * <script>\n *   let datePickerObject:DatePicker = new DatePicker({ value: new Date() });\n *   datePickerObject.appendTo('#datepicker');\n * </script>\n * ```\n */\nvar DatePicker = /** @class */function (_super) {\n  __extends(DatePicker, _super);\n  /**\n   * Constructor for creating the widget.\n   *\n   * @param {DatePickerModel} options - Specifies the DatePicker model.\n   * @param {string | HTMLInputElement} element - Specifies the element to render as component.\n   * @private\n   */\n  function DatePicker(options, element) {\n    var _this = _super.call(this, options, element) || this;\n    _this.previousElementValue = '';\n    _this.isDateIconClicked = false;\n    _this.isAltKeyPressed = false;\n    _this.isInteracted = true;\n    _this.invalidValueString = null;\n    _this.checkPreviousValue = null;\n    _this.maskedDateValue = '';\n    _this.isAngular = false;\n    _this.preventChange = false;\n    _this.isIconClicked = false;\n    _this.isDynamicValueChanged = false;\n    _this.moduleName = _this.getModuleName();\n    _this.isFocused = false;\n    _this.datepickerOptions = options;\n    return _this;\n  }\n  /**\n   * To Initialize the control rendering.\n   *\n   * @returns {void}\n   * @private\n   */\n  DatePicker.prototype.render = function () {\n    this.initialize();\n    this.bindEvents();\n    Input.calculateWidth(this.inputElement, this.inputWrapper.container);\n    if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName('e-float-text-overflow')[0]) && this.floatLabelType !== 'Never') {\n      this.inputWrapper.container.getElementsByClassName('e-float-text-overflow')[0].classList.add('e-icon');\n    }\n    if (!isNullOrUndefined(closest(this.element, \"fieldset\")) && closest(this.element, \"fieldset\").disabled) {\n      this.enabled = false;\n    }\n    this.renderComplete();\n    this.setTimeZone(this.serverTimezoneOffset);\n  };\n  DatePicker.prototype.setTimeZone = function (offsetValue) {\n    if (!isNullOrUndefined(this.serverTimezoneOffset) && this.value) {\n      var clientTimeZoneDiff = new Date().getTimezoneOffset() / 60;\n      var serverTimezoneDiff = offsetValue;\n      var timeZoneDiff = serverTimezoneDiff + clientTimeZoneDiff;\n      timeZoneDiff = this.isDayLightSaving() ? timeZoneDiff-- : timeZoneDiff;\n      this.value = new Date(this.value.getTime() + timeZoneDiff * 60 * 60 * 1000);\n      this.updateInput();\n    }\n  };\n  DatePicker.prototype.isDayLightSaving = function () {\n    var firstOffset = new Date(this.value.getFullYear(), 0, 1).getTimezoneOffset();\n    var secondOffset = new Date(this.value.getFullYear(), 6, 1).getTimezoneOffset();\n    return this.value.getTimezoneOffset() < Math.max(firstOffset, secondOffset);\n  };\n  DatePicker.prototype.setAllowEdit = function () {\n    if (this.allowEdit) {\n      if (!this.readonly) {\n        this.inputElement.removeAttribute('readonly');\n      }\n    } else {\n      attributes(this.inputElement, {\n        'readonly': ''\n      });\n    }\n    this.updateIconState();\n  };\n  DatePicker.prototype.updateIconState = function () {\n    if (!this.allowEdit && this.inputWrapper && !this.readonly) {\n      if (this.inputElement.value === '') {\n        removeClass([this.inputWrapper.container], [NONEDIT]);\n      } else {\n        addClass([this.inputWrapper.container], [NONEDIT]);\n      }\n    } else if (this.inputWrapper) {\n      removeClass([this.inputWrapper.container], [NONEDIT]);\n    }\n  };\n  DatePicker.prototype.initialize = function () {\n    this.checkInvalidValue(this.value);\n    if (this.enableMask) {\n      this.notify(\"createMask\", {\n        module: \"MaskedDateTime\"\n      });\n    }\n    this.createInput();\n    this.updateHtmlAttributeToWrapper();\n    this.setAllowEdit();\n    this.updateInput(true);\n    if (this.enableMask && !this.value && this.maskedDateValue && (this.floatLabelType == 'Always' || !this.floatLabelType || !this.placeholder)) {\n      this.updateInputValue(this.maskedDateValue);\n    }\n    this.previousElementValue = this.inputElement.value;\n    this.previousDate = !isNullOrUndefined(this.value) ? new Date(+this.value) : null;\n    this.inputElement.setAttribute('value', this.inputElement.value);\n    this.inputValueCopy = this.value;\n  };\n  DatePicker.prototype.createInput = function () {\n    var ariaAttrs = {\n      'aria-atomic': 'true',\n      'aria-expanded': 'false',\n      'role': 'combobox',\n      'autocomplete': 'off',\n      'autocorrect': 'off',\n      'autocapitalize': 'off',\n      'spellcheck': 'false',\n      'aria-invalid': 'false'\n    };\n    if (this.getModuleName() === 'datepicker') {\n      var l10nLocale = {\n        placeholder: this.placeholder\n      };\n      this.globalize = new Internationalization(this.locale);\n      this.l10n = new L10n('datepicker', l10nLocale, this.locale);\n      this.setProperties({\n        placeholder: this.placeholder || this.l10n.getConstant('placeholder')\n      }, true);\n    }\n    var updatedCssClassValues = this.cssClass;\n    if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n      updatedCssClassValues = this.cssClass.replace(/\\s+/g, ' ').trim();\n    }\n    var isBindClearAction = this.enableMask ? false : true;\n    this.inputWrapper = Input.createInput({\n      element: this.inputElement,\n      floatLabelType: this.floatLabelType,\n      bindClearAction: isBindClearAction,\n      properties: {\n        readonly: this.readonly,\n        placeholder: this.placeholder,\n        cssClass: updatedCssClassValues,\n        enabled: this.enabled,\n        enableRtl: this.enableRtl,\n        showClearButton: this.showClearButton\n      },\n      buttons: [INPUTWRAPPER + ' ' + DATEICON + ' ' + ICONS]\n    }, this.createElement);\n    this.setWidth(this.width);\n    if (this.inputElement.name !== '') {\n      this.inputElement.setAttribute('name', '' + this.inputElement.getAttribute('name'));\n    } else {\n      this.inputElement.setAttribute('name', '' + this.element.id);\n    }\n    attributes(this.inputElement, ariaAttrs);\n    if (!this.enabled) {\n      this.inputElement.setAttribute('aria-disabled', 'true');\n      this.inputElement.tabIndex = -1;\n    } else {\n      this.inputElement.setAttribute('aria-disabled', 'false');\n      this.inputElement.setAttribute('tabindex', this.tabIndex);\n    }\n    Input.addAttributes({\n      'aria-label': 'select'\n    }, this.inputWrapper.buttons[0]);\n    addClass([this.inputWrapper.container], DATEWRAPPER);\n  };\n  DatePicker.prototype.updateInput = function (isDynamic) {\n    if (isDynamic === void 0) {\n      isDynamic = false;\n    }\n    var formatOptions;\n    if (this.value && !this.isCalendar()) {\n      this.disabledDates(isDynamic);\n    }\n    if (isNaN(+new Date(this.checkValue(this.value)))) {\n      this.setProperties({\n        value: null\n      }, true);\n    }\n    if (this.strictMode) {\n      //calls the Calendar processDate protected method to update the date value according to the strictMode true behaviour.\n      _super.prototype.validateDate.call(this);\n      this.minMaxUpdates();\n      _super.prototype.minMaxUpdate.call(this);\n    }\n    if (!isNullOrUndefined(this.value)) {\n      var dateValue = this.value;\n      var dateString = void 0;\n      var tempFormat = !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat;\n      if (this.getModuleName() === 'datetimepicker') {\n        if (this.calendarMode === 'Gregorian') {\n          dateString = this.globalize.formatDate(this.value, {\n            format: tempFormat,\n            type: 'dateTime',\n            skeleton: 'yMd'\n          });\n        } else {\n          dateString = this.globalize.formatDate(this.value, {\n            format: tempFormat,\n            type: 'dateTime',\n            skeleton: 'yMd',\n            calendar: 'islamic'\n          });\n        }\n      } else {\n        if (this.calendarMode === 'Gregorian') {\n          formatOptions = {\n            format: this.formatString,\n            type: 'dateTime',\n            skeleton: 'yMd'\n          };\n        } else {\n          formatOptions = {\n            format: this.formatString,\n            type: 'dateTime',\n            skeleton: 'yMd',\n            calendar: 'islamic'\n          };\n        }\n        dateString = this.globalize.formatDate(this.value, formatOptions);\n      }\n      if (+dateValue <= +this.max && +dateValue >= +this.min) {\n        this.updateInputValue(dateString);\n      } else {\n        var value = +dateValue >= +this.max || !+this.value || !+this.value || +dateValue <= +this.min;\n        if (!this.strictMode && value) {\n          this.updateInputValue(dateString);\n        }\n      }\n    }\n    if (isNullOrUndefined(this.value) && this.strictMode) {\n      if (!this.enableMask) {\n        this.updateInputValue('');\n      } else {\n        this.updateInputValue(this.maskedDateValue);\n        this.notify(\"createMask\", {\n          module: \"MaskedDateTime\"\n        });\n      }\n    }\n    if (!this.strictMode && isNullOrUndefined(this.value) && this.invalidValueString) {\n      this.updateInputValue(this.invalidValueString);\n    }\n    this.changedArgs = {\n      value: this.value\n    };\n    this.errorClass();\n    this.updateIconState();\n  };\n  DatePicker.prototype.minMaxUpdates = function () {\n    if (!isNullOrUndefined(this.value) && this.value < this.min && this.min <= this.max && this.strictMode) {\n      this.setProperties({\n        value: this.min\n      }, true);\n      this.changedArgs = {\n        value: this.value\n      };\n    } else {\n      if (!isNullOrUndefined(this.value) && this.value > this.max && this.min <= this.max && this.strictMode) {\n        this.setProperties({\n          value: this.max\n        }, true);\n        this.changedArgs = {\n          value: this.value\n        };\n      }\n    }\n  };\n  DatePicker.prototype.checkStringValue = function (val) {\n    var returnDate = null;\n    var formatOptions = null;\n    var formatDateTime = null;\n    if (this.getModuleName() === 'datetimepicker') {\n      var culture = new Internationalization(this.locale);\n      if (this.calendarMode === 'Gregorian') {\n        formatOptions = {\n          format: this.dateTimeFormat,\n          type: 'dateTime',\n          skeleton: 'yMd'\n        };\n        formatDateTime = {\n          format: culture.getDatePattern({\n            skeleton: 'yMd'\n          }),\n          type: 'dateTime'\n        };\n      } else {\n        formatOptions = {\n          format: this.dateTimeFormat,\n          type: 'dateTime',\n          skeleton: 'yMd',\n          calendar: 'islamic'\n        };\n        formatDateTime = {\n          format: culture.getDatePattern({\n            skeleton: 'yMd'\n          }),\n          type: 'dateTime',\n          calendar: 'islamic'\n        };\n      }\n    } else {\n      if (this.calendarMode === 'Gregorian') {\n        formatOptions = {\n          format: this.formatString,\n          type: 'dateTime',\n          skeleton: 'yMd'\n        };\n      } else {\n        formatOptions = {\n          format: this.formatString,\n          type: 'dateTime',\n          skeleton: 'yMd',\n          calendar: 'islamic'\n        };\n      }\n    }\n    returnDate = this.checkDateValue(this.globalize.parseDate(val, formatOptions));\n    if (isNullOrUndefined(returnDate) && this.getModuleName() === 'datetimepicker') {\n      returnDate = this.checkDateValue(this.globalize.parseDate(val, formatDateTime));\n    }\n    return returnDate;\n  };\n  DatePicker.prototype.checkInvalidValue = function (value) {\n    if (!(value instanceof Date) && !isNullOrUndefined(value)) {\n      var valueDate = null;\n      var valueString = value;\n      if (typeof value === 'number') {\n        valueString = value.toString();\n      }\n      var formatOptions = null;\n      var formatDateTime = null;\n      if (this.getModuleName() === 'datetimepicker') {\n        var culture = new Internationalization(this.locale);\n        if (this.calendarMode === 'Gregorian') {\n          formatOptions = {\n            format: this.dateTimeFormat,\n            type: 'dateTime',\n            skeleton: 'yMd'\n          };\n          formatDateTime = {\n            format: culture.getDatePattern({\n              skeleton: 'yMd'\n            }),\n            type: 'dateTime'\n          };\n        } else {\n          formatOptions = {\n            format: this.dateTimeFormat,\n            type: 'dateTime',\n            skeleton: 'yMd',\n            calendar: 'islamic'\n          };\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          formatDateTime = {\n            format: culture.getDatePattern({\n              skeleton: 'yMd'\n            }),\n            type: 'dateTime',\n            calendar: 'islamic'\n          };\n        }\n      } else {\n        if (this.calendarMode === 'Gregorian') {\n          formatOptions = {\n            format: this.formatString,\n            type: 'dateTime',\n            skeleton: 'yMd'\n          };\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          formatOptions = {\n            format: this.formatString,\n            type: 'dateTime',\n            skeleton: 'yMd',\n            calendar: 'islamic'\n          };\n        }\n      }\n      var invalid = false;\n      if (typeof valueString !== 'string') {\n        valueString = null;\n        invalid = true;\n      } else {\n        if (typeof valueString === 'string') {\n          valueString = valueString.trim();\n        }\n        valueDate = this.checkStringValue(valueString);\n        if (!valueDate) {\n          var extISOString = null;\n          var basicISOString = null;\n          // eslint-disable-next-line\n          extISOString = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/;\n          // eslint-disable-next-line\n          basicISOString = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/;\n          if (!extISOString.test(valueString) && !basicISOString.test(valueString) || /^[a-zA-Z0-9- ]*$/.test(valueString) || isNaN(+new Date(this.checkValue(valueString)))) {\n            invalid = true;\n          } else {\n            valueDate = new Date(valueString);\n          }\n        }\n      }\n      if (invalid) {\n        if (!this.strictMode) {\n          this.invalidValueString = valueString;\n        }\n        this.setProperties({\n          value: null\n        }, true);\n      } else {\n        this.setProperties({\n          value: valueDate\n        }, true);\n      }\n    }\n  };\n  DatePicker.prototype.bindInputEvent = function () {\n    if (!isNullOrUndefined(this.formatString) || this.enableMask) {\n      if (this.enableMask || this.formatString.indexOf('y') === -1) {\n        EventHandler.add(this.inputElement, 'input', this.inputHandler, this);\n      } else {\n        EventHandler.remove(this.inputElement, 'input', this.inputHandler);\n      }\n    }\n  };\n  DatePicker.prototype.bindEvents = function () {\n    EventHandler.add(this.inputWrapper.buttons[0], 'mousedown touchstart', this.dateIconHandler, this);\n    EventHandler.add(this.inputElement, 'mouseup', this.mouseUpHandler, this);\n    EventHandler.add(this.inputElement, 'focus', this.inputFocusHandler, this);\n    EventHandler.add(this.inputElement, 'blur', this.inputBlurHandler, this);\n    if (this.enableMask) {\n      EventHandler.add(this.inputElement, 'keydown', this.keydownHandler, this);\n    }\n    this.bindInputEvent();\n    // To prevent the twice triggering.\n    EventHandler.add(this.inputElement, 'change', this.inputChangeHandler, this);\n    if (this.showClearButton && this.inputWrapper.clearButton) {\n      EventHandler.add(this.inputWrapper.clearButton, 'mousedown touchstart', this.resetHandler, this);\n    }\n    if (this.formElement) {\n      EventHandler.add(this.formElement, 'reset', this.resetFormHandler, this);\n    }\n    this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);\n    this.keyboardModules = new KeyboardEvents(this.inputElement, {\n      eventName: 'keydown',\n      keyAction: this.inputKeyActionHandle.bind(this),\n      keyConfigs: this.defaultKeyConfigs\n    });\n  };\n  DatePicker.prototype.keydownHandler = function (e) {\n    switch (e.code) {\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'Home':\n      case 'End':\n      case 'Delete':\n        if (this.enableMask && !this.popupObj && !this.readonly) {\n          if (e.code !== 'Delete') {\n            e.preventDefault();\n          }\n          this.notify(\"keyDownHandler\", {\n            module: \"MaskedDateTime\",\n            e: e\n          });\n        }\n        break;\n      default:\n        break;\n    }\n  };\n  DatePicker.prototype.unBindEvents = function () {\n    if (!isNullOrUndefined(this.inputWrapper)) {\n      EventHandler.remove(this.inputWrapper.buttons[0], 'mousedown touchstart', this.dateIconHandler);\n    }\n    EventHandler.remove(this.inputElement, 'mouseup', this.mouseUpHandler);\n    EventHandler.remove(this.inputElement, 'focus', this.inputFocusHandler);\n    EventHandler.remove(this.inputElement, 'blur', this.inputBlurHandler);\n    EventHandler.remove(this.inputElement, 'change', this.inputChangeHandler);\n    if (this.enableMask) {\n      EventHandler.remove(this.inputElement, 'keydown', this.keydownHandler);\n    }\n    if (this.showClearButton && this.inputWrapper.clearButton) {\n      EventHandler.remove(this.inputWrapper.clearButton, 'mousedown touchstart', this.resetHandler);\n    }\n    if (this.formElement) {\n      EventHandler.remove(this.formElement, 'reset', this.resetFormHandler);\n    }\n  };\n  DatePicker.prototype.resetFormHandler = function () {\n    if (!this.enabled) {\n      return;\n    }\n    if (!this.inputElement.disabled) {\n      var value = this.inputElement.getAttribute('value');\n      if (this.element.tagName === 'EJS-DATEPICKER' || this.element.tagName === 'EJS-DATETIMEPICKER') {\n        value = '';\n        this.inputValueCopy = null;\n        this.inputElement.setAttribute('value', '');\n      }\n      this.setProperties({\n        value: this.inputValueCopy\n      }, true);\n      this.restoreValue();\n      if (this.inputElement) {\n        this.updateInputValue(value);\n        this.errorClass();\n      }\n    }\n  };\n  DatePicker.prototype.restoreValue = function () {\n    this.currentDate = this.value ? this.value : new Date();\n    this.previousDate = this.value;\n    this.previousElementValue = isNullOrUndefined(this.inputValueCopy) ? '' : this.globalize.formatDate(this.inputValueCopy, {\n      format: this.formatString,\n      type: 'dateTime',\n      skeleton: 'yMd'\n    });\n  };\n  DatePicker.prototype.inputChangeHandler = function (e) {\n    if (!this.enabled) {\n      return;\n    }\n    e.stopPropagation();\n  };\n  DatePicker.prototype.bindClearEvent = function () {\n    if (this.showClearButton && this.inputWrapper.clearButton) {\n      EventHandler.add(this.inputWrapper.clearButton, 'mousedown touchstart', this.resetHandler, this);\n    }\n  };\n  DatePicker.prototype.resetHandler = function (e) {\n    if (!this.enabled) {\n      return;\n    }\n    e.preventDefault();\n    this.clear(e);\n  };\n  DatePicker.prototype.mouseUpHandler = function (e) {\n    if (this.enableMask) {\n      e.preventDefault();\n      this.notify(\"setMaskSelection\", {\n        module: \"MaskedDateTime\"\n      });\n    }\n  };\n  DatePicker.prototype.clear = function (event) {\n    this.setProperties({\n      value: null\n    }, true);\n    if (!this.enableMask) {\n      this.updateInputValue('');\n    }\n    var clearedArgs = {\n      event: event\n    };\n    this.trigger('cleared', clearedArgs);\n    this.invalidValueString = '';\n    this.updateInput();\n    this.popupUpdate();\n    this.changeEvent(event);\n    if (this.enableMask) {\n      this.notify(\"clearHandler\", {\n        module: \"MaskedDateTime\"\n      });\n    }\n    if (closest(this.element, 'form')) {\n      var element = this.element;\n      var keyupEvent = document.createEvent('KeyboardEvent');\n      keyupEvent.initEvent('keyup', false, true);\n      element.dispatchEvent(keyupEvent);\n    }\n  };\n  DatePicker.prototype.preventEventBubbling = function (e) {\n    e.preventDefault();\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.interopAdaptor.invokeMethodAsync('OnDateIconClick');\n  };\n  DatePicker.prototype.updateInputValue = function (value) {\n    Input.setValue(value, this.inputElement, this.floatLabelType, this.showClearButton);\n  };\n  DatePicker.prototype.dateIconHandler = function (e) {\n    if (!this.enabled) {\n      return;\n    }\n    this.isIconClicked = true;\n    if (Browser.isDevice) {\n      this.inputElement.setAttribute('readonly', '');\n      this.inputElement.blur();\n    }\n    e.preventDefault();\n    if (!this.readonly) {\n      if (this.isCalendar()) {\n        this.hide(e);\n      } else {\n        this.isDateIconClicked = true;\n        this.show(null, e);\n        if (this.getModuleName() === 'datetimepicker') {\n          this.inputElement.focus();\n        }\n        this.inputElement.focus();\n        addClass([this.inputWrapper.container], [INPUTFOCUS]);\n        addClass(this.inputWrapper.buttons, ACTIVE);\n      }\n    }\n    this.isIconClicked = false;\n  };\n  DatePicker.prototype.updateHtmlAttributeToWrapper = function () {\n    if (!isNullOrUndefined(this.htmlAttributes)) {\n      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (!isNullOrUndefined(this.htmlAttributes[\"\" + key])) {\n          if (containerAttr.indexOf(key) > -1) {\n            if (key === 'class') {\n              var updatedClassValues = this.htmlAttributes[\"\" + key].replace(/\\s+/g, ' ').trim();\n              if (updatedClassValues !== '') {\n                addClass([this.inputWrapper.container], updatedClassValues.split(' '));\n              }\n            } else if (key === 'style') {\n              var setStyle = this.inputWrapper.container.getAttribute(key);\n              if (!isNullOrUndefined(setStyle)) {\n                if (setStyle.charAt(setStyle.length - 1) === ';') {\n                  setStyle = setStyle + this.htmlAttributes[\"\" + key];\n                } else {\n                  setStyle = setStyle + ';' + this.htmlAttributes[\"\" + key];\n                }\n              } else {\n                setStyle = this.htmlAttributes[\"\" + key];\n              }\n              this.inputWrapper.container.setAttribute(key, setStyle);\n            } else {\n              this.inputWrapper.container.setAttribute(key, this.htmlAttributes[\"\" + key]);\n            }\n          }\n        }\n      }\n    }\n  };\n  DatePicker.prototype.updateHtmlAttributeToElement = function () {\n    if (!isNullOrUndefined(this.htmlAttributes)) {\n      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (containerAttr.indexOf(key) < 0) {\n          this.inputElement.setAttribute(key, this.htmlAttributes[\"\" + key]);\n        }\n      }\n    }\n  };\n  DatePicker.prototype.updateCssClass = function (newCssClass, oldCssClass) {\n    if (!isNullOrUndefined(oldCssClass)) {\n      oldCssClass = oldCssClass.replace(/\\s+/g, ' ').trim();\n    }\n    if (!isNullOrUndefined(newCssClass)) {\n      newCssClass = newCssClass.replace(/\\s+/g, ' ').trim();\n    }\n    Input.setCssClass(newCssClass, [this.inputWrapper.container], oldCssClass);\n    if (this.popupWrapper) {\n      Input.setCssClass(newCssClass, [this.popupWrapper], oldCssClass);\n    }\n  };\n  DatePicker.prototype.calendarKeyActionHandle = function (e) {\n    switch (e.action) {\n      case 'escape':\n        if (this.isCalendar()) {\n          this.hide(e);\n        } else {\n          this.inputWrapper.container.children[this.index].blur();\n        }\n        break;\n      case 'enter':\n        if (!this.isCalendar()) {\n          this.show(null, e);\n        } else {\n          if (+this.value !== +this.currentDate && !this.isCalendar()) {\n            this.inputWrapper.container.children[this.index].focus();\n          }\n        }\n        if (this.getModuleName() === 'datetimepicker') {\n          this.inputElement.focus();\n        }\n        break;\n      case 'tab':\n        this.hide(e);\n    }\n  };\n  DatePicker.prototype.inputFocusHandler = function () {\n    this.isFocused = true;\n    if (!this.enabled) {\n      return;\n    }\n    if (this.enableMask && !this.inputElement.value && this.placeholder) {\n      if (this.maskedDateValue && !this.value && (this.floatLabelType == 'Auto' || this.floatLabelType == 'Never' || this.placeholder)) {\n        this.updateInputValue(this.maskedDateValue);\n        this.inputElement.selectionStart = 0;\n        this.inputElement.selectionEnd = this.inputElement.value.length;\n      }\n    }\n    var focusArguments = {\n      model: this\n    };\n    this.isDateIconClicked = false;\n    this.trigger('focus', focusArguments);\n    this.updateIconState();\n    if (this.openOnFocus && !this.isIconClicked) {\n      this.show();\n    }\n  };\n  DatePicker.prototype.inputHandler = function () {\n    this.isPopupClicked = false;\n    if (this.enableMask) {\n      this.notify(\"inputHandler\", {\n        module: \"MaskedDateTime\"\n      });\n    }\n  };\n  DatePicker.prototype.inputBlurHandler = function (e) {\n    if (!this.enabled) {\n      return;\n    }\n    this.strictModeUpdate();\n    if (this.inputElement.value === '' && isNullOrUndefined(this.value)) {\n      this.invalidValueString = null;\n      this.updateInputValue('');\n    }\n    this.updateInput();\n    this.popupUpdate();\n    this.changeTrigger(e);\n    if (this.enableMask && this.maskedDateValue && this.placeholder && this.floatLabelType !== 'Always') {\n      if (this.inputElement.value == this.maskedDateValue && !this.value && (this.floatLabelType == 'Auto' || this.floatLabelType == 'Never' || this.placeholder)) {\n        this.updateInputValue('');\n      }\n    }\n    this.errorClass();\n    if (this.isCalendar() && document.activeElement === this.inputElement) {\n      this.hide(e);\n    }\n    if (this.getModuleName() === 'datepicker') {\n      var blurArguments = {\n        model: this\n      };\n      this.trigger('blur', blurArguments);\n    }\n    if (this.isCalendar()) {\n      this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);\n      this.calendarKeyboardModules = new KeyboardEvents(this.calendarElement.children[1].firstElementChild, {\n        eventName: 'keydown',\n        keyAction: this.calendarKeyActionHandle.bind(this),\n        keyConfigs: this.defaultKeyConfigs\n      });\n    }\n    this.isPopupClicked = false;\n  };\n  DatePicker.prototype.documentHandler = function (e) {\n    if (!isNullOrUndefined(this.popupObj) && !isNullOrUndefined(this.inputWrapper) && (this.inputWrapper.container.contains(e.target) && e.type !== 'mousedown' || this.popupObj.element && this.popupObj.element.contains(e.target)) && e.type !== 'touchstart') {\n      e.preventDefault();\n    }\n    var target = e.target;\n    if (!closest(target, '.e-datepicker.e-popup-wrapper') && !isNullOrUndefined(this.inputWrapper) && !(closest(target, '.' + INPUTCONTAINER) === this.inputWrapper.container) && !target.classList.contains('e-day')) {\n      this.hide(e);\n      this.focusOut();\n    } else if (closest(target, '.e-datepicker.e-popup-wrapper')) {\n      // Fix for close the popup when select the previously selected value.\n      if (target.classList.contains('e-day') && !isNullOrUndefined(e.target.parentElement) && e.target.parentElement.classList.contains('e-selected') && closest(target, '.e-content') && closest(target, '.e-content').classList.contains('e-' + this.depth.toLowerCase())) {\n        this.hide(e);\n      } else if (closest(target, '.e-footer-container') && target.classList.contains('e-today') && target.classList.contains('e-btn') && +new Date(+this.value) === +_super.prototype.generateTodayVal.call(this, this.value)) {\n        this.hide(e);\n      }\n    }\n  };\n  DatePicker.prototype.inputKeyActionHandle = function (e) {\n    var clickedView = this.currentView();\n    switch (e.action) {\n      case 'altUpArrow':\n        this.isAltKeyPressed = false;\n        this.hide(e);\n        this.inputElement.focus();\n        break;\n      case 'altDownArrow':\n        this.isAltKeyPressed = true;\n        this.strictModeUpdate();\n        this.updateInput();\n        this.changeTrigger(e);\n        if (this.getModuleName() === 'datepicker') {\n          this.show(null, e);\n        }\n        break;\n      case 'escape':\n        this.hide(e);\n        break;\n      case 'enter':\n        this.strictModeUpdate();\n        this.updateInput();\n        this.popupUpdate();\n        this.changeTrigger(e);\n        this.errorClass();\n        if (!this.isCalendar() && document.activeElement === this.inputElement) {\n          this.hide(e);\n        }\n        if (this.isCalendar()) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n        break;\n      case 'tab':\n      case 'shiftTab':\n        var start = this.inputElement.selectionStart;\n        var end = this.inputElement.selectionEnd;\n        if (this.enableMask && !this.popupObj && !this.readonly) {\n          var length_1 = this.inputElement.value.length;\n          if (start == 0 && end == length_1 || end !== length_1 && e.action == 'tab' || start !== 0 && e.action == 'shiftTab') {\n            e.preventDefault();\n          }\n          this.notify(\"keyDownHandler\", {\n            module: \"MaskedDateTime\",\n            e: e\n          });\n          start = this.inputElement.selectionStart;\n          end = this.inputElement.selectionEnd;\n        }\n        this.strictModeUpdate();\n        this.updateInput();\n        this.popupUpdate();\n        this.changeTrigger(e);\n        this.errorClass();\n        if (this.enableMask) {\n          this.inputElement.selectionStart = start;\n          this.inputElement.selectionEnd = end;\n        }\n        this.hide(e);\n        break;\n      default:\n        this.defaultAction(e);\n        // Fix for close the popup when select the previously selected value.\n        if (e.action === 'select' && clickedView === this.depth) {\n          this.hide(e);\n        }\n    }\n  };\n  DatePicker.prototype.defaultAction = function (e) {\n    this.previousDate = !isNullOrUndefined(this.value) && new Date(+this.value) || null;\n    if (this.isCalendar()) {\n      _super.prototype.keyActionHandle.call(this, e);\n      if (this.isCalendar()) {\n        attributes(this.inputElement, {\n          'aria-activedescendant': '' + this.setActiveDescendant()\n        });\n      }\n    }\n  };\n  DatePicker.prototype.popupUpdate = function () {\n    if (isNullOrUndefined(this.value) && !isNullOrUndefined(this.previousDate) || +this.value !== +this.previousDate) {\n      if (this.popupObj) {\n        if (this.popupObj.element.querySelectorAll('.' + SELECTED).length > 0) {\n          removeClass(this.popupObj.element.querySelectorAll('.' + SELECTED), [SELECTED]);\n        }\n      }\n      if (!isNullOrUndefined(this.value)) {\n        if (+this.value >= +this.min && +this.value <= +this.max) {\n          var targetdate = new Date(this.checkValue(this.value));\n          _super.prototype.navigateTo.call(this, 'Month', targetdate);\n        }\n      }\n    }\n  };\n  DatePicker.prototype.strictModeUpdate = function () {\n    var format;\n    var formatOptions;\n    if (this.getModuleName() === 'datetimepicker') {\n      format = !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat;\n    } else {\n      format = isNullOrUndefined(this.formatString) ? this.formatString : this.formatString.replace('dd', 'd');\n    }\n    if (!isNullOrUndefined(format)) {\n      var len = format.split('M').length - 1;\n      if (len < 3) {\n        format = format.replace('MM', 'M');\n      }\n    }\n    var dateOptions;\n    if (this.getModuleName() === 'datetimepicker') {\n      if (this.calendarMode === 'Gregorian') {\n        dateOptions = {\n          format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,\n          type: 'dateTime',\n          skeleton: 'yMd'\n        };\n      } else {\n        dateOptions = {\n          format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,\n          type: 'dateTime',\n          skeleton: 'yMd',\n          calendar: 'islamic'\n        };\n      }\n    } else {\n      if (this.calendarMode === 'Gregorian') {\n        formatOptions = {\n          format: format,\n          type: 'dateTime',\n          skeleton: 'yMd'\n        };\n      } else {\n        formatOptions = {\n          format: format,\n          type: 'dateTime',\n          skeleton: 'yMd',\n          calendar: 'islamic'\n        };\n      }\n      dateOptions = formatOptions;\n    }\n    var date;\n    if (typeof this.inputElement.value === 'string') {\n      this.inputElement.value = this.inputElement.value.trim();\n    }\n    if (this.getModuleName() === 'datetimepicker') {\n      if (this.checkDateValue(this.globalize.parseDate(this.inputElement.value, dateOptions))) {\n        date = this.globalize.parseDate(this.inputElement.value.toLocaleUpperCase(), dateOptions);\n      } else {\n        if (this.calendarMode === 'Gregorian') {\n          formatOptions = {\n            type: 'dateTime',\n            skeleton: 'yMd'\n          };\n        } else {\n          formatOptions = {\n            type: 'dateTime',\n            skeleton: 'yMd',\n            calendar: 'islamic'\n          };\n        }\n        date = this.globalize.parseDate(this.inputElement.value, formatOptions);\n      }\n    } else {\n      date = this.globalize.parseDate(this.inputElement.value, dateOptions);\n      date = !isNullOrUndefined(date) && isNaN(+date) ? null : date;\n      if (!isNullOrUndefined(this.formatString) && this.inputElement.value !== '' && this.strictMode) {\n        if ((this.isPopupClicked || !this.isPopupClicked && this.inputElement.value === this.previousElementValue) && this.formatString.indexOf('y') === -1) {\n          date.setFullYear(this.value.getFullYear());\n        }\n      }\n    }\n    // EJ2-35061 - To prevent change event from triggering twice when using strictmode and format property\n    if (this.getModuleName() === 'datepicker' && this.value && !isNaN(+this.value) && date) {\n      date.setHours(this.value.getHours(), this.value.getMinutes(), this.value.getSeconds(), this.value.getMilliseconds());\n    }\n    if (this.strictMode && date) {\n      this.updateInputValue(this.globalize.formatDate(date, dateOptions));\n      if (this.inputElement.value !== this.previousElementValue) {\n        this.setProperties({\n          value: date\n        }, true);\n      }\n    } else if (!this.strictMode) {\n      if (this.inputElement.value !== this.previousElementValue) {\n        this.setProperties({\n          value: date\n        }, true);\n      }\n    }\n    if (this.strictMode && !date && this.inputElement.value === (this.enableMask ? this.maskedDateValue : '')) {\n      this.setProperties({\n        value: null\n      }, true);\n    }\n    if (isNaN(+this.value)) {\n      this.setProperties({\n        value: null\n      }, true);\n    }\n    if (isNullOrUndefined(this.value)) {\n      this.currentDate = new Date(new Date().setHours(0, 0, 0, 0));\n    }\n  };\n  DatePicker.prototype.createCalendar = function () {\n    var _this = this;\n    this.popupWrapper = this.createElement('div', {\n      className: '' + ROOT + ' ' + POPUPWRAPPER\n    });\n    if (!isNullOrUndefined(this.cssClass)) {\n      this.popupWrapper.className += ' ' + this.cssClass;\n    }\n    if (Browser.isDevice) {\n      this.modelHeader();\n      this.modal = this.createElement('div');\n      this.modal.className = '' + ROOT + ' e-date-modal';\n      document.body.className += ' ' + OVERFLOW;\n      this.modal.style.display = 'block';\n      document.body.appendChild(this.modal);\n    }\n    //this.calendarElement represent the Calendar object from the Calendar class.\n    this.calendarElement.querySelector('table tbody').className = '';\n    this.popupObj = new Popup(this.popupWrapper, {\n      content: this.calendarElement,\n      relateTo: Browser.isDevice ? document.body : this.inputWrapper.container,\n      position: Browser.isDevice ? {\n        X: 'center',\n        Y: 'center'\n      } : {\n        X: 'left',\n        Y: 'bottom'\n      },\n      offsetY: OFFSETVALUE,\n      targetType: 'container',\n      enableRtl: this.enableRtl,\n      zIndex: this.zIndex,\n      collision: Browser.isDevice ? {\n        X: 'fit',\n        Y: 'fit'\n      } : {\n        X: 'flip',\n        Y: 'flip'\n      },\n      open: function open() {\n        if (_this.getModuleName() !== 'datetimepicker') {\n          if (document.activeElement !== _this.inputElement) {\n            _this.defaultKeyConfigs = extend(_this.defaultKeyConfigs, _this.keyConfigs);\n            _this.calendarElement.children[1].firstElementChild.focus();\n            _this.calendarKeyboardModules = new KeyboardEvents(_this.calendarElement.children[1].firstElementChild, {\n              eventName: 'keydown',\n              keyAction: _this.calendarKeyActionHandle.bind(_this),\n              keyConfigs: _this.defaultKeyConfigs\n            });\n            _this.calendarKeyboardModules = new KeyboardEvents(_this.inputWrapper.container.children[_this.index], {\n              eventName: 'keydown',\n              keyAction: _this.calendarKeyActionHandle.bind(_this),\n              keyConfigs: _this.defaultKeyConfigs\n            });\n          }\n        }\n      },\n      close: function close() {\n        if (_this.isDateIconClicked) {\n          _this.inputWrapper.container.children[_this.index].focus();\n        }\n        if (_this.value) {\n          _this.disabledDates();\n        }\n        if (_this.popupObj) {\n          _this.popupObj.destroy();\n        }\n        _this.resetCalendar();\n        detach(_this.popupWrapper);\n        _this.popupObj = _this.popupWrapper = null;\n        _this.preventArgs = null;\n        _this.calendarKeyboardModules = null;\n        _this.setAriaAttributes();\n      },\n      targetExitViewport: function targetExitViewport() {\n        if (!Browser.isDevice) {\n          _this.hide();\n        }\n      }\n    });\n    this.popupObj.element.className += ' ' + this.cssClass;\n    this.setAriaAttributes();\n  };\n  DatePicker.prototype.setAriaDisabled = function () {\n    if (!this.enabled) {\n      this.inputElement.setAttribute('aria-disabled', 'true');\n      this.inputElement.tabIndex = -1;\n    } else {\n      this.inputElement.setAttribute('aria-disabled', 'false');\n      this.inputElement.setAttribute('tabindex', this.tabIndex);\n    }\n  };\n  DatePicker.prototype.modelHeader = function () {\n    var dateOptions;\n    var modelHeader = this.createElement('div', {\n      className: 'e-model-header'\n    });\n    var yearHeading = this.createElement('h1', {\n      className: 'e-model-year'\n    });\n    var h2 = this.createElement('div');\n    var daySpan = this.createElement('span', {\n      className: 'e-model-day'\n    });\n    var monthSpan = this.createElement('span', {\n      className: 'e-model-month'\n    });\n    if (this.calendarMode === 'Gregorian') {\n      dateOptions = {\n        format: 'y',\n        skeleton: 'dateTime'\n      };\n    } else {\n      dateOptions = {\n        format: 'y',\n        skeleton: 'dateTime',\n        calendar: 'islamic'\n      };\n    }\n    yearHeading.textContent = '' + this.globalize.formatDate(this.value || new Date(), dateOptions);\n    if (this.calendarMode === 'Gregorian') {\n      dateOptions = {\n        format: 'E',\n        skeleton: 'dateTime'\n      };\n    } else {\n      dateOptions = {\n        format: 'E',\n        skeleton: 'dateTime',\n        calendar: 'islamic'\n      };\n    }\n    daySpan.textContent = '' + this.globalize.formatDate(this.value || new Date(), dateOptions) + ', ';\n    if (this.calendarMode === 'Gregorian') {\n      dateOptions = {\n        format: 'MMM d',\n        skeleton: 'dateTime'\n      };\n    } else {\n      dateOptions = {\n        format: 'MMM d',\n        skeleton: 'dateTime',\n        calendar: 'islamic'\n      };\n    }\n    monthSpan.textContent = '' + this.globalize.formatDate(this.value || new Date(), dateOptions);\n    modelHeader.appendChild(yearHeading);\n    h2.appendChild(daySpan);\n    h2.appendChild(monthSpan);\n    modelHeader.appendChild(h2);\n    this.calendarElement.insertBefore(modelHeader, this.calendarElement.firstElementChild);\n  };\n  DatePicker.prototype.changeTrigger = function (event) {\n    if (this.inputElement.value !== this.previousElementValue) {\n      if ((this.previousDate && this.previousDate.valueOf()) !== (this.value && this.value.valueOf())) {\n        if (this.isDynamicValueChanged && this.isCalendar()) {\n          this.popupUpdate();\n        }\n        this.changedArgs.value = this.value;\n        this.changedArgs.event = event || null;\n        this.changedArgs.element = this.element;\n        this.changedArgs.isInteracted = !isNullOrUndefined(event);\n        if (this.isAngular && this.preventChange) {\n          this.preventChange = false;\n        } else {\n          this.trigger('change', this.changedArgs);\n        }\n        this.previousElementValue = this.inputElement.value;\n        this.previousDate = !isNaN(+new Date(this.checkValue(this.value))) ? new Date(this.checkValue(this.value)) : null;\n        this.isInteracted = true;\n      }\n    }\n  };\n  DatePicker.prototype.navigatedEvent = function () {\n    this.trigger('navigated', this.navigatedArgs);\n  };\n  DatePicker.prototype.changeEvent = function (event) {\n    if (!this.isIconClicked) {\n      this.selectCalendar(event);\n    }\n    if ((this.previousDate && this.previousDate.valueOf()) !== (this.value && this.value.valueOf())) {\n      this.changedArgs.event = event ? event : null;\n      this.changedArgs.element = this.element;\n      this.changedArgs.isInteracted = this.isInteracted;\n      if (!this.isDynamicValueChanged) {\n        this.trigger('change', this.changedArgs);\n      }\n      this.previousDate = this.value && new Date(+this.value);\n      if (!this.isDynamicValueChanged) {\n        this.hide(event);\n      }\n      this.previousElementValue = this.inputElement.value;\n      this.errorClass();\n    } else if (event) {\n      this.hide(event);\n    }\n  };\n  DatePicker.prototype.requiredModules = function () {\n    var modules = [];\n    if (this) {\n      modules.push({\n        args: [this],\n        member: 'islamic'\n      });\n    }\n    if (this.enableMask) {\n      modules.push({\n        args: [this],\n        member: 'MaskedDateTime'\n      });\n    }\n    return modules;\n  };\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DatePicker.prototype.selectCalendar = function (e) {\n    var date;\n    var tempFormat;\n    var formatOptions;\n    if (this.getModuleName() === 'datetimepicker') {\n      tempFormat = !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat;\n    } else {\n      tempFormat = this.formatString;\n    }\n    if (this.value) {\n      if (this.getModuleName() === 'datetimepicker') {\n        if (this.calendarMode === 'Gregorian') {\n          formatOptions = {\n            format: tempFormat,\n            type: 'dateTime',\n            skeleton: 'yMd'\n          };\n        } else {\n          formatOptions = {\n            format: tempFormat,\n            type: 'dateTime',\n            skeleton: 'yMd',\n            calendar: 'islamic'\n          };\n        }\n        date = this.globalize.formatDate(this.changedArgs.value, formatOptions);\n      } else {\n        if (this.calendarMode === 'Gregorian') {\n          formatOptions = {\n            format: this.formatString,\n            type: 'dateTime',\n            skeleton: 'yMd'\n          };\n        } else {\n          formatOptions = {\n            format: this.formatString,\n            type: 'dateTime',\n            skeleton: 'yMd',\n            calendar: 'islamic'\n          };\n        }\n        date = this.globalize.formatDate(this.changedArgs.value, formatOptions);\n      }\n      if (this.enableMask) {\n        this.notify(\"createMask\", {\n          module: \"MaskedDateTime\"\n        });\n      }\n    }\n    if (!isNullOrUndefined(date)) {\n      this.updateInputValue(date);\n      if (this.enableMask) {\n        this.notify(\"setMaskSelection\", {\n          module: \"MaskedDateTime\"\n        });\n      }\n    }\n  };\n  DatePicker.prototype.isCalendar = function () {\n    if (this.popupWrapper && this.popupWrapper.classList.contains('' + POPUPWRAPPER)) {\n      return true;\n    }\n    return false;\n  };\n  DatePicker.prototype.setWidth = function (width) {\n    if (typeof width === 'number') {\n      this.inputWrapper.container.style.width = formatUnit(this.width);\n    } else if (typeof width === 'string') {\n      this.inputWrapper.container.style.width = width.match(/px|%|em/) ? this.width : formatUnit(this.width);\n    } else {\n      this.inputWrapper.container.style.width = '100%';\n    }\n  };\n  /* eslint-disable valid-jsdoc, jsdoc/require-param */\n  /**\n   * Shows the Calendar.\n   *\n   * @returns {void}\n    */\n  DatePicker.prototype.show = function (type, e) {\n    var _this = this;\n    if (this.enabled && this.readonly || !this.enabled || this.popupObj) {\n      return;\n    } else {\n      var prevent_1 = true;\n      var outOfRange = void 0;\n      if (!isNullOrUndefined(this.value) && !(+this.value >= +new Date(this.checkValue(this.min)) && +this.value <= +new Date(this.checkValue(this.max)))) {\n        outOfRange = new Date(this.checkValue(this.value));\n        this.setProperties({\n          'value': null\n        }, true);\n      } else {\n        outOfRange = this.value || null;\n      }\n      if (!this.isCalendar()) {\n        _super.prototype.render.call(this);\n        this.setProperties({\n          'value': outOfRange || null\n        }, true);\n        this.previousDate = outOfRange;\n        this.createCalendar();\n      }\n      if (Browser.isDevice) {\n        this.mobilePopupWrapper = this.createElement('div', {\n          className: 'e-datepick-mob-popup-wrap'\n        });\n        document.body.appendChild(this.mobilePopupWrapper);\n      }\n      this.preventArgs = {\n        preventDefault: function preventDefault() {\n          prevent_1 = false;\n        },\n        popup: this.popupObj,\n        event: e || null,\n        cancel: false,\n        appendTo: Browser.isDevice ? this.mobilePopupWrapper : document.body\n      };\n      var eventArgs = this.preventArgs;\n      this.trigger('open', eventArgs, function (eventArgs) {\n        _this.preventArgs = eventArgs;\n        if (prevent_1 && !_this.preventArgs.cancel) {\n          addClass(_this.inputWrapper.buttons, ACTIVE);\n          _this.preventArgs.appendTo.appendChild(_this.popupWrapper);\n          _this.popupObj.refreshPosition(_this.inputElement);\n          var openAnimation = {\n            name: 'FadeIn',\n            duration: Browser.isDevice ? 0 : OPENDURATION\n          };\n          if (_this.zIndex === 1000) {\n            _this.popupObj.show(new Animation(openAnimation), _this.element);\n          } else {\n            _this.popupObj.show(new Animation(openAnimation), null);\n          }\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          _super.prototype.setOverlayIndex.call(_this, _this.mobilePopupWrapper, _this.popupObj.element, _this.modal, Browser.isDevice);\n          _this.setAriaAttributes();\n        } else {\n          _this.popupObj.destroy();\n          _this.popupWrapper = _this.popupObj = null;\n        }\n        if (!isNullOrUndefined(_this.inputElement) && _this.inputElement.value === '') {\n          if (!isNullOrUndefined(_this.tableBodyElement) && _this.tableBodyElement.querySelectorAll('td.e-selected').length > 0) {\n            addClass([_this.tableBodyElement.querySelector('td.e-selected')], FOCUSEDDATE);\n            removeClass(_this.tableBodyElement.querySelectorAll('td.e-selected'), SELECTED);\n          }\n        }\n        EventHandler.add(document, 'mousedown touchstart', _this.documentHandler, _this);\n      });\n    }\n  };\n  /**\n   * Hide the Calendar.\n   *\n   * @returns {void}\n    */\n  DatePicker.prototype.hide = function (event) {\n    var _this = this;\n    if (!isNullOrUndefined(this.popupWrapper)) {\n      var prevent_2 = true;\n      this.preventArgs = {\n        preventDefault: function preventDefault() {\n          prevent_2 = false;\n        },\n        popup: this.popupObj,\n        event: event || null,\n        cancel: false\n      };\n      removeClass(this.inputWrapper.buttons, ACTIVE);\n      removeClass([document.body], OVERFLOW);\n      var eventArgs = this.preventArgs;\n      if (this.isCalendar()) {\n        this.trigger('close', eventArgs, function (eventArgs) {\n          _this.closeEventCallback(prevent_2, eventArgs);\n        });\n      } else {\n        this.closeEventCallback(prevent_2, eventArgs);\n      }\n    } else {\n      if (Browser.isDevice && this.allowEdit && !this.readonly) {\n        this.inputElement.removeAttribute('readonly');\n      }\n      this.setAllowEdit();\n    }\n  };\n  /* eslint-enable valid-jsdoc, jsdoc/require-param */\n  DatePicker.prototype.closeEventCallback = function (prevent, eventArgs) {\n    this.preventArgs = eventArgs;\n    if (this.isCalendar() && prevent && !this.preventArgs.cancel) {\n      this.popupObj.hide();\n      this.isAltKeyPressed = false;\n      this.keyboardModule.destroy();\n      removeClass(this.inputWrapper.buttons, ACTIVE);\n    }\n    this.setAriaAttributes();\n    if (Browser.isDevice && this.modal) {\n      this.modal.style.display = 'none';\n      this.modal.outerHTML = '';\n      this.modal = null;\n    }\n    if (Browser.isDevice) {\n      if (!isNullOrUndefined(this.mobilePopupWrapper)) {\n        this.mobilePopupWrapper.remove();\n        this.mobilePopupWrapper = null;\n      }\n    }\n    EventHandler.remove(document, 'mousedown touchstart', this.documentHandler);\n    if (Browser.isDevice && this.allowEdit && !this.readonly) {\n      this.inputElement.removeAttribute('readonly');\n    }\n    this.setAllowEdit();\n  };\n  /* eslint-disable jsdoc/require-param */\n  /**\n   * Sets the focus to widget for interaction.\n   *\n   * @returns {void}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DatePicker.prototype.focusIn = function (triggerEvent) {\n    if (document.activeElement !== this.inputElement && this.enabled) {\n      this.inputElement.focus();\n      addClass([this.inputWrapper.container], [INPUTFOCUS]);\n    }\n  };\n  /* eslint-enable jsdoc/require-param */\n  /**\n   * Remove the focus from widget, if the widget is in focus state.\n   *\n   * @returns {void}\n   */\n  DatePicker.prototype.focusOut = function () {\n    if (document.activeElement === this.inputElement) {\n      removeClass([this.inputWrapper.container], [INPUTFOCUS]);\n      this.inputElement.blur();\n    }\n  };\n  /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */\n  /**\n   * Gets the current view of the DatePicker.\n   *\n   * @returns {string}\n    */\n  DatePicker.prototype.currentView = function () {\n    var currentView;\n    if (this.calendarElement) {\n      // calls the Calendar currentView public method\n      currentView = _super.prototype.currentView.call(this);\n    }\n    return currentView;\n  };\n  /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */\n  /**\n   * Navigates to specified month or year or decade view of the DatePicker.\n   *\n   * @param  {string} view - Specifies the view of the calendar.\n   * @param  {Date} date - Specifies the focused date in a view.\n   * @returns {void}\n    */\n  DatePicker.prototype.navigateTo = function (view, date) {\n    if (this.calendarElement) {\n      // calls the Calendar navigateTo public method\n      _super.prototype.navigateTo.call(this, view, date);\n    }\n  };\n  /**\n   * To destroy the widget.\n   *\n   * @returns {void}\n   */\n  DatePicker.prototype.destroy = function () {\n    this.unBindEvents();\n    _super.prototype.destroy.call(this);\n    if (!isNullOrUndefined(this.keyboardModules)) {\n      this.keyboardModules.destroy();\n    }\n    if (this.popupObj && this.popupObj.element.classList.contains(POPUP)) {\n      _super.prototype.destroy.call(this);\n    }\n    var ariaAttrs = {\n      'aria-atomic': 'true',\n      'aria-disabled': 'true',\n      'aria-expanded': 'false',\n      'role': 'combobox',\n      'autocomplete': 'off',\n      'autocorrect': 'off',\n      'autocapitalize': 'off',\n      'spellcheck': 'false'\n    };\n    if (this.inputElement) {\n      Input.removeAttributes(ariaAttrs, this.inputElement);\n      if (!isNullOrUndefined(this.inputElementCopy.getAttribute('tabindex'))) {\n        this.inputElement.setAttribute('tabindex', this.tabIndex);\n      } else {\n        this.inputElement.removeAttribute('tabindex');\n      }\n      EventHandler.remove(this.inputElement, 'blur', this.inputBlurHandler);\n      EventHandler.remove(this.inputElement, 'focus', this.inputFocusHandler);\n      this.ensureInputAttribute();\n    }\n    if (this.isCalendar()) {\n      if (this.popupWrapper) {\n        detach(this.popupWrapper);\n      }\n      this.popupObj = this.popupWrapper = null;\n      this.keyboardModule.destroy();\n    }\n    if (this.ngTag === null) {\n      if (this.inputElement) {\n        if (!isNullOrUndefined(this.inputWrapper)) {\n          this.inputWrapper.container.insertAdjacentElement('afterend', this.inputElement);\n        }\n        removeClass([this.inputElement], [INPUTROOT]);\n      }\n      removeClass([this.element], [ROOT]);\n      if (!isNullOrUndefined(this.inputWrapper)) {\n        detach(this.inputWrapper.container);\n      }\n    }\n    if (this.formElement) {\n      EventHandler.remove(this.formElement, 'reset', this.resetFormHandler);\n    }\n    this.inputWrapper = null;\n    this.keyboardModules = null;\n  };\n  DatePicker.prototype.ensureInputAttribute = function () {\n    var prop = [];\n    for (var i = 0; i < this.inputElement.attributes.length; i++) {\n      prop[i] = this.inputElement.attributes[i].name;\n    }\n    for (var i = 0; i < prop.length; i++) {\n      if (isNullOrUndefined(this.inputElementCopy.getAttribute(prop[i]))) {\n        if (prop[i].toLowerCase() === 'value') {\n          this.inputElement.value = '';\n        }\n        this.inputElement.removeAttribute(prop[i]);\n      } else {\n        if (prop[i].toLowerCase() === 'value') {\n          this.inputElement.value = this.inputElementCopy.getAttribute(prop[i]);\n        }\n        this.inputElement.setAttribute(prop[i], this.inputElementCopy.getAttribute(prop[i]));\n      }\n    }\n  };\n  /**\n   * Initialize the event handler\n   *\n   * @returns {void}\n   * @private\n   */\n  DatePicker.prototype.preRender = function () {\n    this.inputElementCopy = this.element.cloneNode(true);\n    removeClass([this.inputElementCopy], [ROOT, CONTROL, LIBRARY]);\n    this.inputElement = this.element;\n    this.formElement = closest(this.inputElement, 'form');\n    this.index = this.showClearButton ? 2 : 1;\n    this.ngTag = null;\n    if (this.element.tagName === 'EJS-DATEPICKER' || this.element.tagName === 'EJS-DATETIMEPICKER') {\n      this.ngTag = this.element.tagName;\n      this.inputElement = this.createElement('input');\n      this.element.appendChild(this.inputElement);\n    }\n    if (this.element.getAttribute('id')) {\n      if (this.ngTag !== null) {\n        this.inputElement.id = this.element.getAttribute('id') + '_input';\n      }\n    } else {\n      if (this.getModuleName() === 'datetimepicker') {\n        this.element.id = getUniqueID('ej2-datetimepicker');\n        if (this.ngTag !== null) {\n          attributes(this.inputElement, {\n            'id': this.element.id + '_input'\n          });\n        }\n      } else {\n        this.element.id = getUniqueID('ej2-datepicker');\n        if (this.ngTag !== null) {\n          attributes(this.inputElement, {\n            'id': this.element.id + '_input'\n          });\n        }\n      }\n    }\n    if (this.ngTag !== null) {\n      this.validationAttribute(this.element, this.inputElement);\n    }\n    this.updateHtmlAttributeToElement();\n    this.defaultKeyConfigs = this.getDefaultKeyConfig();\n    this.checkHtmlAttributes(false);\n    this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : '0';\n    this.element.removeAttribute('tabindex');\n    _super.prototype.preRender.call(this);\n  };\n  DatePicker.prototype.getDefaultKeyConfig = function () {\n    this.defaultKeyConfigs = {\n      altUpArrow: 'alt+uparrow',\n      altDownArrow: 'alt+downarrow',\n      escape: 'escape',\n      enter: 'enter',\n      controlUp: 'ctrl+38',\n      controlDown: 'ctrl+40',\n      moveDown: 'downarrow',\n      moveUp: 'uparrow',\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      select: 'enter',\n      home: 'home',\n      end: 'end',\n      pageUp: 'pageup',\n      pageDown: 'pagedown',\n      shiftPageUp: 'shift+pageup',\n      shiftPageDown: 'shift+pagedown',\n      controlHome: 'ctrl+home',\n      controlEnd: 'ctrl+end',\n      shiftTab: 'shift+tab',\n      tab: 'tab'\n    };\n    return this.defaultKeyConfigs;\n  };\n  DatePicker.prototype.validationAttribute = function (target, inputElement) {\n    var nameAttribute = target.getAttribute('name') ? target.getAttribute('name') : target.getAttribute('id');\n    inputElement.setAttribute('name', nameAttribute);\n    target.removeAttribute('name');\n    var attribute = ['required', 'aria-required', 'form'];\n    for (var i = 0; i < attribute.length; i++) {\n      if (isNullOrUndefined(target.getAttribute(attribute[i]))) {\n        continue;\n      }\n      var attr = target.getAttribute(attribute[i]);\n      inputElement.setAttribute(attribute[i], attr);\n      target.removeAttribute(attribute[i]);\n    }\n  };\n  DatePicker.prototype.checkFormat = function () {\n    var culture = new Internationalization(this.locale);\n    if (this.format) {\n      if (typeof this.format === 'string') {\n        this.formatString = this.format;\n      } else if (this.format.skeleton !== '' && !isNullOrUndefined(this.format.skeleton)) {\n        var skeletonString = this.format.skeleton;\n        if (this.getModuleName() === 'datetimepicker') {\n          this.formatString = culture.getDatePattern({\n            skeleton: skeletonString,\n            type: 'dateTime'\n          });\n        } else {\n          this.formatString = culture.getDatePattern({\n            skeleton: skeletonString,\n            type: 'date'\n          });\n        }\n      } else {\n        if (this.getModuleName() === 'datetimepicker') {\n          this.formatString = this.dateTimeFormat;\n        } else {\n          this.formatString = null;\n        }\n      }\n    } else {\n      this.formatString = null;\n    }\n  };\n  DatePicker.prototype.checkHtmlAttributes = function (dynamic) {\n    this.globalize = new Internationalization(this.locale);\n    this.checkFormat();\n    this.checkView();\n    var attributes = dynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ['value', 'min', 'max', 'disabled', 'readonly', 'style', 'name', 'placeholder', 'type'];\n    var options;\n    if (this.getModuleName() === 'datetimepicker') {\n      if (this.calendarMode === 'Gregorian') {\n        options = {\n          format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,\n          type: 'dateTime',\n          skeleton: 'yMd'\n        };\n      } else {\n        options = {\n          format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,\n          type: 'dateTime',\n          skeleton: 'yMd',\n          calendar: 'islamic'\n        };\n      }\n    } else {\n      if (this.calendarMode === 'Gregorian') {\n        options = {\n          format: this.formatString,\n          type: 'dateTime',\n          skeleton: 'yMd'\n        };\n      } else {\n        options = {\n          format: this.formatString,\n          type: 'dateTime',\n          skeleton: 'yMd',\n          calendar: 'islamic'\n        };\n      }\n    }\n    for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {\n      var prop = attributes_1[_i];\n      if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) {\n        switch (prop) {\n          case 'disabled':\n            if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions['enabled'] === undefined || dynamic) {\n              var enabled = this.inputElement.getAttribute(prop) === 'disabled' || this.inputElement.getAttribute(prop) === '' || this.inputElement.getAttribute(prop) === 'true' ? false : true;\n              this.setProperties({\n                enabled: enabled\n              }, !dynamic);\n            }\n            break;\n          case 'readonly':\n            if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions['readonly'] === undefined || dynamic) {\n              var readonly = this.inputElement.getAttribute(prop) === 'readonly' || this.inputElement.getAttribute(prop) === '' || this.inputElement.getAttribute(prop) === 'true' ? true : false;\n              this.setProperties({\n                readonly: readonly\n              }, !dynamic);\n            }\n            break;\n          case 'placeholder':\n            if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions['placeholder'] === undefined || dynamic) {\n              this.setProperties({\n                placeholder: this.inputElement.getAttribute(prop)\n              }, !dynamic);\n            }\n            break;\n          case 'style':\n            this.inputElement.setAttribute('style', '' + this.inputElement.getAttribute(prop));\n            break;\n          case 'name':\n            this.inputElement.setAttribute('name', '' + this.inputElement.getAttribute(prop));\n            break;\n          case 'value':\n            if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions['value'] === undefined || dynamic) {\n              var value = this.inputElement.getAttribute(prop);\n              this.setProperties(setValue(prop, this.globalize.parseDate(value, options), {}), !dynamic);\n            }\n            break;\n          case 'min':\n            if (+this.min === +new Date(1900, 0, 1) || dynamic) {\n              var min = this.inputElement.getAttribute(prop);\n              this.setProperties(setValue(prop, this.globalize.parseDate(min), {}), !dynamic);\n            }\n            break;\n          case 'max':\n            if (+this.max === +new Date(2099, 11, 31) || dynamic) {\n              var max = this.inputElement.getAttribute(prop);\n              this.setProperties(setValue(prop, this.globalize.parseDate(max), {}), !dynamic);\n            }\n            break;\n          case 'type':\n            if (this.inputElement.getAttribute(prop) !== 'text') {\n              this.inputElement.setAttribute('type', 'text');\n            }\n            break;\n        }\n      }\n    }\n  };\n  /**\n   * To get component name.\n   *\n   * @returns {string} Returns the component name.\n   * @private\n   */\n  DatePicker.prototype.getModuleName = function () {\n    return 'datepicker';\n  };\n  DatePicker.prototype.disabledDates = function (isDynamic) {\n    if (isDynamic === void 0) {\n      isDynamic = false;\n    }\n    var formatOptions;\n    var globalize;\n    var valueCopy = this.checkDateValue(this.value) ? new Date(+this.value) : new Date(this.checkValue(this.value));\n    var previousValCopy = this.previousDate;\n    //calls the Calendar render method to check the disabled dates through renderDayCell event and update the input value accordingly.\n    this.minMaxUpdates();\n    if (!isDynamic || isDynamic && !isNullOrUndefined(this.renderDayCell)) {\n      _super.prototype.render.call(this);\n    }\n    this.previousDate = previousValCopy;\n    var date = valueCopy && +valueCopy;\n    var dateIdString = '*[id^=\"/id\"]'.replace('/id', '' + date);\n    if (!this.strictMode) {\n      if (typeof this.value === 'string' || typeof this.value === 'object' && +this.value !== +valueCopy) {\n        this.setProperties({\n          value: valueCopy\n        }, true);\n      }\n    }\n    if (!isNullOrUndefined(this.calendarElement) && !isNullOrUndefined(this.calendarElement.querySelectorAll(dateIdString)[0])) {\n      if (this.calendarElement.querySelectorAll(dateIdString)[0].classList.contains('e-disabled')) {\n        if (!this.strictMode) {\n          this.currentDate = new Date(new Date().setHours(0, 0, 0, 0));\n        }\n      }\n    }\n    var inputVal;\n    if (this.getModuleName() === 'datetimepicker') {\n      if (this.calendarMode === 'Gregorian') {\n        globalize = this.globalize.formatDate(valueCopy, {\n          format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,\n          type: 'dateTime',\n          skeleton: 'yMd'\n        });\n      } else {\n        globalize = this.globalize.formatDate(valueCopy, {\n          format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,\n          type: 'dateTime',\n          skeleton: 'yMd',\n          calendar: 'islamic'\n        });\n      }\n      inputVal = globalize;\n    } else {\n      if (this.calendarMode === 'Gregorian') {\n        formatOptions = {\n          format: this.formatString,\n          type: 'dateTime',\n          skeleton: 'yMd'\n        };\n      } else {\n        formatOptions = {\n          format: this.formatString,\n          type: 'dateTime',\n          skeleton: 'yMd',\n          calendar: 'islamic'\n        };\n      }\n      inputVal = this.globalize.formatDate(valueCopy, formatOptions);\n    }\n    if (!this.popupObj) {\n      this.updateInputValue(inputVal);\n      if (this.enableMask) {\n        this.updateInputValue(this.maskedDateValue);\n        this.notify(\"createMask\", {\n          module: \"MaskedDateTime\"\n        });\n      }\n    }\n  };\n  DatePicker.prototype.setAriaAttributes = function () {\n    if (this.isCalendar()) {\n      Input.addAttributes({\n        'aria-expanded': 'true'\n      }, this.inputElement);\n      attributes(this.inputElement, {\n        'aria-owns': this.inputElement.id + '_options'\n      });\n      if (this.value) {\n        attributes(this.inputElement, {\n          'aria-activedescendant': '' + this.setActiveDescendant()\n        });\n      }\n    } else {\n      Input.addAttributes({\n        'aria-expanded': 'false'\n      }, this.inputElement);\n      this.inputElement.removeAttribute('aria-owns');\n      this.inputElement.removeAttribute('aria-activedescendant');\n    }\n  };\n  DatePicker.prototype.errorClass = function () {\n    var dateIdString = '*[id^=\"/id\"]'.replace('/id', '' + +this.value);\n    var isDisabledDate = this.calendarElement && this.calendarElement.querySelectorAll(dateIdString)[0] && this.calendarElement.querySelectorAll(dateIdString)[0].classList.contains('e-disabled');\n    if (!isNullOrUndefined(this.value) && !isNullOrUndefined(this.min) && !isNullOrUndefined(this.max) && !(new Date(this.value).setMilliseconds(0) >= new Date(this.min).setMilliseconds(0) && new Date(this.value).setMilliseconds(0) <= new Date(this.max).setMilliseconds(0)) || !this.strictMode && this.inputElement.value !== '' && this.inputElement.value !== this.maskedDateValue && isNullOrUndefined(this.value) || isDisabledDate) {\n      addClass([this.inputWrapper.container], ERROR);\n      attributes(this.inputElement, {\n        'aria-invalid': 'true'\n      });\n    } else {\n      removeClass([this.inputWrapper.container], ERROR);\n      attributes(this.inputElement, {\n        'aria-invalid': 'false'\n      });\n    }\n  };\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param {DatePickerModel} newProp - Returns the dynamic property value of the component.\n   * @param {DatePickerModel} oldProp - Returns the previous property value of the component.\n   * @returns {void}\n   * @private\n   */\n  DatePicker.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n      switch (prop) {\n        case 'value':\n          this.isDynamicValueChanged = true;\n          this.isInteracted = false;\n          this.invalidValueString = null;\n          this.checkInvalidValue(newProp.value);\n          newProp.value = this.value;\n          this.previousElementValue = this.inputElement.value;\n          if (isNullOrUndefined(this.value)) {\n            this.updateInputValue('');\n            this.currentDate = new Date(new Date().setHours(0, 0, 0, 0));\n          }\n          this.updateInput(true);\n          if (+this.previousDate !== +this.value) {\n            this.changeTrigger(null);\n          }\n          this.isInteracted = true;\n          this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;\n          if (this.enableMask) {\n            this.notify(\"createMask\", {\n              module: \"MaskedDateTime\"\n            });\n          }\n          break;\n        case 'format':\n          this.checkFormat();\n          this.bindInputEvent();\n          this.updateInput();\n          if (this.enableMask) {\n            this.notify(\"createMask\", {\n              module: \"MaskedDateTime\"\n            });\n            if (!this.value) {\n              this.updateInputValue(this.maskedDateValue);\n            }\n          }\n          break;\n        case 'allowEdit':\n          this.setAllowEdit();\n          break;\n        case 'placeholder':\n          Input.setPlaceholder(this.placeholder, this.inputElement);\n          break;\n        case 'readonly':\n          Input.setReadonly(this.readonly, this.inputElement);\n          break;\n        case 'enabled':\n          Input.setEnabled(this.enabled, this.inputElement);\n          this.setAriaDisabled();\n          break;\n        case 'htmlAttributes':\n          this.updateHtmlAttributeToElement();\n          this.updateHtmlAttributeToWrapper();\n          this.checkHtmlAttributes(true);\n          break;\n        case 'locale':\n          this.globalize = new Internationalization(this.locale);\n          this.l10n.setLocale(this.locale);\n          this.setProperties({\n            placeholder: this.l10n.getConstant('placeholder')\n          }, true);\n          Input.setPlaceholder(this.placeholder, this.inputElement);\n          this.updateInput();\n          if (this.enableMask) {\n            this.notify(\"createMask\", {\n              module: \"MaskedDateTime\"\n            });\n          }\n          break;\n        case 'enableRtl':\n          Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);\n          break;\n        case 'start':\n        case 'depth':\n          this.checkView();\n          if (this.calendarElement) {\n            _super.prototype.onPropertyChanged.call(this, newProp, oldProp);\n          }\n          break;\n        case 'zIndex':\n          this.setProperties({\n            zIndex: newProp.zIndex\n          }, true);\n          break;\n        case 'cssClass':\n          this.updateCssClass(newProp.cssClass, oldProp.cssClass);\n          break;\n        case 'showClearButton':\n          Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper);\n          this.bindClearEvent();\n          this.index = this.showClearButton ? 2 : 1;\n          break;\n        case 'strictMode':\n          this.invalidValueString = null;\n          this.updateInput();\n          break;\n        case 'width':\n          this.setWidth(newProp.width);\n          Input.calculateWidth(this.inputElement, this.inputWrapper.container);\n          if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName('e-float-text-overflow')[0]) && this.floatLabelType !== 'Never') {\n            this.inputWrapper.container.getElementsByClassName('e-float-text-overflow')[0].classList.add('e-icon');\n          }\n          break;\n        case 'floatLabelType':\n          this.floatLabelType = newProp.floatLabelType;\n          Input.removeFloating(this.inputWrapper);\n          Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);\n          if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName('e-float-text-overflow')[0]) && this.floatLabelType !== 'Never') {\n            this.inputWrapper.container.getElementsByClassName('e-float-text-overflow')[0].classList.add('e-icon');\n          }\n          break;\n        case 'enableMask':\n          if (this.enableMask) {\n            this.notify(\"createMask\", {\n              module: \"MaskedDateTime\"\n            });\n            this.updateInputValue(this.maskedDateValue);\n            this.bindInputEvent();\n          } else {\n            if (this.inputElement.value === this.maskedDateValue) {\n              this.updateInputValue('');\n            }\n          }\n          break;\n        default:\n          if (this.calendarElement && this.isCalendar()) {\n            _super.prototype.onPropertyChanged.call(this, newProp, oldProp);\n          }\n          break;\n      }\n      if (!this.isDynamicValueChanged) {\n        this.hide(null);\n      }\n      this.isDynamicValueChanged = false;\n    }\n  };\n  __decorate([Property(null)], DatePicker.prototype, \"width\", void 0);\n  __decorate([Property(null)], DatePicker.prototype, \"value\", void 0);\n  __decorate([Property(null)], DatePicker.prototype, \"cssClass\", void 0);\n  __decorate([Property(false)], DatePicker.prototype, \"strictMode\", void 0);\n  __decorate([Property(null)], DatePicker.prototype, \"format\", void 0);\n  __decorate([Property(true)], DatePicker.prototype, \"enabled\", void 0);\n  __decorate([Property({})], DatePicker.prototype, \"htmlAttributes\", void 0);\n  __decorate([Property(null)], DatePicker.prototype, \"values\", void 0);\n  __decorate([Property(false)], DatePicker.prototype, \"isMultiSelection\", void 0);\n  __decorate([Property(true)], DatePicker.prototype, \"showClearButton\", void 0);\n  __decorate([Property(true)], DatePicker.prototype, \"allowEdit\", void 0);\n  __decorate([Property(null)], DatePicker.prototype, \"keyConfigs\", void 0);\n  __decorate([Property(false)], DatePicker.prototype, \"enablePersistence\", void 0);\n  __decorate([Property(1000)], DatePicker.prototype, \"zIndex\", void 0);\n  __decorate([Property(false)], DatePicker.prototype, \"readonly\", void 0);\n  __decorate([Property(null)], DatePicker.prototype, \"placeholder\", void 0);\n  __decorate([Property('Never')], DatePicker.prototype, \"floatLabelType\", void 0);\n  __decorate([Property(null)], DatePicker.prototype, \"serverTimezoneOffset\", void 0);\n  __decorate([Property(false)], DatePicker.prototype, \"openOnFocus\", void 0);\n  __decorate([Property(false)], DatePicker.prototype, \"enableMask\", void 0);\n  __decorate([Property({\n    day: 'day',\n    month: 'month',\n    year: 'year',\n    hour: 'hour',\n    minute: 'minute',\n    second: 'second',\n    dayOfTheWeek: 'day of the week'\n  })], DatePicker.prototype, \"maskPlaceholder\", void 0);\n  __decorate([Event()], DatePicker.prototype, \"open\", void 0);\n  __decorate([Event()], DatePicker.prototype, \"cleared\", void 0);\n  __decorate([Event()], DatePicker.prototype, \"close\", void 0);\n  __decorate([Event()], DatePicker.prototype, \"blur\", void 0);\n  __decorate([Event()], DatePicker.prototype, \"focus\", void 0);\n  __decorate([Event()], DatePicker.prototype, \"created\", void 0);\n  __decorate([Event()], DatePicker.prototype, \"destroyed\", void 0);\n  DatePicker = __decorate([NotifyPropertyChanges], DatePicker);\n  return DatePicker;\n}(Calendar);\nexport { DatePicker };","map":null,"metadata":{},"sourceType":"module"}