{"ast":null,"code":"var TYPE = require('../../tokenizer').TYPE;\nvar IDENT = TYPE.Ident;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\nvar COLON = TYPE.Colon;\nvar DELIM = TYPE.Delim;\nmodule.exports = {\n  name: 'MediaFeature',\n  structure: {\n    name: String,\n    value: ['Identifier', 'Number', 'Dimension', 'Ratio', null]\n  },\n  parse: function parse() {\n    var start = this.scanner.tokenStart;\n    var name;\n    var value = null;\n    this.eat(LEFTPARENTHESIS);\n    this.scanner.skipSC();\n    name = this.consume(IDENT);\n    this.scanner.skipSC();\n    if (this.scanner.tokenType !== RIGHTPARENTHESIS) {\n      this.eat(COLON);\n      this.scanner.skipSC();\n      switch (this.scanner.tokenType) {\n        case NUMBER:\n          if (this.lookupNonWSType(1) === DELIM) {\n            value = this.Ratio();\n          } else {\n            value = this.Number();\n          }\n          break;\n        case DIMENSION:\n          value = this.Dimension();\n          break;\n        case IDENT:\n          value = this.Identifier();\n          break;\n        default:\n          this.error('Number, dimension, ratio or identifier is expected');\n      }\n      this.scanner.skipSC();\n    }\n    this.eat(RIGHTPARENTHESIS);\n    return {\n      type: 'MediaFeature',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      name: name,\n      value: value\n    };\n  },\n  generate: function generate(node) {\n    this.chunk('(');\n    this.chunk(node.name);\n    if (node.value !== null) {\n      this.chunk(':');\n      this.node(node.value);\n    }\n    this.chunk(')');\n  }\n};","map":null,"metadata":{},"sourceType":"script"}