{"ast":null,"code":"var sourceMap = require('./sourceMap');\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction processChildren(node, delimeter) {\n  var list = node.children;\n  var prev = null;\n  if (typeof delimeter !== 'function') {\n    list.forEach(this.node, this);\n  } else {\n    list.forEach(function (node) {\n      if (prev !== null) {\n        delimeter.call(this, prev);\n      }\n      this.node(node);\n      prev = node;\n    }, this);\n  }\n}\nmodule.exports = function createGenerator(config) {\n  function processNode(node) {\n    if (hasOwnProperty.call(types, node.type)) {\n      types[node.type].call(this, node);\n    } else {\n      throw new Error('Unknown node type: ' + node.type);\n    }\n  }\n  var types = {};\n  if (config.node) {\n    for (var name in config.node) {\n      types[name] = config.node[name].generate;\n    }\n  }\n  return function (node, options) {\n    var buffer = '';\n    var handlers = {\n      children: processChildren,\n      node: processNode,\n      chunk: function chunk(_chunk) {\n        buffer += _chunk;\n      },\n      result: function result() {\n        return buffer;\n      }\n    };\n    if (options) {\n      if (typeof options.decorator === 'function') {\n        handlers = options.decorator(handlers);\n      }\n      if (options.sourceMap) {\n        handlers = sourceMap(handlers);\n      }\n    }\n    handlers.node(node);\n    return handlers.result();\n  };\n};","map":null,"metadata":{},"sourceType":"script"}