{"ast":null,"code":"var mdnAtrules = require('mdn-data/css/at-rules.json');\nvar mdnProperties = require('mdn-data/css/properties.json');\nvar mdnSyntaxes = require('mdn-data/css/syntaxes.json');\nvar patch = require('./patch.json');\nvar extendSyntax = /^\\s*\\|\\s*/;\nfunction preprocessAtrules(dict) {\n  var result = Object.create(null);\n  for (var atruleName in dict) {\n    var atrule = dict[atruleName];\n    var descriptors = null;\n    if (atrule.descriptors) {\n      descriptors = Object.create(null);\n      for (var descriptor in atrule.descriptors) {\n        descriptors[descriptor] = atrule.descriptors[descriptor].syntax;\n      }\n    }\n    result[atruleName.substr(1)] = {\n      prelude: atrule.syntax.trim().match(/^@\\S+\\s+([^;\\{]*)/)[1].trim() || null,\n      descriptors: descriptors\n    };\n  }\n  return result;\n}\nfunction patchDictionary(dict, patchDict) {\n  var result = {};\n\n  // copy all syntaxes for an original dict\n  for (var key in dict) {\n    result[key] = dict[key].syntax || dict[key];\n  }\n\n  // apply a patch\n  for (var _key in patchDict) {\n    if (_key in dict) {\n      if (patchDict[_key].syntax) {\n        result[_key] = extendSyntax.test(patchDict[_key].syntax) ? result[_key] + ' ' + patchDict[_key].syntax.trim() : patchDict[_key].syntax;\n      } else {\n        delete result[_key];\n      }\n    } else {\n      if (patchDict[_key].syntax) {\n        result[_key] = patchDict[_key].syntax.replace(extendSyntax, '');\n      }\n    }\n  }\n  return result;\n}\nfunction unpackSyntaxes(dict) {\n  var result = {};\n  for (var key in dict) {\n    result[key] = dict[key].syntax;\n  }\n  return result;\n}\nfunction patchAtrules(dict, patchDict) {\n  var result = {};\n\n  // copy all syntaxes for an original dict\n  for (var key in dict) {\n    var patchDescriptors = patchDict[key] && patchDict[key].descriptors || null;\n    result[key] = {\n      prelude: key in patchDict && 'prelude' in patchDict[key] ? patchDict[key].prelude : dict[key].prelude || null,\n      descriptors: dict[key].descriptors ? patchDictionary(dict[key].descriptors, patchDescriptors || {}) : patchDescriptors && unpackSyntaxes(patchDescriptors)\n    };\n  }\n\n  // apply a patch\n  for (var _key2 in patchDict) {\n    if (!hasOwnProperty.call(dict, _key2)) {\n      result[_key2] = {\n        prelude: patchDict[_key2].prelude || null,\n        descriptors: patchDict[_key2].descriptors && unpackSyntaxes(patchDict[_key2].descriptors)\n      };\n    }\n  }\n  return result;\n}\nmodule.exports = {\n  types: patchDictionary(mdnSyntaxes, patch.syntaxes),\n  atrules: patchAtrules(preprocessAtrules(mdnAtrules), patch.atrules),\n  properties: patchDictionary(mdnProperties, patch.properties)\n};","map":null,"metadata":{},"sourceType":"script"}