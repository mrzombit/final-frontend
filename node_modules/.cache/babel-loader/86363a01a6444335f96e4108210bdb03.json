{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Event, ChildProperty, Collection, Complex, Component, NotifyPropertyChanges, Property, getUniqueID, EventHandler, isRippleEnabled, removeClass, addClass, attributes } from '@syncfusion/ej2-base';\nimport { select, extend, deleteObject, KeyboardEvents, append, rippleEffect, remove, closest, selectAll, isNullOrUndefined, compile, formatUnit, Animation } from '@syncfusion/ej2-base';\nimport { Fab } from './../floating-action-button/index';\nvar topPosition = ['TopLeft', 'TopCenter', 'TopRight'];\nvar bottomPosition = ['BottomLeft', 'BottomCenter', 'BottomRight'];\nvar leftPosition = ['TopLeft', 'MiddleLeft', 'BottomLeft'];\nvar rightPosition = ['TopRight', 'MiddleRight', 'BottomRight'];\nvar SDHIDDEN = 'e-speeddial-hidden';\nvar FIXEDSD = 'e-speeddial-fixed';\nvar SPEEDDIAL = 'e-speeddial';\nvar RTLCLASS = 'e-rtl';\nvar HOVERSD = 'e-speeddial-hover-open';\nvar RADIALSD = 'e-speeddial-radial';\nvar LINEARSD = 'e-speeddial-linear';\nvar TEMPLATESD = 'e-speeddial-template';\nvar SDTEMPLATECONTAINER = 'e-speeddial-template-container';\nvar SDOVERLAY = 'e-speeddial-overlay';\nvar SDPOPUP = 'e-speeddial-popup';\nvar SDUL = 'e-speeddial-ul';\nvar SDLI = 'e-speeddial-li';\nvar SDACTIVELI = 'e-speeddial-li-active';\nvar SDLIICON = 'e-speeddial-li-icon';\nvar SDLITEXT = 'e-speeddial-li-text';\nvar SDLITEXTONLY = 'e-speeddial-text-li';\nvar DISABLED = 'e-disabled';\nvar SDVERTICALBOTTOM = 'e-speeddial-vert-bottom';\nvar SDVERTICALRIGHT = 'e-speeddial-vert-right';\nvar SDHORIZONTALTOP = 'e-speeddial-horz-top';\nvar SDHORIZONTALLEFT = 'e-speeddial-horz-left';\nvar SDHORIZONTALRIGHT = 'e-speeddial-horz-right';\nvar SDOVERFLOW = 'e-speeddial-overflow';\nvar SDVERTOVERFLOW = 'e-speeddial-vert-overflow';\nvar SDHORZOVERFLOW = 'e-speeddial-horz-overflow';\nvar SDTOP = 'e-speeddial-top';\nvar SDBOTTOM = 'e-speeddial-bottom';\nvar SDRIGHT = 'e-speeddial-right';\nvar SDLEFT = 'e-speeddial-left';\nvar SDMIDDLE = 'e-speeddial-middle';\nvar SDCENTER = 'e-speeddial-center';\nvar SDTOPLEFT = 'e-speeddial-top-left';\nvar SDBOTTOMRIGHT = 'e-speeddial-bottom-right';\nvar SDTOPRIGHT = 'e-speeddial-top-right';\nvar SDBOTTOMLEFT = 'e-speeddial-bottom-left';\nvar SDVERTDIST = '--speeddialVertDist';\nvar SDHORZDIST = '--speeddialHorzDist';\nvar SDRADICALANGLE = '--speeddialRadialAngle';\nvar SDRADICALOFFSET = '--speeddialRadialOffset';\nvar SDRADICALMINHEIGHT = '--speeddialRadialMinHeight';\nvar SDRADICALMINWIDTH = '--speeddialRadialMinWidth';\nvar SDOVERFLOWLIMIT = '--speeddialOverflowLimit';\n/**\n * Defines the display mode of speed dial action items in SpeedDial\n */\nexport var SpeedDialMode;\n(function (SpeedDialMode) {\n  /**\n   * SpeedDial items are displayed in linear order like list.\n   */\n  SpeedDialMode[\"Linear\"] = \"Linear\";\n  /**\n   * SpeedDial items are displayed like radial menu in radial direction (circular direction).\n   */\n  SpeedDialMode[\"Radial\"] = \"Radial\";\n})(SpeedDialMode || (SpeedDialMode = {}));\n/**\n * Defines the speed dial action items display direction when mode is Linear.\n */\nexport var LinearDirection;\n(function (LinearDirection) {\n  /**\n   * Speed dial action items are displayed vertically above the button of Speed Dial.\n   */\n  LinearDirection[\"Up\"] = \"Up\";\n  /**\n   * Speed dial action items are displayed vertically below the button of Speed Dial.\n   */\n  LinearDirection[\"Down\"] = \"Down\";\n  /**\n   * Speed dial action items are displayed horizontally on the button's right side.\n   */\n  LinearDirection[\"Right\"] = \"Right\";\n  /**\n   * Speed dial action items are displayed horizontally on the button's left side.\n   */\n  LinearDirection[\"Left\"] = \"Left\";\n  /**\n   * Speed dial action items are displayed vertically above or below the button of Speed Dial based on the position.\n   * If Position is TopRight, TopLeft, TopCenter, the items are displayed vertically below the button else above the button.\n   */\n  LinearDirection[\"Auto\"] = \"Auto\";\n})(LinearDirection || (LinearDirection = {}));\n/**\n * Defines the speed dial action items  order, when mode is Radial.\n */\nexport var RadialDirection;\n(function (RadialDirection) {\n  /**\n   * SpeedDial items are arranged in clockwise direction.\n   */\n  RadialDirection[\"Clockwise\"] = \"Clockwise\";\n  /**\n   * SpeedDial items are shown in anti-clockwise direction.\n   */\n  RadialDirection[\"AntiClockwise\"] = \"AntiClockwise\";\n  /**\n   * SpeedDial items are shown clockwise or anti-clockwise based on the position.\n   */\n  RadialDirection[\"Auto\"] = \"Auto\";\n})(RadialDirection || (RadialDirection = {}));\n/**\n * Defines the animation effect applied when open and close the speed dial items.\n */\nexport var SpeedDialAnimationEffect;\n(function (SpeedDialAnimationEffect) {\n  /**\n   * SpeedDial open/close actions occur with the Fade animation effect.\n   */\n  SpeedDialAnimationEffect[\"Fade\"] = \"Fade\";\n  /**\n   * SpeedDial open/close actions occur with the FadeZoom animation effect.\n   */\n  SpeedDialAnimationEffect[\"FadeZoom\"] = \"FadeZoom\";\n  /**\n   * SpeedDial open/close actions occur with the FlipLeftDown animation effect.\n   */\n  SpeedDialAnimationEffect[\"FlipLeftDown\"] = \"FlipLeftDown\";\n  /**\n   * SpeedDial open/close actions occur with the FlipLeftUp animation effect.\n   */\n  SpeedDialAnimationEffect[\"FlipLeftUp\"] = \"FlipLeftUp\";\n  /**\n   * SpeedDial open/close actions occur with the FlipRightDown animation effect.\n   */\n  SpeedDialAnimationEffect[\"FlipRightDown\"] = \"FlipRightDown\";\n  /**\n   * SpeedDial open/close actions occur with the FlipRightUp animation effect.\n   */\n  SpeedDialAnimationEffect[\"FlipRightUp\"] = \"FlipRightUp\";\n  /**\n   * SpeedDial open/close actions occur with the FlipXDown animation effect.\n   */\n  SpeedDialAnimationEffect[\"FlipXDown\"] = \"FlipXDown\";\n  /**\n   * SpeedDial open/close actions occur with the FlipXUp animation effect.\n   */\n  SpeedDialAnimationEffect[\"FlipXUp\"] = \"FlipXUp\";\n  /**\n   * SpeedDial open/close actions occur with the FlipYLeft animation effect.\n   */\n  SpeedDialAnimationEffect[\"FlipYLeft\"] = \"FlipYLeft\";\n  /**\n   * SpeedDial open/close actions occur with the FlipYRight animation effect.\n   */\n  SpeedDialAnimationEffect[\"FlipYRight\"] = \"FlipYRight\";\n  /**\n   * SpeedDial open/close actions occur with the SlideBottom animation effect.\n   */\n  SpeedDialAnimationEffect[\"SlideBottom\"] = \"SlideBottom\";\n  /**\n   * SpeedDial open/close actions occur with the SlideLeft animation effect.\n   */\n  SpeedDialAnimationEffect[\"SlideLeft\"] = \"SlideLeft\";\n  /**\n   * SpeedDial open/close actions occur with the SlideRight animation effect.\n   */\n  SpeedDialAnimationEffect[\"SlideRight\"] = \"SlideRight\";\n  /**\n   * SpeedDial open/close actions occur with the SlideTop animation effect.\n   */\n  SpeedDialAnimationEffect[\"SlideTop\"] = \"SlideTop\";\n  /**\n   * SpeedDial open/close actions occur with the Zoom animation effect.\n   */\n  SpeedDialAnimationEffect[\"Zoom\"] = \"Zoom\";\n  /**\n   * SpeedDial open/close actions occur without any animation effect.\n   */\n  SpeedDialAnimationEffect[\"None\"] = \"None\";\n})(SpeedDialAnimationEffect || (SpeedDialAnimationEffect = {}));\n/**\n * AProvides options to customize the animation applied while opening and closing the popup of SpeedDial.\n */\nvar SpeedDialAnimationSettings = /** @class */function (_super) {\n  __extends(SpeedDialAnimationSettings, _super);\n  function SpeedDialAnimationSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property('Fade')], SpeedDialAnimationSettings.prototype, \"effect\", void 0);\n  __decorate([Property(400)], SpeedDialAnimationSettings.prototype, \"duration\", void 0);\n  __decorate([Property(0)], SpeedDialAnimationSettings.prototype, \"delay\", void 0);\n  return SpeedDialAnimationSettings;\n}(ChildProperty);\nexport { SpeedDialAnimationSettings };\n/**\n * Provides the options to customize the speed dial action buttons when mode of SpeedDial is Radial.\n */\nvar RadialSettings = /** @class */function (_super) {\n  __extends(RadialSettings, _super);\n  function RadialSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property('Auto')], RadialSettings.prototype, \"direction\", void 0);\n  __decorate([Property(-1)], RadialSettings.prototype, \"endAngle\", void 0);\n  __decorate([Property('100px')], RadialSettings.prototype, \"offset\", void 0);\n  __decorate([Property(-1)], RadialSettings.prototype, \"startAngle\", void 0);\n  return RadialSettings;\n}(ChildProperty);\nexport { RadialSettings };\n/**\n * Defines the items of Floating Action Button.\n */\nvar SpeedDialItem = /** @class */function (_super) {\n  __extends(SpeedDialItem, _super);\n  function SpeedDialItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property('')], SpeedDialItem.prototype, \"iconCss\", void 0);\n  __decorate([Property('')], SpeedDialItem.prototype, \"id\", void 0);\n  __decorate([Property('')], SpeedDialItem.prototype, \"text\", void 0);\n  __decorate([Property('')], SpeedDialItem.prototype, \"title\", void 0);\n  __decorate([Property(false)], SpeedDialItem.prototype, \"disabled\", void 0);\n  return SpeedDialItem;\n}(ChildProperty);\nexport { SpeedDialItem };\n/**\n * The SpeedDial component that appears in front of all the contents of the page and displays list of action buttons on click which is an extended version of FAB.\n * The button of speed dial is positioned in relative to a view port of browser or the .\n * It can display a menu of related actions or a custom content popupTemplate>.\n *\n */\nvar SpeedDial = /** @class */function (_super) {\n  __extends(SpeedDial, _super);\n  /**\n   * Constructor for creating the widget\n   *\n   * @param  {SpeedDialModel} options - Specifies the floating action button model\n   * @param  {string|HTMLButtonElement} element - Specifies the target element\n   */\n  function SpeedDial(options, element) {\n    var _this = _super.call(this, options, element) || this;\n    _this.isMenuOpen = false;\n    _this.isClock = true;\n    _this.isVertical = true;\n    _this.isControl = false;\n    _this.focusedIndex = -1;\n    return _this;\n  }\n  /**\n   * Initialize the control rendering\n   *\n   * @returns {void}\n   * @private\n   */\n  SpeedDial.prototype.render = function () {\n    this.initialize();\n  };\n  SpeedDial.prototype.preRender = function () {\n    this.keyConfigs = {\n      space: 'space',\n      enter: 'enter',\n      end: 'end',\n      home: 'home',\n      moveDown: 'downarrow',\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      esc: 'escape'\n    };\n    this.validateDirection();\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string} - Persist data\n   */\n  SpeedDial.prototype.getPersistData = function () {\n    return this.addOnPersist([]);\n  };\n  /**\n   * Get component name.\n   *\n   * @returns {string} - Module name\n   * @private\n   */\n  SpeedDial.prototype.getModuleName = function () {\n    return 'speed-dial';\n  };\n  SpeedDial.prototype.initialize = function () {\n    if (!this.element.id) {\n      this.element.id = getUniqueID('e-' + this.getModuleName());\n    }\n    this.fab = new Fab({\n      content: this.content,\n      cssClass: this.cssClass ? SPEEDDIAL + ' ' + this.cssClass : SPEEDDIAL,\n      disabled: this.disabled,\n      enablePersistence: this.enablePersistence,\n      enableRtl: this.enableRtl,\n      iconCss: this.openIconCss,\n      iconPosition: this.iconPosition,\n      position: this.position,\n      target: this.target,\n      visible: this.visible\n    });\n    this.fab.appendTo(this.element);\n    if (this.items.length > 0 || this.popupTemplate) {\n      this.createPopup();\n    }\n    this.wireEvents();\n  };\n  SpeedDial.prototype.wireEvents = function () {\n    EventHandler.add(window, 'resize', this.resizeHandler, this);\n    EventHandler.add(document.body, 'click', this.bodyClickHandler, this);\n    if (this.opensOnHover) {\n      this.wireFabHover();\n    } else {\n      this.wireFabClick();\n    }\n  };\n  SpeedDial.prototype.wirePopupEvents = function () {\n    this.removeRippleEffect = rippleEffect(this.popupEle, {\n      selector: '.' + SDLIICON\n    });\n    this.keyboardModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n    this.popupKeyboardModule = new KeyboardEvents(this.popupEle, {\n      keyAction: this.popupKeyActionHandler.bind(this),\n      keyConfigs: {\n        esc: 'escape'\n      },\n      eventName: 'keydown'\n    });\n    EventHandler.add(this.popupEle, 'click', this.popupClick, this);\n    EventHandler.add(this.popupEle, 'mouseleave', this.popupMouseLeaveHandle, this);\n  };\n  SpeedDial.prototype.wireFabClick = function () {\n    EventHandler.add(this.fab.element, 'click', this.fabClick, this);\n  };\n  SpeedDial.prototype.wireFabHover = function () {\n    this.popupEle.classList.add(HOVERSD);\n    EventHandler.add(this.fab.element, 'mouseover', this.mouseOverHandle, this);\n    EventHandler.add(this.element, 'mouseleave', this.mouseLeaveHandle, this);\n  };\n  SpeedDial.prototype.createPopup = function () {\n    var className = SDPOPUP + ' ' + SDHIDDEN;\n    className = this.enableRtl ? className + ' ' + RTLCLASS : className;\n    className = this.cssClass ? className + ' ' + this.cssClass : className;\n    this.popupEle = this.createElement('div', {\n      className: className,\n      id: this.element.id + '_popup'\n    });\n    this.element.insertAdjacentElement('afterend', this.popupEle);\n    attributes(this.element, {\n      'aria-expanded': 'false',\n      'aria-haspopup': 'true',\n      'aria-controls': this.popupEle.id\n    });\n    this.setPopupContent();\n    if (this.modal) {\n      this.createOverlay();\n    }\n    this.checkTarget();\n    this.setPositionProps();\n    this.wirePopupEvents();\n  };\n  SpeedDial.prototype.createOverlay = function () {\n    this.overlayEle = this.createElement('div', {\n      id: this.element.id + '_overlay',\n      className: (SDOVERLAY + (this.isMenuOpen ? '' : ' ' + SDHIDDEN) + ' ' + this.cssClass).trim()\n    });\n    this.element.insertAdjacentElement('beforebegin', this.overlayEle);\n  };\n  SpeedDial.prototype.popupClick = function () {\n    this.isControl = true;\n  };\n  //Checks and closes the speed dial if the click happened outside this speed dial.\n  SpeedDial.prototype.bodyClickHandler = function (e) {\n    if (this.isControl) {\n      this.isControl = false;\n      return;\n    }\n    if (this.isMenuOpen) {\n      this.hidePopupEle(e);\n    }\n  };\n  SpeedDial.prototype.fabClick = function (e) {\n    this.isControl = true;\n    if (this.isMenuOpen) {\n      this.hidePopupEle(e);\n    } else {\n      this.showPopupEle(e);\n    }\n  };\n  SpeedDial.prototype.setPopupContent = function () {\n    this.popupEle.classList.remove(RADIALSD, LINEARSD, TEMPLATESD);\n    if (!this.popupTemplate) {\n      this.popupEle.classList.add(this.mode === 'Radial' ? RADIALSD : LINEARSD);\n      this.createUl();\n      this.createItems();\n    } else {\n      this.popupEle.classList.add(TEMPLATESD);\n      this.appendTemplate();\n    }\n    this.renderReactTemplates();\n  };\n  SpeedDial.prototype.appendTemplate = function () {\n    var templateContainer = this.createElement('div', {\n      className: SDTEMPLATECONTAINER\n    });\n    append([templateContainer], this.popupEle);\n    var templateFunction = this.getTemplateString(this.popupTemplate);\n    append(templateFunction({}, this, 'fabPopupTemplate', this.element.id + 'popupTemplate', this.isStringTemplate), templateContainer);\n  };\n  SpeedDial.prototype.getTemplateString = function (template) {\n    var stringContent = '';\n    try {\n      var tempEle = select(template);\n      if (tempEle) {\n        //Return innerHTML incase of jsrenderer script else outerHTML\n        stringContent = tempEle.tagName === 'SCRIPT' ? tempEle.innerHTML : tempEle.outerHTML;\n      } else {\n        stringContent = template;\n      }\n    } catch (e) {\n      stringContent = template;\n    }\n    return compile(stringContent);\n  };\n  SpeedDial.prototype.updatePopupTemplate = function () {\n    if (this.popupEle) {\n      if (this.popupEle.querySelector('.' + SDLI)) {\n        this.clearItems();\n        this.popupEle.classList.remove(RADIALSD, LINEARSD);\n        this.popupEle.classList.add(TEMPLATESD);\n      }\n      while (this.popupEle.firstElementChild) {\n        remove(this.popupEle.firstElementChild);\n      }\n      this.setPopupContent();\n      this.updatePositionProperties();\n    } else {\n      this.createPopup();\n    }\n  };\n  SpeedDial.prototype.createUl = function () {\n    var popupUlEle = this.createElement('ul', {\n      className: SDUL,\n      id: this.element.id + '_ul',\n      attrs: {\n        'role': 'menu'\n      }\n    });\n    this.popupEle.appendChild(popupUlEle);\n  };\n  SpeedDial.prototype.createItems = function () {\n    var _this = this;\n    this.focusedIndex = -1;\n    var ul = this.popupEle.querySelector('.' + SDUL);\n    var _loop_1 = function _loop_1(index) {\n      var item = this_1.items[parseInt(index.toString(), 10)];\n      var li = this_1.createElement('li', {\n        className: SDLI + ' ' + SDHIDDEN,\n        id: item.id ? item.id : this_1.element.id + '_li_' + index,\n        attrs: {\n          'role': 'menuitem'\n        }\n      });\n      if (item.text) {\n        li.setAttribute('aria-label', item.text);\n      }\n      if (this_1.itemTemplate) {\n        var templateFunction = this_1.getTemplateString(this_1.itemTemplate);\n        append(templateFunction(item, this_1, 'fabItemTemplate', this_1.element.id + 'itemTemplate', this_1.isStringTemplate), li);\n      } else {\n        if (item.iconCss) {\n          var iconSpan = this_1.createElement('span', {\n            className: SDLIICON + ' ' + item.iconCss\n          });\n          li.appendChild(iconSpan);\n        }\n        if (item.text) {\n          var textSpan = this_1.createElement('span', {\n            className: SDLITEXT\n          });\n          textSpan.innerText = item.text;\n          li.appendChild(textSpan);\n          if (!item.iconCss) {\n            li.classList.add(SDLITEXTONLY);\n          }\n        }\n      }\n      if (item.disabled) {\n        li.classList.add(DISABLED);\n        li.setAttribute('aria-disabled', 'true');\n      } else {\n        EventHandler.add(li, 'click', function (e) {\n          return _this.triggerItemClick(e, item);\n        }, this_1);\n      }\n      if (item.title) {\n        li.setAttribute('title', item.title);\n      }\n      var eventArgs = {\n        element: li,\n        item: item\n      };\n      this_1.trigger('beforeItemRender', eventArgs, function (args) {\n        ul.appendChild(args.element);\n      });\n    };\n    var this_1 = this;\n    for (var index = 0; index < this.items.length; index++) {\n      _loop_1(index);\n    }\n  };\n  SpeedDial.prototype.setRTL = function () {\n    this.popupEle.classList[this.enableRtl ? 'add' : 'remove'](RTLCLASS);\n    this.clearHorizontalPosition();\n    if (!(this.popupTemplate || this.mode === 'Radial')) {\n      this.setLinearHorizontalPosition();\n    } else {\n      this.setHorizontalPosition();\n    }\n  };\n  SpeedDial.prototype.checkTarget = function () {\n    this.isFixed = true;\n    if (this.target) {\n      this.targetEle = typeof this.target === 'string' ? select(this.target) : this.target;\n      if (this.targetEle) {\n        this.targetEle.appendChild(this.element);\n        this.isFixed = false;\n      }\n    }\n    if (this.isFixed) {\n      if (this.popupEle) {\n        this.popupEle.classList.add(FIXEDSD);\n      }\n      if (this.overlayEle) {\n        this.overlayEle.classList.add(FIXEDSD);\n      }\n    } else {\n      if (this.popupEle) {\n        this.popupEle.classList.remove(FIXEDSD);\n      }\n      if (this.overlayEle) {\n        this.overlayEle.classList.remove(FIXEDSD);\n      }\n    }\n  };\n  SpeedDial.prototype.setVisibility = function (val) {\n    this.setProperties({\n      visible: val\n    }, true);\n    this.fab.setProperties({\n      visible: val\n    });\n  };\n  SpeedDial.prototype.popupMouseLeaveHandle = function (e) {\n    var target = e.relatedTarget;\n    if (this.opensOnHover && !(target.classList.contains(SPEEDDIAL) || closest(target, '.' + SPEEDDIAL))) {\n      this.hidePopupEle(e);\n    }\n  };\n  SpeedDial.prototype.mouseOverHandle = function (e) {\n    this.showPopupEle(e);\n  };\n  SpeedDial.prototype.mouseLeaveHandle = function (e) {\n    var target = e.relatedTarget;\n    if (!(target.classList.contains(SDPOPUP) || closest(target, '.' + SDPOPUP))) {\n      this.hidePopupEle(e);\n    }\n  };\n  SpeedDial.prototype.popupKeyActionHandler = function (e) {\n    switch (e.action) {\n      case 'esc':\n        this.hidePopupEle(e);\n        break;\n    }\n  };\n  SpeedDial.prototype.keyActionHandler = function (e) {\n    e.preventDefault();\n    switch (e.action) {\n      case 'enter':\n      case 'space':\n        if (this.isMenuOpen) {\n          if (this.focusedIndex !== -1) {\n            this.triggerItemClick(e, this.items[this.focusedIndex]);\n          } else {\n            this.hidePopupEle(e);\n          }\n        } else {\n          this.showPopupEle(e);\n        }\n        break;\n      case 'esc':\n        this.hidePopupEle(e);\n        break;\n      default:\n        if (this.popupTemplate || !this.isMenuOpen) {\n          break;\n        }\n        switch (e.action) {\n          case 'end':\n            this.focusLastElement();\n            break;\n          case 'home':\n            this.focusFirstElement();\n            break;\n          case 'moveRight':\n            if (this.mode === 'Radial') {\n              this.focusLeftRightElement(false);\n            } else {\n              this.focusLinearElement(false);\n            }\n            break;\n          case 'moveDown':\n            if (this.mode === 'Radial') {\n              this.focusUpDownElement(false);\n            } else {\n              this.focusLinearElement(false);\n            }\n            break;\n          case 'moveLeft':\n            if (this.mode === 'Radial') {\n              this.focusLeftRightElement(true);\n            } else {\n              this.focusLinearElement(true);\n            }\n            break;\n          case 'moveUp':\n            if (this.mode === 'Radial') {\n              this.focusUpDownElement(true);\n            } else {\n              this.focusLinearElement(true);\n            }\n            break;\n        }\n        break;\n    }\n  };\n  SpeedDial.prototype.focusFirstElement = function () {\n    var ele = selectAll('.' + SDLI, this.popupEle);\n    var index = 0;\n    while (ele[parseInt(index.toString(), 10)].classList.contains(DISABLED)) {\n      index++;\n      if (index > ele.length - 1) {\n        return;\n      }\n    }\n    this.setFocus(index, ele[parseInt(index.toString(), 10)]);\n  };\n  SpeedDial.prototype.focusLastElement = function () {\n    var ele = selectAll('.' + SDLI, this.popupEle);\n    var index = ele.length - 1;\n    while (ele[parseInt(index.toString(), 10)].classList.contains(DISABLED)) {\n      index--;\n      if (index < 0) {\n        return;\n      }\n    }\n    this.setFocus(index, ele[parseInt(index.toString(), 10)]);\n  };\n  /*Linear*/\n  SpeedDial.prototype.focusLinearElement = function (isLeftUp) {\n    var isReversed = this.popupEle.classList.contains(SDVERTICALBOTTOM) || this.popupEle.classList.contains(SDHORIZONTALRIGHT);\n    /* Elements will be in reverse (RTL) order for these classes are present.\n    Reversed  and Down or right is previous.\n    Not reversed and Up or left is previous.\n    ((isReversed && !isLeftUp)||(!isReversed && isLeftUp)) ==> isReversed!==isLeftUp */\n    if (isReversed !== isLeftUp) {\n      this.focusPrevElement();\n    } else {\n      this.focusNextElement();\n    }\n  };\n  /*Radial*/\n  SpeedDial.prototype.focusLeftRightElement = function (isLeft) {\n    /*radialTop position  and left + anticlock or right + clock is previous\n    other positions and right + anticlock or left + clock is previous\n    ((isLeft && !this.isClock)||(!isLeft && this.isClock)) ==> isLeft!==this.isClock */\n    var isradialTop = ['TopLeft', 'TopCenter', 'TopRight', 'MiddleLeft'].indexOf(this.position) !== -1;\n    if (isradialTop && isLeft !== this.isClock || !isradialTop && isLeft === this.isClock) {\n      this.focusPrevElement();\n    } else {\n      this.focusNextElement();\n    }\n  };\n  /*Radial*/\n  SpeedDial.prototype.focusUpDownElement = function (isUp) {\n    /*radialRight position  and up + anticlock or down + clock is previous\n    other positions and down + anticlock or up + clock is previous\n    ((isUp && !this.isClock)||(!isUp && this.isClock)) ==> isUp!==this.isClock */\n    var isradialRight = ['TopRight', 'MiddleRight', 'BottomRight', 'BottomCenter'].indexOf(this.position) !== -1;\n    if (isradialRight && isUp !== this.isClock || !isradialRight && isUp === this.isClock) {\n      this.focusPrevElement();\n    } else {\n      this.focusNextElement();\n    }\n  };\n  SpeedDial.prototype.focusPrevElement = function () {\n    var ele = selectAll('.' + SDLI, this.popupEle);\n    var index = this.focusedIndex;\n    do {\n      index--;\n      if (index < 0) {\n        this.setFocus(-1);\n        return;\n      }\n    } while (ele[parseInt(index.toString(), 10)].classList.contains(DISABLED));\n    this.setFocus(index, ele[parseInt(index.toString(), 10)]);\n  };\n  SpeedDial.prototype.focusNextElement = function () {\n    var ele = selectAll('.' + SDLI, this.popupEle);\n    var index = this.focusedIndex;\n    do {\n      index++;\n      if (index > ele.length - 1) {\n        return;\n      }\n    } while (ele[parseInt(index.toString(), 10)].classList.contains(DISABLED));\n    this.setFocus(index, ele[parseInt(index.toString(), 10)]);\n  };\n  SpeedDial.prototype.setFocus = function (index, ele) {\n    this.removeFocus();\n    if (ele) {\n      ele.classList.add(SDACTIVELI);\n    }\n    this.focusedIndex = index;\n  };\n  SpeedDial.prototype.removeFocus = function () {\n    var preEle = select('.' + SDACTIVELI, this.popupEle);\n    if (preEle) {\n      preEle.classList.remove(SDACTIVELI);\n    }\n  };\n  SpeedDial.prototype.updatePositionProperties = function () {\n    this.hidePopupEle();\n    this.clearPosition();\n    this.validateDirection();\n    this.setPositionProps();\n  };\n  SpeedDial.prototype.setPositionProps = function () {\n    if (this.popupTemplate) {\n      this.setPosition();\n    } else if (this.mode === 'Radial') {\n      this.setRadialPosition();\n      this.setPosition();\n    } else {\n      this.setLinearPosition();\n      this.setMaxSize();\n    }\n  };\n  SpeedDial.prototype.validateDirection = function () {\n    switch (this.direction) {\n      case 'Up':\n        this.actualLinDirection = topPosition.indexOf(this.position) !== -1 ? 'Auto' : 'Up';\n        break;\n      case 'Down':\n        this.actualLinDirection = bottomPosition.indexOf(this.position) !== -1 ? 'Auto' : 'Down';\n        break;\n      case 'Right':\n        this.actualLinDirection = rightPosition.indexOf(this.position) !== -1 ? 'Auto' : 'Right';\n        break;\n      case 'Left':\n        this.actualLinDirection = leftPosition.indexOf(this.position) !== -1 ? 'Auto' : 'Left';\n        break;\n      case 'Auto':\n      default:\n        this.actualLinDirection = 'Auto';\n        break;\n    }\n    this.isVertical = !(this.actualLinDirection === 'Left' || this.actualLinDirection === 'Right');\n  };\n  SpeedDial.prototype.setMaxSize = function () {\n    var top = this.element.offsetTop;\n    var left = this.element.offsetLeft;\n    var bottom = (this.isFixed ? window.innerHeight : this.targetEle.clientHeight) - this.element.offsetTop - this.element.offsetHeight;\n    var right = (this.isFixed ? window.innerWidth : this.targetEle.clientWidth) - this.element.offsetLeft - this.element.offsetWidth;\n    var limit = 0;\n    var popupUlEle = this.popupEle.querySelector('.' + SDUL);\n    if (this.isVertical) {\n      limit = this.actualLinDirection === 'Up' || this.actualLinDirection === 'Auto' && topPosition.indexOf(this.position) === -1 ? top : bottom;\n      if (limit < popupUlEle.offsetHeight) {\n        this.popupEle.classList.add(SDOVERFLOW, SDVERTOVERFLOW);\n        popupUlEle.style.setProperty(SDOVERFLOWLIMIT, limit + 'px');\n      }\n    } else {\n      limit = this.direction === 'Right' ? right : left;\n      if (limit < popupUlEle.offsetWidth) {\n        this.popupEle.classList.add(SDOVERFLOW, SDHORZOVERFLOW);\n        popupUlEle.style.setProperty(SDOVERFLOWLIMIT, limit + 'px');\n      }\n    }\n  };\n  SpeedDial.prototype.setLinearPosition = function () {\n    var vertDist = 0;\n    //Check whether the position value should be in top\n    var isTop = this.actualLinDirection === 'Down' || this.actualLinDirection === 'Auto' && topPosition.indexOf(this.position) !== -1 || !this.isVertical && bottomPosition.indexOf(this.position) === -1;\n    if (isTop) {\n      vertDist = this.element.offsetTop + (this.isVertical ? this.element.offsetHeight : 0);\n      if (!this.isVertical) {\n        this.popupEle.classList.add(SDHORIZONTALTOP);\n      }\n    } else {\n      vertDist = this.isFixed ? window.innerHeight : this.targetEle.clientHeight;\n      vertDist = vertDist - this.element.offsetTop - (this.isVertical ? 0 : this.element.offsetHeight);\n      if (this.isVertical) {\n        this.popupEle.classList.add(SDVERTICALBOTTOM);\n      }\n    }\n    this.popupEle.classList.add(isTop ? SDTOP : SDBOTTOM);\n    this.popupEle.style.setProperty(SDVERTDIST, vertDist + 'px');\n    this.setLinearHorizontalPosition();\n  };\n  SpeedDial.prototype.setLinearHorizontalPosition = function () {\n    //Check whether the position value should be in left\n    if (this.actualLinDirection === 'Right' || this.isVertical && rightPosition.indexOf(this.position) === -1) {\n      if (this.enableRtl) {\n        this.setRight();\n      } else {\n        this.setLeft();\n      } //reverse the direction when RTL enabled\n      if (!this.isVertical) {\n        this.popupEle.classList.add(SDHORIZONTALLEFT);\n      }\n    } else {\n      if (this.enableRtl) {\n        this.setLeft();\n      } else {\n        this.setRight();\n      } //reverse the direction when RTL enabled\n      this.popupEle.classList.add(this.isVertical ? SDVERTICALRIGHT : SDHORIZONTALRIGHT);\n    }\n  };\n  SpeedDial.prototype.setLeft = function () {\n    var horzDist = this.element.offsetLeft + (this.isVertical ? 0 : this.element.offsetWidth);\n    this.popupEle.style.setProperty(SDHORZDIST, horzDist + 'px');\n    this.popupEle.classList.add(SDLEFT);\n  };\n  SpeedDial.prototype.setRight = function () {\n    var horzDist = this.isFixed ? window.innerWidth : this.targetEle.clientWidth;\n    horzDist = horzDist - this.element.offsetLeft - (this.isVertical ? this.element.offsetWidth : 0);\n    this.popupEle.style.setProperty(SDHORZDIST, horzDist + 'px');\n    this.popupEle.classList.add(SDRIGHT);\n  };\n  SpeedDial.prototype.setPosition = function () {\n    //Check for middle Position\n    if (['MiddleLeft', 'MiddleRight', 'MiddleCenter'].indexOf(this.position) !== -1) {\n      this.popupEle.classList.add(SDMIDDLE);\n      var yoffset = ((this.isFixed ? window.innerHeight : this.targetEle.clientHeight) - this.popupEle.offsetHeight) / 2;\n      this.popupEle.style.setProperty(SDVERTDIST, yoffset + 'px');\n    }\n    this.popupEle.classList.add(bottomPosition.indexOf(this.position) === -1 ? SDTOP : SDBOTTOM);\n    this.setHorizontalPosition();\n  };\n  SpeedDial.prototype.setHorizontalPosition = function () {\n    //Check for Center Position\n    if (['TopCenter', 'BottomCenter', 'MiddleCenter'].indexOf(this.position) !== -1) {\n      this.popupEle.classList.add(SDCENTER);\n      var xoffset = ((this.isFixed ? window.innerWidth : this.targetEle.clientWidth) - this.popupEle.offsetWidth) / 2;\n      this.popupEle.style.setProperty(SDHORZDIST, xoffset + 'px');\n    }\n    var isRight = rightPosition.indexOf(this.position) !== -1;\n    this.popupEle.classList.add(!(this.enableRtl || isRight) || this.enableRtl && isRight ? SDLEFT : SDRIGHT);\n  };\n  SpeedDial.prototype.setRadialPosition = function () {\n    this.setRadialCorner();\n    var range = this.getActualRange();\n    this.isClock = range.direction === 'Clockwise';\n    var offset = formatUnit(range.offset);\n    var li = selectAll('.' + SDLI, this.popupEle);\n    this.popupEle.style.setProperty(SDRADICALOFFSET, offset);\n    this.popupEle.style.setProperty(SDRADICALMINHEIGHT, li[0].offsetHeight + 'px');\n    this.popupEle.style.setProperty(SDRADICALMINWIDTH, li[0].offsetWidth + 'px');\n    var availableAngle = Math.abs(range.endAngle - range.startAngle);\n    //Start and end will be same for Middle Center position, hence available angle will 0 or 360.\n    var gaps = availableAngle === 360 || availableAngle === 0 ? li.length : li.length - 1;\n    var perAngle = availableAngle / gaps;\n    for (var i = 0; i < li.length; i++) {\n      var ele = li[parseInt(i.toString(), 10)];\n      var angle = this.isClock ? range.startAngle + perAngle * i : range.startAngle - perAngle * i;\n      angle = angle % 360; // removing the Zerp crossing changes.\n      ele.style.setProperty(SDRADICALANGLE, angle + 'deg');\n    }\n  };\n  SpeedDial.prototype.setRadialCorner = function () {\n    //topLeftPosition\n    if (['TopLeft', 'TopCenter', 'MiddleLeft', 'MiddleCenter'].indexOf(this.position) !== -1) {\n      this.popupEle.classList.add(this.enableRtl ? SDTOPRIGHT : SDTOPLEFT);\n    }\n    //topRightPosition\n    if (['TopRight', 'TopCenter', 'MiddleRight', 'MiddleCenter'].indexOf(this.position) !== -1) {\n      this.popupEle.classList.add(this.enableRtl ? SDTOPLEFT : SDTOPRIGHT);\n    }\n    //bottpmLeftPosition\n    if (['BottomLeft', 'BottomCenter', 'MiddleLeft', 'MiddleCenter'].indexOf(this.position) !== -1) {\n      this.popupEle.classList.add(this.enableRtl ? SDBOTTOMRIGHT : SDBOTTOMLEFT);\n    }\n    //bottomRightPosition\n    if (['BottomRight', 'BottomCenter', 'MiddleRight', 'MiddleCenter'].indexOf(this.position) !== -1) {\n      this.popupEle.classList.add(this.enableRtl ? SDBOTTOMLEFT : SDBOTTOMRIGHT);\n    }\n  };\n  // 0,360 is at right, 90 is at Bottom, 180 is at left, 270 is at top\n  SpeedDial.prototype.getActualRange = function () {\n    var range = {\n      offset: this.radialSettings.offset\n    };\n    var start = this.radialSettings.startAngle;\n    var end = this.radialSettings.endAngle;\n    var isClockwise;\n    switch (this.position) {\n      case 'TopLeft':\n      case 'TopRight':\n        // Switch Left and Right for RTL mode.\n        if ('TopLeft' === this.position !== this.enableRtl) {\n          //TopLeft\n          isClockwise = this.radialSettings.direction === 'Clockwise';\n          this.checkAngleRange(start, end, range, isClockwise, 0, 90, false);\n        } else {\n          //TopRight\n          isClockwise = this.radialSettings.direction !== 'AntiClockwise';\n          this.checkAngleRange(start, end, range, isClockwise, 90, 180, false);\n        }\n        break;\n      case 'TopCenter':\n        isClockwise = this.radialSettings.direction === 'Clockwise';\n        this.checkAngleRange(start, end, range, isClockwise, 0, 180, false);\n        break;\n      case 'MiddleLeft':\n      case 'MiddleRight':\n        // Switch Left and Right for RTL mode.\n        if ('MiddleLeft' === this.position !== this.enableRtl) {\n          //MiddleLeft\n          isClockwise = this.radialSettings.direction === 'Clockwise';\n          /**Replace the value if not defined or greater than 360 or less than 0 or between 91 and  269*/\n          start = isNullOrUndefined(start) || start < 0 || start > 360 || start > 90 && start < 270 ? isClockwise ? 270 : 90 : start;\n          end = isNullOrUndefined(end) || end < 0 || end > 360 || end > 90 && end < 270 ? isClockwise ? 90 : 270 : end;\n          /**update for Zero Crossing */\n          start = start < 91 ? start + 360 : start;\n          end = end < 91 ? end + 360 : end;\n          var switchVal = isClockwise && end < start || !isClockwise && end > start;\n          range.startAngle = switchVal ? end : start;\n          range.endAngle = switchVal ? start : end;\n        } else {\n          //MiddleRight\n          isClockwise = this.radialSettings.direction !== 'AntiClockwise';\n          this.checkAngleRange(start, end, range, isClockwise, 90, 270, false);\n        }\n        break;\n      case 'MiddleCenter':\n        isClockwise = this.radialSettings.direction !== 'AntiClockwise';\n        /**Replace the value if not defined or greater than 360 or less than 0 */\n        start = isNullOrUndefined(start) || start < 0 || start > 360 ? isClockwise ? 0 : 360 : start;\n        end = isNullOrUndefined(end) || end < 0 || end > 360 ? isClockwise ? 360 : 0 : end;\n        /**update for Zero Crossing */\n        range.startAngle = !isClockwise && start <= end ? start + 360 : start;\n        range.endAngle = isClockwise && end <= start ? end + 360 : end;\n        break;\n      case 'BottomLeft':\n      case 'BottomRight':\n        // Switch Left and Right for RTL mode.\n        if ('BottomLeft' === this.position !== this.enableRtl) {\n          //BottomLeft\n          isClockwise = this.radialSettings.direction === 'Clockwise';\n          this.checkAngleRange(start, end, range, isClockwise, 270, 360, true);\n        } else {\n          //BottomRight\n          isClockwise = this.radialSettings.direction !== 'AntiClockwise';\n          this.checkAngleRange(start, end, range, isClockwise, 180, 270, true);\n        }\n        break;\n      case 'BottomCenter':\n        isClockwise = this.radialSettings.direction !== 'AntiClockwise';\n        this.checkAngleRange(start, end, range, isClockwise, 180, 360, true);\n        break;\n    }\n    range.direction = isClockwise ? 'Clockwise' : 'AntiClockwise';\n    return range;\n  };\n  SpeedDial.prototype.checkAngleRange = function (start, end, range, isClockwise, min, max, check0) {\n    start = this.checkAngle(start, isClockwise, min, max, check0);\n    end = this.checkAngle(end, !isClockwise, min, max, check0);\n    /**Switch the values if both are values are in the range but not as per direction*/\n    var switchVal = isClockwise && end < start || !isClockwise && end > start;\n    range.startAngle = switchVal ? end : start;\n    range.endAngle = switchVal ? start : end;\n  };\n  SpeedDial.prototype.checkAngle = function (val, isStart, min, max, check0) {\n    if (isNullOrUndefined(val) || val < 0 || val > 360) {\n      return isStart ? min : max;\n    } else {\n      val = check0 ? val === 0 ? 360 : val : val === 360 ? 0 : val;\n      /**check whether the value is in the range if not replace them */\n      return val >= min && val <= max ? val : isStart ? min : max;\n    }\n  };\n  SpeedDial.prototype.clearPosition = function () {\n    this.popupEle.style.removeProperty(SDRADICALOFFSET);\n    this.popupEle.style.removeProperty(SDRADICALMINHEIGHT);\n    this.popupEle.style.removeProperty(SDRADICALMINWIDTH);\n    this.popupEle.classList.remove(SDTOPLEFT, SDTOPRIGHT, SDBOTTOMLEFT, SDBOTTOMRIGHT);\n    this.popupEle.classList.remove(SDTOP, SDBOTTOM, SDMIDDLE);\n    this.popupEle.classList.remove(SDHORIZONTALTOP, SDVERTICALBOTTOM);\n    this.popupEle.style.removeProperty(SDVERTDIST);\n    this.clearHorizontalPosition();\n    this.clearOverflow();\n  };\n  SpeedDial.prototype.clearHorizontalPosition = function () {\n    this.popupEle.style.removeProperty(SDHORZDIST);\n    this.popupEle.classList.remove(SDRIGHT, SDLEFT, SDCENTER);\n    this.popupEle.classList.remove(SDVERTICALRIGHT, SDHORIZONTALLEFT, SDHORIZONTALRIGHT);\n  };\n  SpeedDial.prototype.clearOverflow = function () {\n    this.popupEle.classList.remove(SDOVERFLOW, SDVERTOVERFLOW, SDHORZOVERFLOW);\n    this.popupEle.style.removeProperty(SDOVERFLOWLIMIT);\n  };\n  SpeedDial.prototype.hidePopupEle = function (e) {\n    var _this = this;\n    if (!this.popupEle || !this.isMenuOpen) {\n      return;\n    }\n    var eventArgs = {\n      element: this.popupEle,\n      event: e,\n      cancel: false\n    };\n    this.trigger('beforeClose', eventArgs, function (args) {\n      if (args.cancel) {\n        return;\n      }\n      if (_this.animation.effect !== 'None') {\n        var closeAnimation_1 = {\n          name: _this.animation.effect + 'Out',\n          timingFunction: 'easeOut'\n        };\n        var eleArray_1 = _this.popupTemplate ? [_this.popupEle.firstElementChild] : selectAll('.' + SDLI, _this.popupEle);\n        var timeOutInterval_1 = _this.animation.duration / (eleArray_1.length + 1);\n        closeAnimation_1.duration = 2 * timeOutInterval_1;\n        /* To keep the animation smooth, start the animation of the second element when animation first element is half completed */\n        var animateElement_1 = function animateElement_1(curIndex) {\n          var ele = eleArray_1[parseInt(curIndex.toString(), 10)];\n          closeAnimation_1.delay = curIndex === eleArray_1.length - 1 ? _this.animation.delay : 0;\n          closeAnimation_1.begin = function () {\n            if (curIndex === eleArray_1.length - 1) {\n              _this.startHide();\n            }\n          };\n          closeAnimation_1.end = function () {\n            ele.classList.add(SDHIDDEN);\n            if (curIndex === 0) {\n              _this.endHide();\n            }\n          };\n          new Animation(closeAnimation_1).animate(ele);\n          if (curIndex !== 0) {\n            var index_1 = curIndex - 1;\n            setTimeout(function () {\n              animateElement_1(index_1);\n            }, timeOutInterval_1);\n          }\n        };\n        animateElement_1(eleArray_1.length - 1);\n      } else {\n        _this.startHide();\n        if (!_this.popupTemplate) {\n          var ele = selectAll('.' + SDLI, _this.popupEle);\n          ele.forEach(function (element) {\n            element.classList.add(SDHIDDEN);\n          });\n        }\n        _this.endHide();\n      }\n    });\n  };\n  SpeedDial.prototype.startHide = function () {\n    this.element.setAttribute('aria-expanded', 'false');\n    this.removeFocus();\n    this.isMenuOpen = false;\n  };\n  SpeedDial.prototype.endHide = function () {\n    this.fab.setProperties({\n      iconCss: this.openIconCss\n    });\n    this.popupEle.classList.add(SDHIDDEN);\n    if (this.popupTemplate) {\n      this.setVisibility(true);\n    }\n    this.toggleOverlay();\n    if (this.popupTemplate) {\n      this.popupEle.removeAttribute('tabindex');\n    }\n    this.trigger('onClose', {\n      element: this.popupEle\n    });\n  };\n  SpeedDial.prototype.showPopupEle = function (e) {\n    var _this = this;\n    if (!this.popupEle || this.isMenuOpen) {\n      return;\n    }\n    var eventArgs = {\n      element: this.popupEle,\n      event: e,\n      cancel: false\n    };\n    this.trigger('beforeOpen', eventArgs, function (args) {\n      if (args.cancel) {\n        return;\n      }\n      if (_this.animation.effect !== 'None') {\n        var openAnimation_1 = {\n          name: _this.animation.effect + 'In',\n          timingFunction: 'easeIn'\n        };\n        var eleArray_2 = _this.popupTemplate ? [_this.popupEle.firstElementChild] : selectAll('.' + SDLI, _this.popupEle);\n        var timeOutInterval_2 = _this.animation.duration / (eleArray_2.length + 1);\n        openAnimation_1.duration = 2 * timeOutInterval_2;\n        /* To keep the animation smooth, start the animation of the second element when animation first element is half completed */\n        var animateElement_2 = function animateElement_2(curIndex) {\n          var ele = eleArray_2[parseInt(curIndex.toString(), 10)];\n          openAnimation_1.delay = curIndex === 0 ? _this.animation.delay : 0;\n          openAnimation_1.begin = function () {\n            if (curIndex === 0) {\n              _this.startShow();\n            }\n            ele.classList.remove(SDHIDDEN);\n          };\n          openAnimation_1.end = function () {\n            if (curIndex === eleArray_2.length - 1) {\n              _this.endShow();\n            }\n          };\n          new Animation(openAnimation_1).animate(ele);\n          if (curIndex !== eleArray_2.length - 1) {\n            var index_2 = curIndex + 1;\n            setTimeout(function () {\n              animateElement_2(index_2);\n            }, timeOutInterval_2);\n          }\n        };\n        animateElement_2(0);\n      } else {\n        _this.startShow();\n        if (!_this.popupTemplate) {\n          var ele = selectAll('.' + SDLI, _this.popupEle);\n          ele.forEach(function (element) {\n            element.classList.remove(SDHIDDEN);\n          });\n        }\n        _this.endShow();\n      }\n    });\n  };\n  SpeedDial.prototype.startShow = function () {\n    this.element.setAttribute('aria-expanded', 'true');\n    this.isMenuOpen = true;\n    this.toggleOverlay();\n    this.popupEle.classList.remove(SDHIDDEN);\n    if (this.popupTemplate) {\n      this.setVisibility(false);\n    }\n  };\n  SpeedDial.prototype.endShow = function () {\n    if (this.closeIconCss) {\n      this.fab.setProperties({\n        iconCss: this.closeIconCss\n      });\n    }\n    if (this.popupTemplate) {\n      this.popupEle.setAttribute('tabindex', '1');\n      this.popupEle.focus();\n    }\n    this.trigger('onOpen', {\n      element: this.popupEle\n    });\n  };\n  SpeedDial.prototype.toggleOverlay = function () {\n    if (!this.overlayEle) {\n      return;\n    }\n    this.overlayEle.classList[this.isMenuOpen ? 'remove' : 'add'](SDHIDDEN);\n  };\n  SpeedDial.prototype.removeOverlayEle = function () {\n    if (!this.overlayEle) {\n      return;\n    }\n    remove(this.overlayEle);\n    this.overlayEle = undefined;\n  };\n  SpeedDial.prototype.updatePopupItems = function () {\n    if (this.popupEle) {\n      this.hidePopupEle();\n      this.clearItems();\n      this.createItems();\n      this.updatePositionProperties();\n    } else {\n      this.createPopup();\n    }\n  };\n  SpeedDial.prototype.handleResize = function (e) {\n    if (!this.popupEle) {\n      return;\n    }\n    this.hidePopupEle(e);\n    this.clearOverflow();\n    this.setPositionProps();\n  };\n  SpeedDial.prototype.triggerItemClick = function (e, item) {\n    var target = e.target;\n    target = target.classList.contains(SDLI) ? target : closest(target, '.' + SDLI);\n    var eventArgs = {\n      element: target,\n      item: item,\n      event: e\n    };\n    this.trigger('clicked', eventArgs);\n    this.hidePopupEle(e);\n  };\n  /**\n   * Opens the SpeedDial popup to display to display the speed dial items or the popupTemplate.\n   *\n   * @returns {void}\n   */\n  SpeedDial.prototype.show = function () {\n    this.showPopupEle();\n  };\n  /**\n   * Closes the SpeedDial popup.\n   *\n   *@returns {void}\n   */\n  SpeedDial.prototype.hide = function () {\n    this.hidePopupEle();\n  };\n  /**\n   * Refreshes the button position of speed dial. You can call this method to re-position button when the target is resized.\n   *\n   *@returns {void}\n   */\n  SpeedDial.prototype.refreshPosition = function () {\n    this.fab.refreshPosition();\n    this.resizeHandler();\n  };\n  SpeedDial.prototype.resizeHandler = function (e) {\n    this.handleResize(e);\n  };\n  SpeedDial.prototype.clearItems = function () {\n    var liList = selectAll('.' + SDLI, this.popupEle);\n    liList.forEach(function (element) {\n      remove(element);\n    });\n  };\n  SpeedDial.prototype.unwireEvents = function () {\n    EventHandler.remove(window, 'resize', this.resizeHandler);\n    EventHandler.remove(document.body, 'click', this.bodyClickHandler);\n    if (this.opensOnHover) {\n      this.unwireFabHover();\n    } else {\n      this.unwireFabClick();\n    }\n  };\n  SpeedDial.prototype.unwireFabClick = function () {\n    EventHandler.remove(this.fab.element, 'click', this.fabClick);\n  };\n  SpeedDial.prototype.unwireFabHover = function () {\n    this.popupEle.classList.remove(HOVERSD);\n    EventHandler.remove(this.fab.element, 'mouseover', this.mouseOverHandle);\n    EventHandler.remove(this.element, 'mouseleave', this.mouseLeaveHandle);\n  };\n  SpeedDial.prototype.unwirePopupEvents = function () {\n    if (isRippleEnabled) {\n      this.removeRippleEffect();\n    }\n    this.keyboardModule.destroy();\n    this.popupKeyboardModule.destroy();\n    EventHandler.remove(this.popupEle, 'click', this.popupClick);\n    EventHandler.remove(this.popupEle, 'mouseleave', this.popupMouseLeaveHandle);\n  };\n  SpeedDial.prototype.destroy = function () {\n    var _this = this;\n    _super.prototype.destroy.call(this);\n    this.unwireEvents();\n    ['aria-expanded', 'aria-haspopup', 'aria-controls'].forEach(function (attr) {\n      _this.element.removeAttribute(attr);\n    });\n    if (this.popupEle) {\n      this.unwirePopupEvents();\n      remove(this.popupEle);\n      this.popupEle = undefined;\n    }\n    this.removeOverlayEle();\n    this.fab.destroy();\n    this.fab = undefined;\n  };\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param  {SpeedDialModel} newProp - Specifies new properties\n   * @param  {SpeedDialModel} oldProp - Specifies old properties\n   * @returns {void}\n   * @private\n   */\n  SpeedDial.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var fabProplist = ['content', 'cssClass', 'disabled', 'enablePersistence', 'enableRtl', 'iconPosition', 'position', 'target', 'template', 'title', 'visible'];\n    var fabModel = extend({}, newProp);\n    for (var _i = 0, _a = Object.keys(fabModel); _i < _a.length; _i++) {\n      var prop = _a[_i];\n      if (fabProplist.indexOf(prop) < 0) {\n        deleteObject(fabModel, prop);\n      }\n    }\n    this.fab.setProperties(fabModel);\n    for (var _b = 0, _c = Object.keys(newProp); _b < _c.length; _b++) {\n      var prop = _c[_b];\n      switch (prop) {\n        case 'cssClass':\n          if (!this.popupEle) {\n            break;\n          }\n          if (oldProp.cssClass) {\n            removeClass(this.overlayEle ? [this.popupEle, this.overlayEle] : [this.popupEle], oldProp.cssClass.split(' '));\n          }\n          if (newProp.cssClass) {\n            addClass(this.overlayEle ? [this.popupEle, this.overlayEle] : [this.popupEle], newProp.cssClass.split(' '));\n          }\n          break;\n        case 'visible':\n        case 'disabled':\n          this.hide();\n          break;\n        case 'enableRtl':\n          if (!this.popupEle) {\n            break;\n          }\n          this.setRTL();\n          break;\n        case 'openIconCss':\n          if (!this.isMenuOpen) {\n            this.fab.setProperties({\n              iconCss: this.openIconCss\n            });\n          }\n          break;\n        case 'closeIconCss':\n          if (this.isMenuOpen) {\n            this.fab.setProperties({\n              iconCss: this.closeIconCss\n            });\n          }\n          break;\n        case 'position':\n          if (!this.popupEle) {\n            break;\n          }\n          this.updatePositionProperties();\n          break;\n        case 'direction':\n          if (!this.popupEle || this.popupTemplate) {\n            break;\n          }\n          this.updatePositionProperties();\n          break;\n        case 'popupTemplate':\n          this.updatePopupTemplate();\n          break;\n        case 'target':\n          this.hidePopupEle();\n          this.checkTarget();\n          if (this.overlayEle) {\n            this.element.insertAdjacentElement('beforebegin', this.overlayEle);\n          }\n          if (!this.popupEle) {\n            break;\n          }\n          this.element.insertAdjacentElement('afterend', this.popupEle);\n          this.updatePositionProperties();\n          break;\n        case 'items':\n        case 'itemTemplate':\n          if (this.popupTemplate) {\n            break;\n          }\n          this.updatePopupItems();\n          break;\n        case 'modal':\n          if (newProp.modal) {\n            this.createOverlay();\n          } else {\n            this.removeOverlayEle();\n          }\n          break;\n        case 'mode':\n          if (!this.popupEle || this.popupTemplate) {\n            break;\n          }\n          this.popupEle.classList.remove(RADIALSD, LINEARSD);\n          this.popupEle.classList.add(this.mode === 'Radial' ? RADIALSD : LINEARSD);\n          this.updatePositionProperties();\n          break;\n        case 'radialSettings':\n          if (this.popupEle && this.mode === 'Radial' && !this.popupTemplate) {\n            this.setRadialPosition();\n          }\n          break;\n        case 'opensOnHover':\n          if (this.opensOnHover) {\n            this.unwireFabClick();\n            this.wireFabHover();\n          } else {\n            this.unwireFabHover();\n            this.wireFabClick();\n          }\n          break;\n      }\n    }\n  };\n  __decorate([Complex({}, SpeedDialAnimationSettings)], SpeedDial.prototype, \"animation\", void 0);\n  __decorate([Property('')], SpeedDial.prototype, \"content\", void 0);\n  __decorate([Property('')], SpeedDial.prototype, \"closeIconCss\", void 0);\n  __decorate([Property('')], SpeedDial.prototype, \"cssClass\", void 0);\n  __decorate([Property('Auto')], SpeedDial.prototype, \"direction\", void 0);\n  __decorate([Property(false)], SpeedDial.prototype, \"disabled\", void 0);\n  __decorate([Property('Left')], SpeedDial.prototype, \"iconPosition\", void 0);\n  __decorate([Collection([], SpeedDialItem)], SpeedDial.prototype, \"items\", void 0);\n  __decorate([Property('')], SpeedDial.prototype, \"itemTemplate\", void 0);\n  __decorate([Property('Linear')], SpeedDial.prototype, \"mode\", void 0);\n  __decorate([Property('')], SpeedDial.prototype, \"openIconCss\", void 0);\n  __decorate([Property(false)], SpeedDial.prototype, \"opensOnHover\", void 0);\n  __decorate([Property('BottomRight')], SpeedDial.prototype, \"position\", void 0);\n  __decorate([Property(false)], SpeedDial.prototype, \"modal\", void 0);\n  __decorate([Property('')], SpeedDial.prototype, \"popupTemplate\", void 0);\n  __decorate([Complex({}, RadialSettings)], SpeedDial.prototype, \"radialSettings\", void 0);\n  __decorate([Property('')], SpeedDial.prototype, \"target\", void 0);\n  __decorate([Property(true)], SpeedDial.prototype, \"visible\", void 0);\n  __decorate([Event()], SpeedDial.prototype, \"beforeClose\", void 0);\n  __decorate([Event()], SpeedDial.prototype, \"beforeItemRender\", void 0);\n  __decorate([Event()], SpeedDial.prototype, \"beforeOpen\", void 0);\n  __decorate([Event()], SpeedDial.prototype, \"created\", void 0);\n  __decorate([Event()], SpeedDial.prototype, \"clicked\", void 0);\n  __decorate([Event()], SpeedDial.prototype, \"onClose\", void 0);\n  __decorate([Event()], SpeedDial.prototype, \"onOpen\", void 0);\n  SpeedDial = __decorate([NotifyPropertyChanges], SpeedDial);\n  return SpeedDial;\n}(Component);\nexport { SpeedDial };","map":null,"metadata":{},"sourceType":"module"}