{"ast":null,"code":"var List = require('../common/List');\nfunction getFirstMatchNode(matchNode) {\n  if ('node' in matchNode) {\n    return matchNode.node;\n  }\n  return getFirstMatchNode(matchNode.match[0]);\n}\nfunction getLastMatchNode(matchNode) {\n  if ('node' in matchNode) {\n    return matchNode.node;\n  }\n  return getLastMatchNode(matchNode.match[matchNode.match.length - 1]);\n}\nfunction matchFragments(lexer, ast, match, type, name) {\n  function findFragments(matchNode) {\n    if (matchNode.syntax !== null && matchNode.syntax.type === type && matchNode.syntax.name === name) {\n      var start = getFirstMatchNode(matchNode);\n      var end = getLastMatchNode(matchNode);\n      lexer.syntax.walk(ast, function (node, item, list) {\n        if (node === start) {\n          var nodes = new List();\n          do {\n            nodes.appendData(item.data);\n            if (item.data === end) {\n              break;\n            }\n            item = item.next;\n          } while (item !== null);\n          fragments.push({\n            parent: list,\n            nodes: nodes\n          });\n        }\n      });\n    }\n    if (Array.isArray(matchNode.match)) {\n      matchNode.match.forEach(findFragments);\n    }\n  }\n  var fragments = [];\n  if (match.matched !== null) {\n    findFragments(match.matched);\n  }\n  return fragments;\n}\nmodule.exports = {\n  matchFragments: matchFragments\n};","map":null,"metadata":{},"sourceType":"script"}