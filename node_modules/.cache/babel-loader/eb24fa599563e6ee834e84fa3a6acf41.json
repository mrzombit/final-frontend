{"ast":null,"code":"import _readOnlyError from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\nimport _slicedToArray from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchProjectById, projectUpdated, updateProject } from \"../../../features/projectsSlice\";\nimport BIZTOOL_PAGE_CONFIG from \"../../../pages/bizTools/pageConfig\";\nexport default function checkbizFormula() {\n  var dispatch = useDispatch();\n  var selectedProject = useSelector(function (state) {\n    return state.projects.selectedProject;\n  });\n  var _useState = useState({\n      user: false,\n      projects: false\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoaded = _useState2[0],\n    setIsLoaded = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    reload = _useState4[0],\n    setReload = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    newRevenuePerService = _useState6[0],\n    setNewRevenuePerService = _useState6[1];\n  useEffect(function () {\n    if (isLoaded.projects) {\n      dispatch(fetchProjectById(selectedProject._id));\n      setIsLoaded({\n        user: true,\n        project: true\n      });\n    }\n    if (!reload) {\n      dispatch(fetchProjectById(selectedProject._id));\n      setReload(true);\n    }\n    setModelConfig(selectedProject.model_config);\n    setTableRevenueData(selectedProject.revenue);\n    setTableExpenseData(selectedProject.expense);\n    setTableMiscellaneousData(selectedProject.miscellaneous);\n  }, [selectedProject]);\n  var _useState7 = useState(selectedProject.model_config),\n    _useState8 = _slicedToArray(_useState7, 2),\n    modelConfig = _useState8[0],\n    setModelConfig = _useState8[1];\n  var _useState9 = useState(selectedProject.revenue),\n    _useState10 = _slicedToArray(_useState9, 2),\n    tableRevenueData = _useState10[0],\n    setTableRevenueData = _useState10[1];\n  var _useState11 = useState(selectedProject.expense),\n    _useState12 = _slicedToArray(_useState11, 2),\n    tableExpenseData = _useState12[0],\n    setTableExpenseData = _useState12[1];\n  var _useState13 = useState(selectedProject.miscellaneous),\n    _useState14 = _slicedToArray(_useState13, 2),\n    tableMiscellaneousData = _useState14[0],\n    setTableMiscellaneousData = _useState14[1];\n  function calculateRevenue() {\n    var totalRevenue = [];\n    var totalRevenue_MIN = [];\n    var totalFixedCost_MIN = [];\n    var totalValue = 0;\n    var totalValue_MIN = 0;\n    var sum_product_revenue = 0; //max\n    var sum_product_revenue_MIN = 0;\n    var sum_service_revenue = 0;\n    var sum_service_revenue_MIN = 0;\n    tableRevenueData.product_tables.forEach(function (tableProduct) {\n      tableProduct.products.forEach(function (eachProduct) {\n        if (eachProduct.revenue_per_unit && typeof eachProduct.revenue_per_unit === \"string\") {\n          if (eachProduct.revenue_per_unit.includes(\"-\")) {\n            var _eachProduct$revenue_ = eachProduct.revenue_per_unit.split(\"-\").map(Number),\n              _eachProduct$revenue_2 = _slicedToArray(_eachProduct$revenue_, 2),\n              min = _eachProduct$revenue_2[0],\n              max = _eachProduct$revenue_2[1];\n            sum_product_revenue += max;\n            sum_product_revenue_MIN += min;\n            console.log(\"G\");\n          } else {\n            sum_product_revenue += eachProduct.revenue_per_unit;\n            sum_product_revenue_MIN += eachProduct.revenue_per_unit;\n          }\n        }\n      });\n    });\n    tableRevenueData.service_tables.forEach(function (tableService) {\n      tableService.services.forEach(function (eachService) {\n        sum_service_revenue += eachService.revenue_per_service - eachService.revenue_per_service * eachService.cost_per_service / 100;\n        // if (eachService.revenue_per_service && typeof eachService.revenue_per_service === \"string\") {\n        //   if (eachService.revenue_per_service.includes(\"-\")) {\n        //     // let [min, max] = eachProduct.revenue_per_unit.split(\"-\").map(Number);\n        //     // sum_product_revenue += max\n        //     // sum_product_revenue_MIN += min\n        //     console.log(\"GG\")\n        //   } else {\n        //     sum_service_revenue += eachService.revenue_per_service\n        //     sum_service_revenue_MIN += eachService.revenue_per_service\n        //   }\n        // }\n      });\n    });\n\n    totalValue = sum_product_revenue + sum_service_revenue;\n    totalValue_MIN = sum_product_revenue_MIN + sum_service_revenue;\n    totalRevenue.push(totalValue);\n    totalRevenue_MIN.push(totalValue_MIN);\n    for (var i = 1; i < modelConfig.projection_period; i++) {\n      // totalValue += totalValue*(increase / 100)\n      // increase += increase\n      totalRevenue.push(totalValue);\n      totalRevenue_MIN.push(totalValue_MIN);\n    }\n    return {\n      totalRevenue: totalRevenue,\n      totalRevenue_MIN: totalRevenue_MIN\n    };\n  }\n  function calculateTotalFixdcost() {\n    var totalFixedCost = [];\n    var sum_fixed_cost = 0;\n    var sum_investment = 0;\n    var increase = 0;\n    // modelConfig.projection_period\n\n    tableExpenseData.fixed_cost_tables.forEach(function (tableFixedCost) {\n      tableFixedCost.fixed_costs.forEach(function (eachFixedCost) {\n        sum_fixed_cost += eachFixedCost.amount;\n        increase = eachFixedCost.cost_increase;\n      });\n    });\n    tableExpenseData.investment_tables.forEach(function (table) {\n      table.investments.forEach(function (eachData) {\n        sum_investment += eachData.amount;\n      });\n    });\n\n    // ปีแรก\n    // totalFixedCost.push(sum_fixed_cost + sum_investment);\n    totalFixedCost.push(sum_fixed_cost);\n    for (var i = 1; i < modelConfig.projection_period; i++) {\n      sum_fixed_cost += sum_fixed_cost * (increase / 100);\n      increase += increase;\n      totalFixedCost.push(sum_fixed_cost);\n    }\n    return totalFixedCost;\n  }\n  function calculateYearRange() {\n    var yearRange = [];\n    var yearStart = parseInt(modelConfig.start_date.slice(0, 4));\n    for (var i = 0; i < modelConfig.projection_period; i++) {\n      yearRange.push(yearStart);\n      yearStart += 1;\n    }\n    return yearRange;\n  }\n  function calculateInvestment() {\n    var totalInvestment = [0, 0, 0];\n    tableExpenseData.investment_tables.map(function (table) {\n      table.investments.map(function (eachCost) {\n        totalInvestment + eachCost.amount, _readOnlyError(\"totalInvestment\");\n      });\n    });\n    totalInvestment.unshift(totalInvestment);\n  }\n  function calculateCFO() {\n    var totalCFO = [];\n    var sum_fixed_cost = 0;\n    var increase = 0;\n    var sum_service_revenue = 0;\n    var sum_product_revenue = 0;\n    tableRevenueData.service_tables.forEach(function (tableService) {\n      tableService.services.forEach(function (eachService) {\n        sum_service_revenue += eachService.revenue_per_service;\n      });\n    });\n    tableRevenueData.product_tables.forEach(function (tableProduct) {\n      tableProduct.products.forEach(function (eachProduct) {\n        sum_product_revenue += eachProduct.revenue_per_unit;\n      });\n    });\n    tableExpenseData.fixed_cost_tables.map(function (tableFixedCost) {\n      tableFixedCost.fixed_costs.map(function (eachFixedCost) {\n        sum_fixed_cost += eachFixedCost.amount;\n        increase = eachFixedCost.cost_increase;\n      });\n    });\n    totalCFO.push(sum_service_revenue + sum_product_revenue - sum_fixed_cost);\n    for (var i = 1; i < modelConfig.projection_period; i++) {\n      sum_fixed_cost += sum_fixed_cost * (increase / 100);\n      increase += increase;\n      totalCFO.push(sum_service_revenue + sum_product_revenue - sum_fixed_cost);\n    }\n    return totalCFO;\n  }\n  function calculateCFI() {\n    var totalCFI = [0, 0, 0];\n    var sum_investment = 0;\n    tableExpenseData.investment_tables.map(function (table) {\n      table.investments.map(function (eachData) {\n        sum_investment += eachData.amount;\n      });\n    });\n    totalCFI.unshift(-sum_investment);\n    return totalCFI;\n  }\n  function calculateCFF() {\n    var totalCFF = [];\n    var total = 0;\n    var increase = 0;\n    var sum_debt = 0;\n    var sum_equity = 0;\n    tableMiscellaneousData.debt_issuance.forEach(function (table) {\n      table.payments.map(function (eachData) {\n        totalCFF.push(-eachData.amount);\n      });\n    });\n    return totalCFF;\n  }\n  return {\n    calculateInvestment: calculateInvestment,\n    calculateCFO: calculateCFO,\n    calculateCFI: calculateCFI,\n    calculateCFF: calculateCFF,\n    calculateYearRange: calculateYearRange,\n    calculateRevenue: calculateRevenue,\n    calculateTotalFixdcost: calculateTotalFixdcost\n  };\n}\n\n//  named exports\n// export {\n//     sum_revenue_service, sum_revenue_product, sum_revenue,\n//     sum_fixed_cost, fixed_cost_per_years, revenue_per_years,\n//     total_income,\n// };","map":{"version":3,"names":["useEffect","useState","useDispatch","useSelector","fetchProjectById","projectUpdated","updateProject","BIZTOOL_PAGE_CONFIG","checkbizFormula","dispatch","selectedProject","state","projects","_useState","user","_useState2","_slicedToArray","isLoaded","setIsLoaded","_useState3","_useState4","reload","setReload","_useState5","_useState6","newRevenuePerService","setNewRevenuePerService","_id","project","setModelConfig","model_config","setTableRevenueData","revenue","setTableExpenseData","expense","setTableMiscellaneousData","miscellaneous","_useState7","_useState8","modelConfig","_useState9","_useState10","tableRevenueData","_useState11","_useState12","tableExpenseData","_useState13","_useState14","tableMiscellaneousData","calculateRevenue","totalRevenue","totalRevenue_MIN","totalFixedCost_MIN","totalValue","totalValue_MIN","sum_product_revenue","sum_product_revenue_MIN","sum_service_revenue","sum_service_revenue_MIN","product_tables","forEach","tableProduct","products","eachProduct","revenue_per_unit","includes","_eachProduct$revenue_","split","map","Number","_eachProduct$revenue_2","min","max","console","log","service_tables","tableService","services","eachService","revenue_per_service","cost_per_service","push","i","projection_period","calculateTotalFixdcost","totalFixedCost","sum_fixed_cost","sum_investment","increase","fixed_cost_tables","tableFixedCost","fixed_costs","eachFixedCost","amount","cost_increase","investment_tables","table","investments","eachData","calculateYearRange","yearRange","yearStart","parseInt","start_date","slice","calculateInvestment","totalInvestment","eachCost","_readOnlyError","unshift","calculateCFO","totalCFO","calculateCFI","totalCFI","calculateCFF","totalCFF","total","sum_debt","sum_equity","debt_issuance","payments"],"sources":["/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/src/components/checkbiz/checkbizFormula/checkbizFormula.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchProjectById, projectUpdated, updateProject } from \"../../../features/projectsSlice\"\nimport BIZTOOL_PAGE_CONFIG from \"../../../pages/bizTools/pageConfig\";\n\nexport default function checkbizFormula() {\n\n  const dispatch = useDispatch();\n  const selectedProject = useSelector((state) => state.projects.selectedProject);\n  const [isLoaded, setIsLoaded] = useState({ user: false, projects: false });\n  const [reload, setReload] = useState(false)\n\n  const [newRevenuePerService, setNewRevenuePerService] = useState(null);\n\n  useEffect(() => {\n\n    if (isLoaded.projects) {\n      dispatch(fetchProjectById(selectedProject._id));\n      setIsLoaded({ user: true, project: true });\n    }\n    if (!reload) {\n      dispatch(fetchProjectById(selectedProject._id));\n      setReload(true);\n    }\n    setModelConfig(selectedProject.model_config);\n    setTableRevenueData(selectedProject.revenue);\n    setTableExpenseData(selectedProject.expense);\n    setTableMiscellaneousData(selectedProject.miscellaneous);\n  }, [selectedProject]);\n\n  const [modelConfig, setModelConfig] = useState(\n    selectedProject.model_config\n  );\n  const [tableRevenueData, setTableRevenueData] = useState(\n    selectedProject.revenue\n  );\n  const [tableExpenseData, setTableExpenseData] = useState(\n    selectedProject.expense\n  );\n  const [tableMiscellaneousData, setTableMiscellaneousData] = useState(\n    selectedProject.miscellaneous\n  );\n\n\n\n\n  function calculateRevenue() {\n    const totalRevenue = [];\n    const totalRevenue_MIN = [];\n    const totalFixedCost_MIN = [];\n    let totalValue = 0;\n    let totalValue_MIN = 0;\n\n    let sum_product_revenue = 0; //max\n    let sum_product_revenue_MIN = 0;\n\n    let sum_service_revenue = 0;\n    let sum_service_revenue_MIN = 0;\n\n    tableRevenueData.product_tables.forEach((tableProduct) => {\n      tableProduct.products.forEach((eachProduct) => {\n        if (eachProduct.revenue_per_unit && typeof eachProduct.revenue_per_unit === \"string\") {\n          if (eachProduct.revenue_per_unit.includes(\"-\")) {\n            let [min, max] = eachProduct.revenue_per_unit.split(\"-\").map(Number);\n            sum_product_revenue += max\n            sum_product_revenue_MIN += min\n            console.log(\"G\")\n          } else {\n            sum_product_revenue += eachProduct.revenue_per_unit\n            sum_product_revenue_MIN += eachProduct.revenue_per_unit\n          }\n        }\n      });\n    });\n    tableRevenueData.service_tables.forEach((tableService) => {\n      tableService.services.forEach((eachService) => {\n\n        sum_service_revenue += (eachService.revenue_per_service - (eachService.revenue_per_service * eachService.cost_per_service / 100));\n        // if (eachService.revenue_per_service && typeof eachService.revenue_per_service === \"string\") {\n        //   if (eachService.revenue_per_service.includes(\"-\")) {\n        //     // let [min, max] = eachProduct.revenue_per_unit.split(\"-\").map(Number);\n        //     // sum_product_revenue += max\n        //     // sum_product_revenue_MIN += min\n        //     console.log(\"GG\")\n        //   } else {\n        //     sum_service_revenue += eachService.revenue_per_service\n        //     sum_service_revenue_MIN += eachService.revenue_per_service\n        //   }\n        // }\n\n      });\n    });\n\n    totalValue = sum_product_revenue + sum_service_revenue\n    totalValue_MIN = sum_product_revenue_MIN + sum_service_revenue\n\n    totalRevenue.push(totalValue);\n    totalRevenue_MIN.push(totalValue_MIN);\n\n    for (let i = 1; i < modelConfig.projection_period; i++) {\n      // totalValue += totalValue*(increase / 100)\n      // increase += increase\n      totalRevenue.push(totalValue);\n      totalRevenue_MIN.push(totalValue_MIN);\n    }\n\n    return {\n      totalRevenue: totalRevenue,\n      totalRevenue_MIN: totalRevenue_MIN\n    }\n  }\n\n\n\n  function calculateTotalFixdcost() {\n    const totalFixedCost = [];\n    let sum_fixed_cost = 0;\n    let sum_investment = 0;\n    let increase = 0;\n    // modelConfig.projection_period\n\n    tableExpenseData.fixed_cost_tables.forEach((tableFixedCost) => {\n      tableFixedCost.fixed_costs.forEach((eachFixedCost) => {\n        sum_fixed_cost += eachFixedCost.amount;\n        increase = eachFixedCost.cost_increase\n      });\n    });\n\n    tableExpenseData.investment_tables.forEach((table) => {\n      table.investments.forEach((eachData) => {\n        sum_investment += eachData.amount\n      })\n    })\n\n    // ปีแรก\n    // totalFixedCost.push(sum_fixed_cost + sum_investment);\n    totalFixedCost.push(sum_fixed_cost);\n\n    for (let i = 1; i < modelConfig.projection_period; i++) {\n      sum_fixed_cost += sum_fixed_cost * (increase / 100)\n      increase += increase\n      totalFixedCost.push(sum_fixed_cost);\n    }\n    return totalFixedCost\n  }\n\n\n\n\n  function calculateYearRange() {\n    const yearRange = []\n    let yearStart = parseInt(modelConfig.start_date.slice(0, 4));\n    for (let i = 0; i < modelConfig.projection_period; i++) {\n      yearRange.push(yearStart);\n      yearStart += 1;\n    }\n    return yearRange\n  }\n\n\n  function calculateInvestment() {\n    const totalInvestment = [0, 0, 0];\n    tableExpenseData.investment_tables.map((table) => {\n      table.investments.map((eachCost) => {\n        totalInvestment += eachCost.amount;\n      });\n    });\n    totalInvestment.unshift(totalInvestment)\n  }\n\n\n\n\n  function calculateCFO() {\n    const totalCFO = [];\n    let sum_fixed_cost = 0;\n    let increase = 0;\n    let sum_service_revenue = 0;\n    let sum_product_revenue = 0;\n\n    tableRevenueData.service_tables.forEach((tableService) => {\n      tableService.services.forEach((eachService) => {\n        sum_service_revenue += eachService.revenue_per_service;\n      });\n    });\n\n    tableRevenueData.product_tables.forEach((tableProduct) => {\n      tableProduct.products.forEach((eachProduct) => {\n        sum_product_revenue += eachProduct.revenue_per_unit;\n      });\n    });\n\n    tableExpenseData.fixed_cost_tables.map((tableFixedCost) => {\n      tableFixedCost.fixed_costs.map((eachFixedCost) => {\n        sum_fixed_cost += eachFixedCost.amount;\n        increase = eachFixedCost.cost_increase\n      });\n    });\n\n    totalCFO.push(sum_service_revenue + sum_product_revenue - sum_fixed_cost);\n\n    for (let i = 1; i < modelConfig.projection_period; i++) {\n      sum_fixed_cost += sum_fixed_cost * (increase / 100)\n      increase += increase\n      totalCFO.push(sum_service_revenue + sum_product_revenue - sum_fixed_cost);\n    }\n    return totalCFO\n  }\n\n  function calculateCFI() {\n    const totalCFI = [0, 0, 0];\n    let sum_investment = 0;\n    tableExpenseData.investment_tables.map((table) => {\n      table.investments.map((eachData) => {\n        sum_investment += eachData.amount\n      })\n    })\n    totalCFI.unshift(-sum_investment);\n    return totalCFI\n  }\n\n  function calculateCFF() {\n    const totalCFF = [];\n    let total = 0;\n    let increase = 0;\n    let sum_debt = 0;\n    let sum_equity = 0;\n\n    tableMiscellaneousData.debt_issuance.forEach((table) => {\n      table.payments.map((eachData) => {\n        totalCFF.push(-eachData.amount);\n      })\n    });\n    return totalCFF\n  }\n\n  return {\n    calculateInvestment, calculateCFO, calculateCFI, calculateCFF, calculateYearRange,\n    calculateRevenue,calculateTotalFixdcost,\n  };\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n//  named exports\n// export {\n//     sum_revenue_service, sum_revenue_product, sum_revenue,\n//     sum_fixed_cost, fixed_cost_per_years, revenue_per_years,\n//     total_income,\n// };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}