{"ast":null,"code":"import _classCallCheck from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport NodeType from './type';\nimport Node from './node';\n/**\n * TextNode to contain a text element in DOM tree.\n * @param {string} value [description]\n */\nvar TextNode = /*#__PURE__*/function (_Node) {\n  _inherits(TextNode, _Node);\n  function TextNode(rawText, parentNode) {\n    var _this;\n    _classCallCheck(this, TextNode);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TextNode).call(this, parentNode));\n    _this.rawText = rawText;\n    /**\n     * Node Type declaration.\n     * @type {Number}\n     */\n    _this.nodeType = NodeType.TEXT_NODE;\n    return _this;\n  }\n  /**\n   * Returns text with all whitespace trimmed except single leading/trailing non-breaking space\n   */\n  _createClass(TextNode, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.text;\n    }\n  }, {\n    key: \"trimmedText\",\n    get: function get() {\n      if (this._trimmedText !== undefined) return this._trimmedText;\n      var text = this.rawText;\n      var i = 0;\n      var startPos;\n      var endPos;\n      while (i >= 0 && i < text.length) {\n        if (/\\S/.test(text[i])) {\n          if (startPos === undefined) {\n            startPos = i;\n            i = text.length;\n          } else {\n            endPos = i;\n            i = void 0;\n          }\n        }\n        if (startPos === undefined) i++;else i--;\n      }\n      if (startPos === undefined) startPos = 0;\n      if (endPos === undefined) endPos = text.length - 1;\n      var hasLeadingSpace = startPos > 0 && /[^\\S\\r\\n]/.test(text[startPos - 1]);\n      var hasTrailingSpace = endPos < text.length - 1 && /[^\\S\\r\\n]/.test(text[endPos + 1]);\n      this._trimmedText = (hasLeadingSpace ? ' ' : '') + text.slice(startPos, endPos + 1) + (hasTrailingSpace ? ' ' : '');\n      return this._trimmedText;\n    }\n    /**\n     * Get unescaped text value of current node and its children.\n     * @return {string} text content\n     */\n  }, {\n    key: \"text\",\n    get: function get() {\n      return this.rawText;\n    }\n    /**\n     * Detect if the node contains only white space.\n     * @return {bool}\n     */\n  }, {\n    key: \"isWhitespace\",\n    get: function get() {\n      return /^(\\s|&nbsp;)*$/.test(this.rawText);\n    }\n  }]);\n  return TextNode;\n}(Node);\nexport { TextNode as default };","map":null,"metadata":{},"sourceType":"module"}