{"ast":null,"code":"/** Types of elements found in htmlparser2's DOM */\nexport var ElementType;\n(function (ElementType) {\n  /** Type for the root element of a document */\n  ElementType[\"Root\"] = \"root\";\n  /** Type for Text */\n  ElementType[\"Text\"] = \"text\";\n  /** Type for <? ... ?> */\n  ElementType[\"Directive\"] = \"directive\";\n  /** Type for <!-- ... --> */\n  ElementType[\"Comment\"] = \"comment\";\n  /** Type for <script> tags */\n  ElementType[\"Script\"] = \"script\";\n  /** Type for <style> tags */\n  ElementType[\"Style\"] = \"style\";\n  /** Type for Any tag */\n  ElementType[\"Tag\"] = \"tag\";\n  /** Type for <![CDATA[ ... ]]> */\n  ElementType[\"CDATA\"] = \"cdata\";\n  /** Type for <!doctype ...> */\n  ElementType[\"Doctype\"] = \"doctype\";\n})(ElementType || (ElementType = {}));\n/**\n * Tests whether an element is a tag or not.\n *\n * @param elem Element to test\n */\nexport function isTag(elem) {\n  return elem.type === ElementType.Tag || elem.type === ElementType.Script || elem.type === ElementType.Style;\n}\n// Exports for backwards compatibility\n/** Type for the root element of a document */\nexport var Root = ElementType.Root;\n/** Type for Text */\nexport var Text = ElementType.Text;\n/** Type for <? ... ?> */\nexport var Directive = ElementType.Directive;\n/** Type for <!-- ... --> */\nexport var Comment = ElementType.Comment;\n/** Type for <script> tags */\nexport var Script = ElementType.Script;\n/** Type for <style> tags */\nexport var Style = ElementType.Style;\n/** Type for Any tag */\nexport var Tag = ElementType.Tag;\n/** Type for <![CDATA[ ... ]]> */\nexport var CDATA = ElementType.CDATA;\n/** Type for <!doctype ...> */\nexport var Doctype = ElementType.Doctype;","map":null,"metadata":{},"sourceType":"module"}