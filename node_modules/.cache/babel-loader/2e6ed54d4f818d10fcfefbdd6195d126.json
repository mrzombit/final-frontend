{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar css_what_1 = require(\"css-what\");\nvar procedure_1 = require(\"./procedure\");\nvar attributes = {\n  exists: 10,\n  equals: 8,\n  not: 7,\n  start: 6,\n  end: 6,\n  any: 5,\n  hyphen: 4,\n  element: 4\n};\n/**\n * Sort the parts of the passed selector,\n * as there is potential for optimization\n * (some types of selectors are faster than others)\n *\n * @param arr Selector to sort\n */\nfunction sortByProcedure(arr) {\n  var procs = arr.map(getProcedure);\n  for (var i = 1; i < arr.length; i++) {\n    var procNew = procs[i];\n    if (procNew < 0) continue;\n    for (var j = i - 1; j >= 0 && procNew < procs[j]; j--) {\n      var token = arr[j + 1];\n      arr[j + 1] = arr[j];\n      arr[j] = token;\n      procs[j + 1] = procs[j];\n      procs[j] = procNew;\n    }\n  }\n}\nexports.default = sortByProcedure;\nfunction getProcedure(token) {\n  var proc = procedure_1.procedure[token.type];\n  if (token.type === css_what_1.SelectorType.Attribute) {\n    proc = attributes[token.action];\n    if (proc === attributes.equals && token.name === \"id\") {\n      // Prefer ID selectors (eg. #ID)\n      proc = 9;\n    }\n    if (token.ignoreCase) {\n      /*\n       * IgnoreCase adds some overhead, prefer \"normal\" token\n       * this is a binary operation, to ensure it's still an int\n       */\n      proc >>= 1;\n    }\n  } else if (token.type === css_what_1.SelectorType.Pseudo) {\n    if (!token.data) {\n      proc = 3;\n    } else if (token.name === \"has\" || token.name === \"contains\") {\n      proc = 0; // Expensive in any case\n    } else if (Array.isArray(token.data)) {\n      // \"matches\" and \"not\"\n      proc = 0;\n      for (var i = 0; i < token.data.length; i++) {\n        // TODO better handling of complex selectors\n        if (token.data[i].length !== 1) continue;\n        var cur = getProcedure(token.data[i][0]);\n        // Avoid executing :has or :contains\n        if (cur === 0) {\n          proc = 0;\n          break;\n        }\n        if (cur > proc) proc = cur;\n      }\n      if (token.data.length > 1 && proc > 0) proc -= 1;\n    } else {\n      proc = 1;\n    }\n  }\n  return proc;\n}","map":null,"metadata":{},"sourceType":"script"}