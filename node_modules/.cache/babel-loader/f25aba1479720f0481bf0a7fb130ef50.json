{"ast":null,"code":"var cmpChar = require('../../tokenizer').cmpChar;\nvar isDigit = require('../../tokenizer').isDigit;\nvar TYPE = require('../../tokenizer').TYPE;\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar IDENT = TYPE.Ident;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\nvar HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\nvar N = 0x006E; // U+006E LATIN SMALL LETTER N (n)\nvar DISALLOW_SIGN = true;\nvar ALLOW_SIGN = false;\nfunction checkInteger(offset, disallowSign) {\n  var pos = this.scanner.tokenStart + offset;\n  var code = this.scanner.source.charCodeAt(pos);\n  if (code === PLUSSIGN || code === HYPHENMINUS) {\n    if (disallowSign) {\n      this.error('Number sign is not allowed');\n    }\n    pos++;\n  }\n  for (; pos < this.scanner.tokenEnd; pos++) {\n    if (!isDigit(this.scanner.source.charCodeAt(pos))) {\n      this.error('Integer is expected', pos);\n    }\n  }\n}\nfunction checkTokenIsInteger(disallowSign) {\n  return checkInteger.call(this, 0, disallowSign);\n}\nfunction expectCharCode(offset, code) {\n  if (!cmpChar(this.scanner.source, this.scanner.tokenStart + offset, code)) {\n    var msg = '';\n    switch (code) {\n      case N:\n        msg = 'N is expected';\n        break;\n      case HYPHENMINUS:\n        msg = 'HyphenMinus is expected';\n        break;\n    }\n    this.error(msg, this.scanner.tokenStart + offset);\n  }\n}\n\n// ... <signed-integer>\n// ... ['+' | '-'] <signless-integer>\nfunction consumeB() {\n  var offset = 0;\n  var sign = 0;\n  var type = this.scanner.tokenType;\n  while (type === WHITESPACE || type === COMMENT) {\n    type = this.scanner.lookupType(++offset);\n  }\n  if (type !== NUMBER) {\n    if (this.scanner.isDelim(PLUSSIGN, offset) || this.scanner.isDelim(HYPHENMINUS, offset)) {\n      sign = this.scanner.isDelim(PLUSSIGN, offset) ? PLUSSIGN : HYPHENMINUS;\n      do {\n        type = this.scanner.lookupType(++offset);\n      } while (type === WHITESPACE || type === COMMENT);\n      if (type !== NUMBER) {\n        this.scanner.skip(offset);\n        checkTokenIsInteger.call(this, DISALLOW_SIGN);\n      }\n    } else {\n      return null;\n    }\n  }\n  if (offset > 0) {\n    this.scanner.skip(offset);\n  }\n  if (sign === 0) {\n    type = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n    if (type !== PLUSSIGN && type !== HYPHENMINUS) {\n      this.error('Number sign is expected');\n    }\n  }\n  checkTokenIsInteger.call(this, sign !== 0);\n  return sign === HYPHENMINUS ? '-' + this.consume(NUMBER) : this.consume(NUMBER);\n}\n\n// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb\nmodule.exports = {\n  name: 'AnPlusB',\n  structure: {\n    a: [String, null],\n    b: [String, null]\n  },\n  parse: function parse() {\n    /* eslint-disable brace-style*/\n    var start = this.scanner.tokenStart;\n    var a = null;\n    var b = null;\n\n    // <integer>\n    if (this.scanner.tokenType === NUMBER) {\n      checkTokenIsInteger.call(this, ALLOW_SIGN);\n      b = this.consume(NUMBER);\n    }\n\n    // -n\n    // -n <signed-integer>\n    // -n ['+' | '-'] <signless-integer>\n    // -n- <signless-integer>\n    // <dashndashdigit-ident>\n    else if (this.scanner.tokenType === IDENT && cmpChar(this.scanner.source, this.scanner.tokenStart, HYPHENMINUS)) {\n      a = '-1';\n      expectCharCode.call(this, 1, N);\n      switch (this.scanner.getTokenLength()) {\n        // -n\n        // -n <signed-integer>\n        // -n ['+' | '-'] <signless-integer>\n        case 2:\n          this.scanner.next();\n          b = consumeB.call(this);\n          break;\n\n        // -n- <signless-integer>\n        case 3:\n          expectCharCode.call(this, 2, HYPHENMINUS);\n          this.scanner.next();\n          this.scanner.skipSC();\n          checkTokenIsInteger.call(this, DISALLOW_SIGN);\n          b = '-' + this.consume(NUMBER);\n          break;\n\n        // <dashndashdigit-ident>\n        default:\n          expectCharCode.call(this, 2, HYPHENMINUS);\n          checkInteger.call(this, 3, DISALLOW_SIGN);\n          this.scanner.next();\n          b = this.scanner.substrToCursor(start + 2);\n      }\n    }\n\n    // '+'? n\n    // '+'? n <signed-integer>\n    // '+'? n ['+' | '-'] <signless-integer>\n    // '+'? n- <signless-integer>\n    // '+'? <ndashdigit-ident>\n    else if (this.scanner.tokenType === IDENT || this.scanner.isDelim(PLUSSIGN) && this.scanner.lookupType(1) === IDENT) {\n      var sign = 0;\n      a = '1';\n\n      // just ignore a plus\n      if (this.scanner.isDelim(PLUSSIGN)) {\n        sign = 1;\n        this.scanner.next();\n      }\n      expectCharCode.call(this, 0, N);\n      switch (this.scanner.getTokenLength()) {\n        // '+'? n\n        // '+'? n <signed-integer>\n        // '+'? n ['+' | '-'] <signless-integer>\n        case 1:\n          this.scanner.next();\n          b = consumeB.call(this);\n          break;\n\n        // '+'? n- <signless-integer>\n        case 2:\n          expectCharCode.call(this, 1, HYPHENMINUS);\n          this.scanner.next();\n          this.scanner.skipSC();\n          checkTokenIsInteger.call(this, DISALLOW_SIGN);\n          b = '-' + this.consume(NUMBER);\n          break;\n\n        // '+'? <ndashdigit-ident>\n        default:\n          expectCharCode.call(this, 1, HYPHENMINUS);\n          checkInteger.call(this, 2, DISALLOW_SIGN);\n          this.scanner.next();\n          b = this.scanner.substrToCursor(start + sign + 1);\n      }\n    }\n\n    // <ndashdigit-dimension>\n    // <ndash-dimension> <signless-integer>\n    // <n-dimension>\n    // <n-dimension> <signed-integer>\n    // <n-dimension> ['+' | '-'] <signless-integer>\n    else if (this.scanner.tokenType === DIMENSION) {\n      var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n      var sign = code === PLUSSIGN || code === HYPHENMINUS;\n      for (var i = this.scanner.tokenStart + sign; i < this.scanner.tokenEnd; i++) {\n        if (!isDigit(this.scanner.source.charCodeAt(i))) {\n          break;\n        }\n      }\n      if (i === this.scanner.tokenStart + sign) {\n        this.error('Integer is expected', this.scanner.tokenStart + sign);\n      }\n      expectCharCode.call(this, i - this.scanner.tokenStart, N);\n      a = this.scanner.source.substring(start, i);\n\n      // <n-dimension>\n      // <n-dimension> <signed-integer>\n      // <n-dimension> ['+' | '-'] <signless-integer>\n      if (i + 1 === this.scanner.tokenEnd) {\n        this.scanner.next();\n        b = consumeB.call(this);\n      } else {\n        expectCharCode.call(this, i - this.scanner.tokenStart + 1, HYPHENMINUS);\n\n        // <ndash-dimension> <signless-integer>\n        if (i + 2 === this.scanner.tokenEnd) {\n          this.scanner.next();\n          this.scanner.skipSC();\n          checkTokenIsInteger.call(this, DISALLOW_SIGN);\n          b = '-' + this.consume(NUMBER);\n        }\n        // <ndashdigit-dimension>\n        else {\n          checkInteger.call(this, i - this.scanner.tokenStart + 2, DISALLOW_SIGN);\n          this.scanner.next();\n          b = this.scanner.substrToCursor(i + 1);\n        }\n      }\n    } else {\n      this.error();\n    }\n    if (a !== null && a.charCodeAt(0) === PLUSSIGN) {\n      a = a.substr(1);\n    }\n    if (b !== null && b.charCodeAt(0) === PLUSSIGN) {\n      b = b.substr(1);\n    }\n    return {\n      type: 'AnPlusB',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      a: a,\n      b: b\n    };\n  },\n  generate: function generate(node) {\n    var a = node.a !== null && node.a !== undefined;\n    var b = node.b !== null && node.b !== undefined;\n    if (a) {\n      this.chunk(node.a === '+1' ? '+n' :\n      // eslint-disable-line operator-linebreak, indent\n      node.a === '1' ? 'n' :\n      // eslint-disable-line operator-linebreak, indent\n      node.a === '-1' ? '-n' :\n      // eslint-disable-line operator-linebreak, indent\n      node.a + 'n' // eslint-disable-line operator-linebreak, indent\n      );\n\n      if (b) {\n        b = String(node.b);\n        if (b.charAt(0) === '-' || b.charAt(0) === '+') {\n          this.chunk(b.charAt(0));\n          this.chunk(b.substr(1));\n        } else {\n          this.chunk('+');\n          this.chunk(b);\n        }\n      }\n    } else {\n      this.chunk(String(node.b));\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}