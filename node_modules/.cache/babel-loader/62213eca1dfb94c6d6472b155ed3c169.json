{"ast":null,"code":"var TYPE = require('../../tokenizer').TYPE;\nvar IDENT = TYPE.Ident;\nvar FUNCTION = TYPE.Function;\nvar COLON = TYPE.Colon;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\n\n// : [ <ident> | <function-token> <any-value>? ) ]\nmodule.exports = {\n  name: 'PseudoClassSelector',\n  structure: {\n    name: String,\n    children: [['Raw'], null]\n  },\n  parse: function parse() {\n    var start = this.scanner.tokenStart;\n    var children = null;\n    var name;\n    var nameLowerCase;\n    this.eat(COLON);\n    if (this.scanner.tokenType === FUNCTION) {\n      name = this.consumeFunctionName();\n      nameLowerCase = name.toLowerCase();\n      if (this.pseudo.hasOwnProperty(nameLowerCase)) {\n        this.scanner.skipSC();\n        children = this.pseudo[nameLowerCase].call(this);\n        this.scanner.skipSC();\n      } else {\n        children = this.createList();\n        children.push(this.Raw(this.scanner.tokenIndex, null, false));\n      }\n      this.eat(RIGHTPARENTHESIS);\n    } else {\n      name = this.consume(IDENT);\n    }\n    return {\n      type: 'PseudoClassSelector',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      name: name,\n      children: children\n    };\n  },\n  generate: function generate(node) {\n    this.chunk(':');\n    this.chunk(node.name);\n    if (node.children !== null) {\n      this.chunk('(');\n      this.children(node);\n      this.chunk(')');\n    }\n  },\n  walkContext: 'function'\n};","map":null,"metadata":{},"sourceType":"script"}