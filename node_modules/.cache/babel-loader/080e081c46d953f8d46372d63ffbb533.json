{"ast":null,"code":"import _classCallCheck from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/koonk/Documents/GitHub/CE65-20/packages/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode, isConstantNode, isOperatorNode, isParenthesisNode } from '../../utils/is.js';\nimport { map } from '../../utils/array.js';\nimport { escape } from '../../utils/string.js';\nimport { getSafeProperty, isSafeMethod } from '../../utils/customs.js';\nimport { getAssociativity, getPrecedence, isAssociativeWith, properties } from '../operators.js';\nimport { latexOperators } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'OperatorNode';\nvar dependencies = ['Node'];\nexport var createOperatorNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n  /**\n   * Returns true if the expression starts with a constant, under\n   * the current parenthesization:\n   * @param {Node} expression\n   * @param {string} parenthesis\n   * @return {boolean}\n   */\n  function startsWithConstant(expr, parenthesis) {\n    var curNode = expr;\n    if (parenthesis === 'auto') {\n      while (isParenthesisNode(curNode)) curNode = curNode.content;\n    }\n    if (isConstantNode(curNode)) return true;\n    if (isOperatorNode(curNode)) {\n      return startsWithConstant(curNode.args[0], parenthesis);\n    }\n    return false;\n  }\n\n  /**\n   * Calculate which parentheses are necessary. Gets an OperatorNode\n   * (which is the root of the tree) and an Array of Nodes\n   * (this.args) and returns an array where 'true' means that an argument\n   * has to be enclosed in parentheses whereas 'false' means the opposite.\n   *\n   * @param {OperatorNode} root\n   * @param {string} parenthesis\n   * @param {Node[]} args\n   * @param {boolean} latex\n   * @return {boolean[]}\n   * @private\n   */\n  function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {\n    // precedence of the root OperatorNode\n    var precedence = getPrecedence(root, parenthesis, implicit);\n    var associativity = getAssociativity(root, parenthesis);\n    if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') {\n      return args.map(function (arg) {\n        switch (arg.getContent().type) {\n          // Nodes that don't need extra parentheses\n          case 'ArrayNode':\n          case 'ConstantNode':\n          case 'SymbolNode':\n          case 'ParenthesisNode':\n            return false;\n          default:\n            return true;\n        }\n      });\n    }\n    var result;\n    switch (args.length) {\n      case 0:\n        result = [];\n        break;\n      case 1:\n        // unary operators\n        {\n          // precedence of the operand\n          var operandPrecedence = getPrecedence(args[0], parenthesis, implicit, root);\n\n          // handle special cases for LaTeX, where some of the parentheses aren't needed\n          if (latex && operandPrecedence !== null) {\n            var operandIdentifier;\n            var rootIdentifier;\n            if (parenthesis === 'keep') {\n              operandIdentifier = args[0].getIdentifier();\n              rootIdentifier = root.getIdentifier();\n            } else {\n              // Ignore Parenthesis Nodes when not in 'keep' mode\n              operandIdentifier = args[0].getContent().getIdentifier();\n              rootIdentifier = root.getContent().getIdentifier();\n            }\n            if (properties[precedence][rootIdentifier].latexLeftParens === false) {\n              result = [false];\n              break;\n            }\n            if (properties[operandPrecedence][operandIdentifier].latexParens === false) {\n              result = [false];\n              break;\n            }\n          }\n          if (operandPrecedence === null) {\n            // if the operand has no defined precedence, no parens are needed\n            result = [false];\n            break;\n          }\n          if (operandPrecedence <= precedence) {\n            // if the operands precedence is lower, parens are needed\n            result = [true];\n            break;\n          }\n\n          // otherwise, no parens needed\n          result = [false];\n        }\n        break;\n      case 2:\n        // binary operators\n        {\n          var lhsParens; // left hand side needs parenthesis?\n          // precedence of the left hand side\n          var lhsPrecedence = getPrecedence(args[0], parenthesis, implicit, root);\n          // is the root node associative with the left hand side\n          var assocWithLhs = isAssociativeWith(root, args[0], parenthesis);\n          if (lhsPrecedence === null) {\n            // if the left hand side has no defined precedence, no parens are needed\n            // FunctionNode for example\n            lhsParens = false;\n          } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {\n            // In case of equal precedence, if the root node is left associative\n            // parens are **never** necessary for the left hand side.\n            // If it is right associative however, parens are necessary\n            // if the root node isn't associative with the left hand side\n            lhsParens = true;\n          } else if (lhsPrecedence < precedence) {\n            lhsParens = true;\n          } else {\n            lhsParens = false;\n          }\n          var rhsParens; // right hand side needs parenthesis?\n          // precedence of the right hand side\n          var rhsPrecedence = getPrecedence(args[1], parenthesis, implicit, root);\n          // is the root node associative with the right hand side?\n          var assocWithRhs = isAssociativeWith(root, args[1], parenthesis);\n          if (rhsPrecedence === null) {\n            // if the right hand side has no defined precedence, no parens are needed\n            // FunctionNode for example\n            rhsParens = false;\n          } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {\n            // In case of equal precedence, if the root node is right associative\n            // parens are **never** necessary for the right hand side.\n            // If it is left associative however, parens are necessary\n            // if the root node isn't associative with the right hand side\n            rhsParens = true;\n          } else if (rhsPrecedence < precedence) {\n            rhsParens = true;\n          } else {\n            rhsParens = false;\n          }\n\n          // handle special cases for LaTeX, where some of the parentheses aren't needed\n          if (latex) {\n            var _rootIdentifier;\n            var lhsIdentifier;\n            var rhsIdentifier;\n            if (parenthesis === 'keep') {\n              _rootIdentifier = root.getIdentifier();\n              lhsIdentifier = root.args[0].getIdentifier();\n              rhsIdentifier = root.args[1].getIdentifier();\n            } else {\n              // Ignore ParenthesisNodes when not in 'keep' mode\n              _rootIdentifier = root.getContent().getIdentifier();\n              lhsIdentifier = root.args[0].getContent().getIdentifier();\n              rhsIdentifier = root.args[1].getContent().getIdentifier();\n            }\n            if (lhsPrecedence !== null) {\n              if (properties[precedence][_rootIdentifier].latexLeftParens === false) {\n                lhsParens = false;\n              }\n              if (properties[lhsPrecedence][lhsIdentifier].latexParens === false) {\n                lhsParens = false;\n              }\n            }\n            if (rhsPrecedence !== null) {\n              if (properties[precedence][_rootIdentifier].latexRightParens === false) {\n                rhsParens = false;\n              }\n              if (properties[rhsPrecedence][rhsIdentifier].latexParens === false) {\n                rhsParens = false;\n              }\n            }\n          }\n          result = [lhsParens, rhsParens];\n        }\n        break;\n      default:\n        if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') {\n          result = args.map(function (arg) {\n            var argPrecedence = getPrecedence(arg, parenthesis, implicit, root);\n            var assocWithArg = isAssociativeWith(root, arg, parenthesis);\n            var argAssociativity = getAssociativity(arg, parenthesis);\n            if (argPrecedence === null) {\n              // if the argument has no defined precedence, no parens are needed\n              return false;\n            } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {\n              return true;\n            } else if (argPrecedence < precedence) {\n              return true;\n            }\n            return false;\n          });\n        }\n        break;\n    }\n\n    // Handles an edge case of parentheses with implicit multiplication\n    // of ConstantNode.\n    // In that case, parenthesize ConstantNodes that follow an unparenthesized\n    // expression, even though they normally wouldn't be printed.\n    if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis !== 'all' && implicit === 'hide') {\n      for (var i = 1; i < result.length; ++i) {\n        if (startsWithConstant(args[i], parenthesis) && !result[i - 1] && (parenthesis !== 'keep' || !isParenthesisNode(args[i - 1]))) {\n          result[i] = true;\n        }\n      }\n    }\n    return result;\n  }\n  var OperatorNode = /*#__PURE__*/function (_Node) {\n    _inherits(OperatorNode, _Node);\n    /**\n     * @constructor OperatorNode\n     * @extends {Node}\n     * An operator with two arguments, like 2+3\n     *\n     * @param {string} op           Operator name, for example '+'\n     * @param {string} fn           Function name, for example 'add'\n     * @param {Node[]} args         Operator arguments\n     * @param {boolean} [implicit]  Is this an implicit multiplication?\n     * @param {boolean} [isPercentage] Is this an percentage Operation?\n     */\n    function OperatorNode(op, fn, args, implicit, isPercentage) {\n      var _this;\n      _classCallCheck(this, OperatorNode);\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(OperatorNode).call(this));\n      // validate input\n      if (typeof op !== 'string') {\n        throw new TypeError('string expected for parameter \"op\"');\n      }\n      if (typeof fn !== 'string') {\n        throw new TypeError('string expected for parameter \"fn\"');\n      }\n      if (!Array.isArray(args) || !args.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n      }\n      _this.implicit = implicit === true;\n      _this.isPercentage = isPercentage === true;\n      _this.op = op;\n      _this.fn = fn;\n      _this.args = args || [];\n      return _this;\n    }\n    _createClass(OperatorNode, [{\n      key: \"_compile\",\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n      value: function _compile(math, argNames) {\n        // validate fn\n        if (typeof this.fn !== 'string' || !isSafeMethod(math, this.fn)) {\n          if (!math[this.fn]) {\n            throw new Error('Function ' + this.fn + ' missing in provided namespace \"math\"');\n          } else {\n            throw new Error('No access to function \"' + this.fn + '\"');\n          }\n        }\n        var fn = getSafeProperty(math, this.fn);\n        var evalArgs = map(this.args, function (arg) {\n          return arg._compile(math, argNames);\n        });\n        if (evalArgs.length === 1) {\n          var evalArg0 = evalArgs[0];\n          return function evalOperatorNode(scope, args, context) {\n            return fn(evalArg0(scope, args, context));\n          };\n        } else if (evalArgs.length === 2) {\n          var _evalArg = evalArgs[0];\n          var evalArg1 = evalArgs[1];\n          return function evalOperatorNode(scope, args, context) {\n            return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));\n          };\n        } else {\n          return function evalOperatorNode(scope, args, context) {\n            return fn.apply(null, map(evalArgs, function (evalArg) {\n              return evalArg(scope, args, context);\n            }));\n          };\n        }\n      }\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        for (var i = 0; i < this.args.length; i++) {\n          callback(this.args[i], 'args[' + i + ']', this);\n        }\n      }\n      /**\n       * Create a new OperatorNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {OperatorNode} Returns a transformed copy of the node\n       */\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var args = [];\n        for (var i = 0; i < this.args.length; i++) {\n          args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n        }\n        return new OperatorNode(this.op, this.fn, args, this.implicit, this.isPercentage);\n      }\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {OperatorNode}\n       */\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit, this.isPercentage);\n      }\n      /**\n       * Check whether this is an unary OperatorNode:\n       * has exactly one argument, like `-a`.\n       * @return {boolean}\n       *     Returns true when an unary operator node, false otherwise.\n       */\n    }, {\n      key: \"isUnary\",\n      value: function isUnary() {\n        return this.args.length === 1;\n      }\n      /**\n       * Check whether this is a binary OperatorNode:\n       * has exactly two arguments, like `a + b`.\n       * @return {boolean}\n       *     Returns true when a binary operator node, false otherwise.\n       */\n    }, {\n      key: \"isBinary\",\n      value: function isBinary() {\n        return this.args.length === 2;\n      }\n      /**\n       * Get string representation.\n       * @param {Object} options\n       * @return {string} str\n       */\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n        var implicit = options && options.implicit ? options.implicit : 'hide';\n        var args = this.args;\n        var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);\n        if (args.length === 1) {\n          // unary operators\n          var assoc = getAssociativity(this, parenthesis);\n          var operand = args[0].toString(options);\n          if (parens[0]) {\n            operand = '(' + operand + ')';\n          }\n\n          // for example for \"not\", we want a space between operand and argument\n          var opIsNamed = /[a-zA-Z]+/.test(this.op);\n          if (assoc === 'right') {\n            // prefix operator\n            return this.op + (opIsNamed ? ' ' : '') + operand;\n          } else if (assoc === 'left') {\n            // postfix\n            return operand + (opIsNamed ? ' ' : '') + this.op;\n          }\n\n          // fall back to postfix\n          return operand + this.op;\n        } else if (args.length === 2) {\n          var lhs = args[0].toString(options); // left hand side\n          var rhs = args[1].toString(options); // right hand side\n          if (parens[0]) {\n            // left hand side in parenthesis?\n            lhs = '(' + lhs + ')';\n          }\n          if (parens[1]) {\n            // right hand side in parenthesis?\n            rhs = '(' + rhs + ')';\n          }\n          if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n            return lhs + ' ' + rhs;\n          }\n          return lhs + ' ' + this.op + ' ' + rhs;\n        } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n          var stringifiedArgs = args.map(function (arg, index) {\n            arg = arg.toString(options);\n            if (parens[index]) {\n              // put in parenthesis?\n              arg = '(' + arg + ')';\n            }\n            return arg;\n          });\n          if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n            return stringifiedArgs.join(' ');\n          }\n          return stringifiedArgs.join(' ' + this.op + ' ');\n        } else {\n          // fallback to formatting as a function call\n          return this.fn + '(' + this.args.join(', ') + ')';\n        }\n      }\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          op: this.op,\n          fn: this.fn,\n          args: this.args,\n          implicit: this.implicit,\n          isPercentage: this.isPercentage\n        };\n      }\n      /**\n       * Instantiate an OperatorNode from its JSON representation\n       * @param {Object} json\n       *     An object structured like\n       *     ```\n       *     {\"mathjs\": \"OperatorNode\",\n       *      \"op\": \"+\", \"fn\": \"add\", \"args\": [...],\n       *      \"implicit\": false,\n       *      \"isPercentage\":false}\n       *     ```\n       *     where mathjs is optional\n       * @returns {OperatorNode}\n       */\n    }, {\n      key: \"toHTML\",\n      /**\n       * Get HTML representation.\n       * @param {Object} options\n       * @return {string} str\n       */\n      value: function toHTML(options) {\n        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n        var implicit = options && options.implicit ? options.implicit : 'hide';\n        var args = this.args;\n        var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);\n        if (args.length === 1) {\n          // unary operators\n          var assoc = getAssociativity(this, parenthesis);\n          var operand = args[0].toHTML(options);\n          if (parens[0]) {\n            operand = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + operand + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n          }\n          if (assoc === 'right') {\n            // prefix operator\n            return '<span class=\"math-operator math-unary-operator ' + 'math-lefthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n          } else {\n            // postfix when assoc === 'left' or undefined\n            return operand + '<span class=\"math-operator math-unary-operator ' + 'math-righthand-unary-operator\">' + escape(this.op) + '</span>';\n          }\n        } else if (args.length === 2) {\n          // binary operatoes\n          var lhs = args[0].toHTML(options); // left hand side\n          var rhs = args[1].toHTML(options); // right hand side\n          if (parens[0]) {\n            // left hand side in parenthesis?\n            lhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + lhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n          }\n          if (parens[1]) {\n            // right hand side in parenthesis?\n            rhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + rhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n          }\n          if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n            return lhs + '<span class=\"math-operator math-binary-operator ' + 'math-implicit-binary-operator\"></span>' + rhs;\n          }\n          return lhs + '<span class=\"math-operator math-binary-operator ' + 'math-explicit-binary-operator\">' + escape(this.op) + '</span>' + rhs;\n        } else {\n          var stringifiedArgs = args.map(function (arg, index) {\n            arg = arg.toHTML(options);\n            if (parens[index]) {\n              // put in parenthesis?\n              arg = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + arg + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n            }\n            return arg;\n          });\n          if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n            if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n              return stringifiedArgs.join('<span class=\"math-operator math-binary-operator ' + 'math-implicit-binary-operator\"></span>');\n            }\n            return stringifiedArgs.join('<span class=\"math-operator math-binary-operator ' + 'math-explicit-binary-operator\">' + escape(this.op) + '</span>');\n          } else {\n            // fallback to formatting as a function call\n            return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">' + '(</span>' + stringifiedArgs.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n          }\n        }\n      }\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string} str\n       */\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n        var implicit = options && options.implicit ? options.implicit : 'hide';\n        var args = this.args;\n        var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);\n        var op = latexOperators[this.fn];\n        op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op\n\n        if (args.length === 1) {\n          // unary operators\n          var assoc = getAssociativity(this, parenthesis);\n          var operand = args[0].toTex(options);\n          if (parens[0]) {\n            operand = \"\\\\left(\".concat(operand, \"\\\\right)\");\n          }\n          if (assoc === 'right') {\n            // prefix operator\n            return op + operand;\n          } else if (assoc === 'left') {\n            // postfix operator\n            return operand + op;\n          }\n\n          // fall back to postfix\n          return operand + op;\n        } else if (args.length === 2) {\n          // binary operators\n          var lhs = args[0]; // left hand side\n          var lhsTex = lhs.toTex(options);\n          if (parens[0]) {\n            lhsTex = \"\\\\left(\".concat(lhsTex, \"\\\\right)\");\n          }\n          var rhs = args[1]; // right hand side\n          var rhsTex = rhs.toTex(options);\n          if (parens[1]) {\n            rhsTex = \"\\\\left(\".concat(rhsTex, \"\\\\right)\");\n          }\n\n          // handle some exceptions (due to the way LaTeX works)\n          var lhsIdentifier;\n          if (parenthesis === 'keep') {\n            lhsIdentifier = lhs.getIdentifier();\n          } else {\n            // Ignore ParenthesisNodes if in 'keep' mode\n            lhsIdentifier = lhs.getContent().getIdentifier();\n          }\n          switch (this.getIdentifier()) {\n            case 'OperatorNode:divide':\n              // op contains '\\\\frac' at this point\n              return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';\n            case 'OperatorNode:pow':\n              lhsTex = '{' + lhsTex + '}';\n              rhsTex = '{' + rhsTex + '}';\n              switch (lhsIdentifier) {\n                case 'ConditionalNode': //\n                case 'OperatorNode:divide':\n                  lhsTex = \"\\\\left(\".concat(lhsTex, \"\\\\right)\");\n              }\n              break;\n            case 'OperatorNode:multiply':\n              if (this.implicit && implicit === 'hide') {\n                return lhsTex + '~' + rhsTex;\n              }\n          }\n          return lhsTex + op + rhsTex;\n        } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n          var texifiedArgs = args.map(function (arg, index) {\n            arg = arg.toTex(options);\n            if (parens[index]) {\n              arg = \"\\\\left(\".concat(arg, \"\\\\right)\");\n            }\n            return arg;\n          });\n          if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit && implicit === 'hide') {\n            return texifiedArgs.join('~');\n          }\n          return texifiedArgs.join(op);\n        } else {\n          // fall back to formatting as a function call\n          // as this is a fallback, it doesn't use\n          // fancy function names\n          return '\\\\mathrm{' + this.fn + '}\\\\left(' + args.map(function (arg) {\n            return arg.toTex(options);\n          }).join(',') + '\\\\right)';\n        }\n      }\n      /**\n       * Get identifier.\n       * @return {string}\n       */\n    }, {\n      key: \"getIdentifier\",\n      value: function getIdentifier() {\n        return this.type + ':' + this.fn;\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isOperatorNode\",\n      get: function get() {\n        return true;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new OperatorNode(json.op, json.fn, json.args, json.implicit, json.isPercentage);\n      }\n    }]);\n    return OperatorNode;\n  }(Node);\n  _defineProperty(OperatorNode, \"name\", name);\n  return OperatorNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":null,"metadata":{},"sourceType":"module"}