{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization'; // maps TimeView to its translation\n\nvar timeViews = {\n  hours: 'Óra',\n  minutes: 'Perc',\n  seconds: 'Másodperc'\n}; // maps PickersToolbar[\"viewType\"] to its translation\n\nvar pickerViews = {\n  calendar: 'naptár',\n  clock: 'óra'\n};\nvar huHUPickers = {\n  // Calendar navigation\n  previousMonth: 'Előző hónap',\n  nextMonth: 'Következő hónap',\n  // View navigation\n  openPreviousView: 'Előző nézet megnyitása',\n  openNextView: 'Következő nézet megnyitása',\n  calendarViewSwitchingButtonAriaLabel: function calendarViewSwitchingButtonAriaLabel(view) {\n    return view === 'year' ? 'az évválasztó már nyitva, váltson a naptárnézetre' : 'a naptárnézet már nyitva, váltson az évválasztóra';\n  },\n  inputModeToggleButtonAriaLabel: function inputModeToggleButtonAriaLabel(isKeyboardInputOpen, viewType) {\n    return isKeyboardInputOpen ? \"sz\\xF6veges beviteli n\\xE9zet akt\\xEDv, v\\xE1lt\\xE1s \".concat(pickerViews[viewType], \" n\\xE9zetre\") : \"\".concat(pickerViews[viewType], \" beviteli n\\xE9zet akt\\xEDv, v\\xE1lt\\xE1s sz\\xF6veges beviteli n\\xE9zetre\");\n  },\n  // DateRange placeholders\n  start: 'Kezdő dátum',\n  end: 'Záró dátum',\n  // Action bar\n  cancelButtonLabel: 'Mégse',\n  clearButtonLabel: 'Törlés',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Ma',\n  // Toolbar titles\n  datePickerDefaultToolbarTitle: 'Dátum kiválasztása',\n  dateTimePickerDefaultToolbarTitle: 'Dátum és idő kiválasztása',\n  timePickerDefaultToolbarTitle: 'Idő kiválasztása',\n  dateRangePickerDefaultToolbarTitle: 'Dátumhatárok kiválasztása',\n  // Clock labels\n  clockLabelText: function clockLabelText(view, time, adapter) {\n    var _timeViews$view;\n    return \"\".concat((_timeViews$view = timeViews[view]) != null ? _timeViews$view : view, \" kiv\\xE1laszt\\xE1sa. \").concat(time === null ? 'Nincs kiválasztva idő' : \"A kiv\\xE1lasztott id\\u0151 \".concat(adapter.format(time, 'fullTime')));\n  },\n  hoursClockNumberText: function hoursClockNumberText(hours) {\n    return \"\".concat(hours, \" \").concat(timeViews.hours.toLowerCase());\n  },\n  minutesClockNumberText: function minutesClockNumberText(minutes) {\n    return \"\".concat(minutes, \" \").concat(timeViews.minutes.toLowerCase());\n  },\n  secondsClockNumberText: function secondsClockNumberText(seconds) {\n    return \"\".concat(seconds, \"  \").concat(timeViews.seconds.toLowerCase());\n  },\n  // Open picker labels\n  openDatePickerDialogue: function openDatePickerDialogue(value, utils) {\n    return value !== null && utils.isValid(value) ? \"V\\xE1lasszon d\\xE1tumot, a kiv\\xE1lasztott d\\xE1tum: \".concat(utils.format(value, 'fullDate')) : 'Válasszon dátumot';\n  },\n  openTimePickerDialogue: function openTimePickerDialogue(value, utils) {\n    return value !== null && utils.isValid(value) ? \"V\\xE1lasszon id\\u0151t, a kiv\\xE1lasztott id\\u0151: \".concat(utils.format(value, 'fullTime')) : 'Válasszon időt';\n  },\n  // Table labels\n  timeTableLabel: 'válasszon időt',\n  dateTableLabel: 'válasszon dátumot'\n};\nexport var huHU = getPickersLocalization(huHUPickers);","map":null,"metadata":{},"sourceType":"module"}