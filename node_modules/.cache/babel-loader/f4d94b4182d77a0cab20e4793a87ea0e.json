{"ast":null,"code":"import _regeneratorRuntime from '@babel/runtime/helpers/regeneratorRuntime';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\n\n/**\n * Applies a function to the value at the given index of an array\n\n * @param {number} index\n * @param {function} fn\n * @param {array} collection\n * @returns copy of the array with the element at the given index replaced with the result of the function application.\n */\nvar adjust = function adjust(index, fn, collection) {\n  var _Object$assign;\n  if (index >= 0 && index >= collection.length) return collection;\n  if (index < 0 && Math.abs(index) > collection.length) return collection;\n  var i = index < 0 ? collection.length + index : index;\n  return Object.assign([], collection, (_Object$assign = {}, _Object$assign[i] = fn(collection[i]), _Object$assign));\n};\nvar reverse = function reverse(list) {\n  return Array.prototype.slice.call(list, 0).reverse();\n};\n\n/**\n * Performs right-to-left function composition with async functions support\n *\n * @param  {...any} functions\n */\nvar asyncCompose = function asyncCompose() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(value) {\n      var result,\n        reversedFns,\n        _len2,\n        args,\n        _key2,\n        i,\n        fn,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            result = value;\n            reversedFns = reverse(fns);\n            for (_len2 = _args.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n              args[_key2 - 1] = _args[_key2];\n            }\n            i = 0;\n          case 4:\n            if (!(i < reversedFns.length)) {\n              _context.next = 12;\n              break;\n            }\n            fn = reversedFns[i];\n            _context.next = 8;\n            return fn.apply(void 0, [result].concat(args));\n          case 8:\n            result = _context.sent;\n          case 9:\n            i += 1;\n            _context.next = 4;\n            break;\n          case 12:\n            return _context.abrupt(\"return\", result);\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\n/**\n * Capitalize first letter of each word\n *\n * @param {String} string\n * @returns {String} capitalized string\n */\nvar capitalize = function capitalize(value) {\n  if (!value) return value;\n  return value.replace(/(^|\\s)\\S/g, function (l) {\n    return l.toUpperCase();\n  });\n};\n\n/**\n * Casts value to array\n *\n * @param {any} value\n * @returns {Array} casted value\n */\nvar castArray = function castArray(value) {\n  return Array.isArray(value) ? value : [value];\n};\n\n/* eslint-disable no-await-in-loop */\n\n/**\n * Performs right-to-left function composition\n *\n * @param  {...any} functions\n */\nvar compose = function compose() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n  return function (value) {\n    var result = value;\n    var reversedFns = reverse(fns);\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    for (var i = 0; i < reversedFns.length; i += 1) {\n      var fn = reversedFns[i];\n      result = fn.apply(void 0, [result].concat(args));\n    }\n    return result;\n  };\n};\nvar dropLast = function dropLast(array) {\n  return array.slice(0, array.length - 1);\n};\nvar evolve = function evolve(transformations, object) {\n  var result = object instanceof Array ? [] : {};\n  var keys = Object.keys(object);\n  for (var i = 0; i < keys.length; i += 1) {\n    var key = keys[i];\n    var transformation = transformations[key];\n    var type = typeof transformation;\n    if (type === 'function') {\n      result[key] = transformation(object[key]);\n    } else if (transformation && type === 'object') {\n      result[key] = evolve(transformation, object[key]);\n    } else result[key] = object[key];\n  }\n  return result;\n};\nvar isNil = function isNil(value) {\n  return value === null || value === undefined;\n};\nvar get = function get(target, path, defaultValue) {\n  if (isNil(target)) return defaultValue;\n  var _path = castArray(path);\n  var result = target;\n  for (var i = 0; i < _path.length; i += 1) {\n    if (isNil(result)) return undefined;\n    result = result[_path[i]];\n  }\n  return isNil(result) ? defaultValue : result;\n};\nvar last = function last(value) {\n  return value === '' ? '' : value[value.length - 1];\n};\nvar mapValues = function mapValues(object, fn) {\n  var entries = Object.entries(object);\n  return entries.reduce(function (acc, _ref, index) {\n    var key = _ref[0],\n      value = _ref[1];\n    acc[key] = fn(value, key, index);\n    return acc;\n  }, {});\n};\nvar isPercent = function isPercent(value) {\n  return /((-)?\\d+\\.?\\d*)%/g.exec(value);\n};\n\n/**\n * Get percentage value of input\n *\n * @param {String} value\n * @returns {Object} percent value (if matches)\n */\nvar matchPercent = function matchPercent(value) {\n  var match = isPercent(value);\n  if (match) {\n    var f = parseFloat(match[1], 10);\n    var percent = f / 100;\n    return {\n      percent: percent,\n      value: f\n    };\n  }\n  return null;\n};\nvar omit = function omit(keys, object) {\n  var _keys = castArray(keys);\n  var copy = Object.assign({}, object);\n  _keys.forEach(function (key) {\n    delete copy[key];\n  });\n  return copy;\n};\nvar pick = function pick(keys, obj) {\n  var result = {};\n  for (var i = 0; i < keys.length; i += 1) {\n    var key = keys[i];\n    if (key in obj) result[key] = obj[key];\n  }\n  return result;\n};\n\n/**\n * Capitalize first letter of string\n *\n * @param {String} string\n * @returns {String} capitalized string\n */\nvar upperFirst = function upperFirst(value) {\n  if (!value) return value;\n  return value.charAt(0).toUpperCase() + value.slice(1);\n};\nexport { adjust, asyncCompose, capitalize, castArray, compose, dropLast, evolve, get, isNil, last, mapValues, matchPercent, omit, pick, reverse, upperFirst };","map":null,"metadata":{},"sourceType":"module"}