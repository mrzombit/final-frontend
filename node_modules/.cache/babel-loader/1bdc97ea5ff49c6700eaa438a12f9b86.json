{"ast":null,"code":"var TYPE = require('../../tokenizer').TYPE;\nvar rawMode = require('./Raw').mode;\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar SEMICOLON = TYPE.Semicolon;\nvar ATKEYWORD = TYPE.AtKeyword;\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\nvar RIGHTCURLYBRACKET = TYPE.RightCurlyBracket;\nfunction consumeRaw(startToken) {\n  return this.Raw(startToken, null, true);\n}\nfunction consumeRule() {\n  return this.parseWithFallback(this.Rule, consumeRaw);\n}\nfunction consumeRawDeclaration(startToken) {\n  return this.Raw(startToken, rawMode.semicolonIncluded, true);\n}\nfunction consumeDeclaration() {\n  if (this.scanner.tokenType === SEMICOLON) {\n    return consumeRawDeclaration.call(this, this.scanner.tokenIndex);\n  }\n  var node = this.parseWithFallback(this.Declaration, consumeRawDeclaration);\n  if (this.scanner.tokenType === SEMICOLON) {\n    this.scanner.next();\n  }\n  return node;\n}\nmodule.exports = {\n  name: 'Block',\n  structure: {\n    children: [['Atrule', 'Rule', 'Declaration']]\n  },\n  parse: function parse(isDeclaration) {\n    var consumer = isDeclaration ? consumeDeclaration : consumeRule;\n    var start = this.scanner.tokenStart;\n    var children = this.createList();\n    this.eat(LEFTCURLYBRACKET);\n    scan: while (!this.scanner.eof) {\n      switch (this.scanner.tokenType) {\n        case RIGHTCURLYBRACKET:\n          break scan;\n        case WHITESPACE:\n        case COMMENT:\n          this.scanner.next();\n          break;\n        case ATKEYWORD:\n          children.push(this.parseWithFallback(this.Atrule, consumeRaw));\n          break;\n        default:\n          children.push(consumer.call(this));\n      }\n    }\n    if (!this.scanner.eof) {\n      this.eat(RIGHTCURLYBRACKET);\n    }\n    return {\n      type: 'Block',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      children: children\n    };\n  },\n  generate: function generate(node) {\n    this.chunk('{');\n    this.children(node, function (prev) {\n      if (prev.type === 'Declaration') {\n        this.chunk(';');\n      }\n    });\n    this.chunk('}');\n  },\n  walkContext: 'block'\n};","map":null,"metadata":{},"sourceType":"script"}