{"ast":null,"code":"var TYPE = require('../../tokenizer').TYPE;\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar IDENT = TYPE.Ident;\nvar FUNCTION = TYPE.Function;\nvar COLON = TYPE.Colon;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nfunction consumeRaw() {\n  return this.createSingleNodeList(this.Raw(this.scanner.tokenIndex, null, false));\n}\nfunction parentheses() {\n  this.scanner.skipSC();\n  if (this.scanner.tokenType === IDENT && this.lookupNonWSType(1) === COLON) {\n    return this.createSingleNodeList(this.Declaration());\n  }\n  return readSequence.call(this);\n}\nfunction readSequence() {\n  var children = this.createList();\n  var space = null;\n  var child;\n  this.scanner.skipSC();\n  scan: while (!this.scanner.eof) {\n    switch (this.scanner.tokenType) {\n      case WHITESPACE:\n        space = this.WhiteSpace();\n        continue;\n      case COMMENT:\n        this.scanner.next();\n        continue;\n      case FUNCTION:\n        child = this.Function(consumeRaw, this.scope.AtrulePrelude);\n        break;\n      case IDENT:\n        child = this.Identifier();\n        break;\n      case LEFTPARENTHESIS:\n        child = this.Parentheses(parentheses, this.scope.AtrulePrelude);\n        break;\n      default:\n        break scan;\n    }\n    if (space !== null) {\n      children.push(space);\n      space = null;\n    }\n    children.push(child);\n  }\n  return children;\n}\nmodule.exports = {\n  parse: {\n    prelude: function prelude() {\n      var children = readSequence.call(this);\n      if (this.getFirstListNode(children) === null) {\n        this.error('Condition is expected');\n      }\n      return children;\n    },\n    block: function block() {\n      return this.Block(false);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}