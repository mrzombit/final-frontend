{"ast":null,"code":"/**\n * Template Engine Bridge\n */\nimport { compile as render } from './template';\nimport { createElement } from './dom';\nimport { isNullOrUndefined, isBlazor } from './util';\nvar HAS_ROW = /^[\\n\\r.]+<tr|^<tr/;\nvar HAS_SVG = /^[\\n\\r.]+<svg|^<path|^<g/;\nexport var blazorTemplates = {};\n/**\n *\n * @returns {string} ?\n */\nexport function getRandomId() {\n  return '-' + Math.random().toString(36).substr(2, 5);\n}\n/**\n * Compile the template string into template function.\n *\n * @param {string} templateString - The template string which is going to convert.\n * @param {Object} helper - Helper functions as an object.\n * @param {boolean} ignorePrefix ?\n * @returns {NodeList} ?\n * @private\n */\n// eslint-disable-next-line\nexport function compile(templateString, helper, ignorePrefix) {\n  var compiler = engineObj.compile(templateString, helper, ignorePrefix);\n  // eslint-disable-next-line\n  return function (data, component, propName, templateId, isStringTemplate, index, element, root) {\n    var result = compiler(data, component, propName, element, root);\n    var blazorTemplateId = 'BlazorTemplateId';\n    if (isBlazor() && !isStringTemplate) {\n      var randomId = getRandomId();\n      var blazorId = templateId + randomId;\n      if (!blazorTemplates[\"\" + templateId]) {\n        blazorTemplates[\"\" + templateId] = [];\n      }\n      if (!isNullOrUndefined(index)) {\n        var keys = Object.keys(blazorTemplates[\"\" + templateId][parseInt(index.toString(), 10)]);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n          var key = keys_1[_i];\n          if (key !== blazorTemplateId && data[\"\" + key]) {\n            blazorTemplates[\"\" + templateId][parseInt(index.toString(), 10)][\"\" + key] = data[\"\" + key];\n          }\n          if (key === blazorTemplateId) {\n            blazorId = blazorTemplates[\"\" + templateId][parseInt(index.toString(), 10)][\"\" + key];\n          }\n        }\n      } else {\n        data[\"\" + blazorTemplateId] = blazorId;\n        blazorTemplates[\"\" + templateId].push(data);\n      }\n      // eslint-disable-next-line\n      return propName === 'rowTemplate' ? [createElement('tr', {\n        id: blazorId,\n        className: 'e-blazor-template'\n      })] :\n      // eslint-disable-next-line\n      [createElement('div', {\n        id: blazorId,\n        className: 'e-blazor-template'\n      })];\n    }\n    if (typeof result === 'string') {\n      if (HAS_SVG.test(result)) {\n        var ele = createElement('svg', {\n          innerHTML: result\n        });\n        return ele.childNodes;\n      } else {\n        var ele = createElement(HAS_ROW.test(result) ? 'table' : 'div', {\n          innerHTML: result\n        });\n        return ele.childNodes;\n      }\n    } else {\n      return result;\n    }\n  };\n}\n/**\n *\n * @param {string} templateId ?\n * @param {string} templateName ?\n * @param {string} comp ?\n * @param {boolean} isEmpty ?\n * @param {Function} callBack ?\n * @returns {void} ?\n */\nexport function updateBlazorTemplate(templateId, templateName, comp, isEmpty, callBack) {\n  if (isBlazor()) {\n    var ejsIntrop = 'sfBlazor';\n    window[\"\" + ejsIntrop].updateTemplate(templateName, blazorTemplates[\"\" + templateId], templateId, comp, callBack);\n    if (isEmpty !== false) {\n      blazorTemplates[\"\" + templateId] = [];\n    }\n  }\n}\n/**\n *\n * @param {string} templateId ?\n * @param {string} templateName ?\n * @param {number} index ?\n * @returns {void} ?\n */\nexport function resetBlazorTemplate(templateId, templateName, index) {\n  var templateDiv = document.getElementById(templateId);\n  if (templateDiv) {\n    // eslint-disable-next-line\n    var innerTemplates = templateDiv.getElementsByClassName('blazor-inner-template');\n    for (var i = 0; i < innerTemplates.length; i++) {\n      var tempId = ' ';\n      if (!isNullOrUndefined(index)) {\n        tempId = innerTemplates[parseInt(index.toString(), 10)].getAttribute('data-templateId');\n      } else {\n        tempId = innerTemplates[parseInt(i.toString(), 10)].getAttribute('data-templateId');\n      }\n      var tempElement = document.getElementById(tempId);\n      if (tempElement) {\n        var length_1 = tempElement.childNodes.length;\n        for (var j = 0; j < length_1; j++) {\n          if (!isNullOrUndefined(index)) {\n            innerTemplates[parseInt(index.toString(), 10)].appendChild(tempElement.childNodes[0]);\n            i = innerTemplates.length;\n          } else {\n            innerTemplates[parseInt(i.toString(), 10)].appendChild(tempElement.childNodes[0]);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Set your custom template engine for template rendering.\n *\n * @param  {ITemplateEngine} classObj - Class object for custom template.\n * @returns {void} ?\n * @private\n */\nexport function setTemplateEngine(classObj) {\n  engineObj.compile = classObj.compile;\n}\n/**\n * Get current template engine for template rendering\n *\n * @returns {string} ?\n * @private\n */\nexport function getTemplateEngine() {\n  return engineObj.compile;\n}\n//Default Engine Class\nvar Engine = /** @class */function () {\n  function Engine() {}\n  // eslint-disable-next-line\n  Engine.prototype.compile = function (templateString, helper, ignorePrefix) {\n    if (helper === void 0) {\n      helper = {};\n    }\n    return render(templateString, helper);\n  };\n  return Engine;\n}();\nvar engineObj = {\n  compile: new Engine().compile\n};","map":null,"metadata":{},"sourceType":"module"}