{"ast":null,"code":"var tokenize = require('../tokenizer');\nvar TokenStream = require('../common/TokenStream');\nvar tokenStream = new TokenStream();\nvar astToTokens = {\n  decorator: function decorator(handlers) {\n    var curNode = null;\n    var prev = {\n      len: 0,\n      node: null\n    };\n    var nodes = [prev];\n    var buffer = '';\n    return {\n      children: handlers.children,\n      node: function node(_node) {\n        var tmp = curNode;\n        curNode = _node;\n        handlers.node.call(this, _node);\n        curNode = tmp;\n      },\n      chunk: function chunk(_chunk) {\n        buffer += _chunk;\n        if (prev.node !== curNode) {\n          nodes.push({\n            len: _chunk.length,\n            node: curNode\n          });\n        } else {\n          prev.len += _chunk.length;\n        }\n      },\n      result: function result() {\n        return prepareTokens(buffer, nodes);\n      }\n    };\n  }\n};\nfunction prepareTokens(str, nodes) {\n  var tokens = [];\n  var nodesOffset = 0;\n  var nodesIndex = 0;\n  var currentNode = nodes ? nodes[nodesIndex].node : null;\n  tokenize(str, tokenStream);\n  while (!tokenStream.eof) {\n    if (nodes) {\n      while (nodesIndex < nodes.length && nodesOffset + nodes[nodesIndex].len <= tokenStream.tokenStart) {\n        nodesOffset += nodes[nodesIndex++].len;\n        currentNode = nodes[nodesIndex].node;\n      }\n    }\n    tokens.push({\n      type: tokenStream.tokenType,\n      value: tokenStream.getTokenValue(),\n      index: tokenStream.tokenIndex,\n      // TODO: remove it, temporary solution\n      balance: tokenStream.balance[tokenStream.tokenIndex],\n      // TODO: remove it, temporary solution\n      node: currentNode\n    });\n    tokenStream.next();\n    // console.log({ ...tokens[tokens.length - 1], node: undefined });\n  }\n\n  return tokens;\n}\nmodule.exports = function (value, syntax) {\n  if (typeof value === 'string') {\n    return prepareTokens(value, null);\n  }\n  return syntax.generate(value, astToTokens);\n};","map":null,"metadata":{},"sourceType":"script"}