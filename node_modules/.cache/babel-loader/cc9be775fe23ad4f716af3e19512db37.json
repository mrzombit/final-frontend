{"ast":null,"code":"var SyntaxError = require('./SyntaxError');\nvar TAB = 9;\nvar N = 10;\nvar F = 12;\nvar R = 13;\nvar SPACE = 32;\nvar Tokenizer = function Tokenizer(str) {\n  this.str = str;\n  this.pos = 0;\n};\nTokenizer.prototype = {\n  charCodeAt: function charCodeAt(pos) {\n    return pos < this.str.length ? this.str.charCodeAt(pos) : 0;\n  },\n  charCode: function charCode() {\n    return this.charCodeAt(this.pos);\n  },\n  nextCharCode: function nextCharCode() {\n    return this.charCodeAt(this.pos + 1);\n  },\n  nextNonWsCode: function nextNonWsCode(pos) {\n    return this.charCodeAt(this.findWsEnd(pos));\n  },\n  findWsEnd: function findWsEnd(pos) {\n    for (; pos < this.str.length; pos++) {\n      var code = this.str.charCodeAt(pos);\n      if (code !== R && code !== N && code !== F && code !== SPACE && code !== TAB) {\n        break;\n      }\n    }\n    return pos;\n  },\n  substringToPos: function substringToPos(end) {\n    return this.str.substring(this.pos, this.pos = end);\n  },\n  eat: function eat(code) {\n    if (this.charCode() !== code) {\n      this.error('Expect `' + String.fromCharCode(code) + '`');\n    }\n    this.pos++;\n  },\n  peek: function peek() {\n    return this.pos < this.str.length ? this.str.charAt(this.pos++) : '';\n  },\n  error: function error(message) {\n    throw new SyntaxError(message, this.str, this.pos);\n  }\n};\nmodule.exports = Tokenizer;","map":null,"metadata":{},"sourceType":"script"}