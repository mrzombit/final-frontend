{"ast":null,"code":"var isHexDigit = require('../../tokenizer').isHexDigit;\nvar cmpChar = require('../../tokenizer').cmpChar;\nvar TYPE = require('../../tokenizer').TYPE;\nvar NAME = require('../../tokenizer').NAME;\nvar IDENT = TYPE.Ident;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\nvar HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\nvar QUESTIONMARK = 0x003F; // U+003F QUESTION MARK (?)\nvar U = 0x0075; // U+0075 LATIN SMALL LETTER U (u)\n\nfunction eatHexSequence(offset, allowDash) {\n  for (var pos = this.scanner.tokenStart + offset, len = 0; pos < this.scanner.tokenEnd; pos++) {\n    var code = this.scanner.source.charCodeAt(pos);\n    if (code === HYPHENMINUS && allowDash && len !== 0) {\n      if (eatHexSequence.call(this, offset + len + 1, false) === 0) {\n        this.error();\n      }\n      return -1;\n    }\n    if (!isHexDigit(code)) {\n      this.error(allowDash && len !== 0 ? 'HyphenMinus' + (len < 6 ? ' or hex digit' : '') + ' is expected' : len < 6 ? 'Hex digit is expected' : 'Unexpected input', pos);\n    }\n    if (++len > 6) {\n      this.error('Too many hex digits', pos);\n    }\n    ;\n  }\n  this.scanner.next();\n  return len;\n}\nfunction eatQuestionMarkSequence(max) {\n  var count = 0;\n  while (this.scanner.isDelim(QUESTIONMARK)) {\n    if (++count > max) {\n      this.error('Too many question marks');\n    }\n    this.scanner.next();\n  }\n}\nfunction startsWith(code) {\n  if (this.scanner.source.charCodeAt(this.scanner.tokenStart) !== code) {\n    this.error(NAME[code] + ' is expected');\n  }\n}\n\n// https://drafts.csswg.org/css-syntax/#urange\n// Informally, the <urange> production has three forms:\n// U+0001\n//      Defines a range consisting of a single code point, in this case the code point \"1\".\n// U+0001-00ff\n//      Defines a range of codepoints between the first and the second value, in this case\n//      the range between \"1\" and \"ff\" (255 in decimal) inclusive.\n// U+00??\n//      Defines a range of codepoints where the \"?\" characters range over all hex digits,\n//      in this case defining the same as the value U+0000-00ff.\n// In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat \"?\" as a hexadecimal digit).\n//\n// <urange> =\n//   u '+' <ident-token> '?'* |\n//   u <dimension-token> '?'* |\n//   u <number-token> '?'* |\n//   u <number-token> <dimension-token> |\n//   u <number-token> <number-token> |\n//   u '+' '?'+\nfunction scanUnicodeRange() {\n  var hexLength = 0;\n\n  // u '+' <ident-token> '?'*\n  // u '+' '?'+\n  if (this.scanner.isDelim(PLUSSIGN)) {\n    this.scanner.next();\n    if (this.scanner.tokenType === IDENT) {\n      hexLength = eatHexSequence.call(this, 0, true);\n      if (hexLength > 0) {\n        eatQuestionMarkSequence.call(this, 6 - hexLength);\n      }\n      return;\n    }\n    if (this.scanner.isDelim(QUESTIONMARK)) {\n      this.scanner.next();\n      eatQuestionMarkSequence.call(this, 5);\n      return;\n    }\n    this.error('Hex digit or question mark is expected');\n    return;\n  }\n\n  // u <number-token> '?'*\n  // u <number-token> <dimension-token>\n  // u <number-token> <number-token>\n  if (this.scanner.tokenType === NUMBER) {\n    startsWith.call(this, PLUSSIGN);\n    hexLength = eatHexSequence.call(this, 1, true);\n    if (this.scanner.isDelim(QUESTIONMARK)) {\n      eatQuestionMarkSequence.call(this, 6 - hexLength);\n      return;\n    }\n    if (this.scanner.tokenType === DIMENSION || this.scanner.tokenType === NUMBER) {\n      startsWith.call(this, HYPHENMINUS);\n      eatHexSequence.call(this, 1, false);\n      return;\n    }\n    return;\n  }\n\n  // u <dimension-token> '?'*\n  if (this.scanner.tokenType === DIMENSION) {\n    startsWith.call(this, PLUSSIGN);\n    hexLength = eatHexSequence.call(this, 1, true);\n    if (hexLength > 0) {\n      eatQuestionMarkSequence.call(this, 6 - hexLength);\n    }\n    return;\n  }\n  this.error();\n}\nmodule.exports = {\n  name: 'UnicodeRange',\n  structure: {\n    value: String\n  },\n  parse: function parse() {\n    var start = this.scanner.tokenStart;\n\n    // U or u\n    if (!cmpChar(this.scanner.source, start, U)) {\n      this.error('U is expected');\n    }\n    if (!cmpChar(this.scanner.source, start + 1, PLUSSIGN)) {\n      this.error('Plus sign is expected');\n    }\n    this.scanner.next();\n    scanUnicodeRange.call(this);\n    return {\n      type: 'UnicodeRange',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      value: this.scanner.substrToCursor(start)\n    };\n  },\n  generate: function generate(node) {\n    this.chunk(node.value);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}