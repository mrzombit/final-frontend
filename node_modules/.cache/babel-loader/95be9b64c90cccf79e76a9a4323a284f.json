{"ast":null,"code":"var List = require('../common/List');\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction isValidNumber(value) {\n  // Number.isInteger(value) && value >= 0\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value && value >= 0;\n}\nfunction isValidLocation(loc) {\n  return Boolean(loc) && isValidNumber(loc.offset) && isValidNumber(loc.line) && isValidNumber(loc.column);\n}\nfunction createNodeStructureChecker(type, fields) {\n  return function checkNode(node, warn) {\n    if (!node || node.constructor !== Object) {\n      return warn(node, 'Type of node should be an Object');\n    }\n    for (var key in node) {\n      var valid = true;\n      if (hasOwnProperty.call(node, key) === false) {\n        continue;\n      }\n      if (key === 'type') {\n        if (node.type !== type) {\n          warn(node, 'Wrong node type `' + node.type + '`, expected `' + type + '`');\n        }\n      } else if (key === 'loc') {\n        if (node.loc === null) {\n          continue;\n        } else if (node.loc && node.loc.constructor === Object) {\n          if (typeof node.loc.source !== 'string') {\n            key += '.source';\n          } else if (!isValidLocation(node.loc.start)) {\n            key += '.start';\n          } else if (!isValidLocation(node.loc.end)) {\n            key += '.end';\n          } else {\n            continue;\n          }\n        }\n        valid = false;\n      } else if (fields.hasOwnProperty(key)) {\n        for (var i = 0, valid = false; !valid && i < fields[key].length; i++) {\n          var fieldType = fields[key][i];\n          switch (fieldType) {\n            case String:\n              valid = typeof node[key] === 'string';\n              break;\n            case Boolean:\n              valid = typeof node[key] === 'boolean';\n              break;\n            case null:\n              valid = node[key] === null;\n              break;\n            default:\n              if (typeof fieldType === 'string') {\n                valid = node[key] && node[key].type === fieldType;\n              } else if (Array.isArray(fieldType)) {\n                valid = node[key] instanceof List;\n              }\n          }\n        }\n      } else {\n        warn(node, 'Unknown field `' + key + '` for ' + type + ' node type');\n      }\n      if (!valid) {\n        warn(node, 'Bad value for `' + type + '.' + key + '`');\n      }\n    }\n    for (var key in fields) {\n      if (hasOwnProperty.call(fields, key) && hasOwnProperty.call(node, key) === false) {\n        warn(node, 'Field `' + type + '.' + key + '` is missed');\n      }\n    }\n  };\n}\nfunction processStructure(name, nodeType) {\n  var structure = nodeType.structure;\n  var fields = {\n    type: String,\n    loc: true\n  };\n  var docs = {\n    type: '\"' + name + '\"'\n  };\n  for (var key in structure) {\n    if (hasOwnProperty.call(structure, key) === false) {\n      continue;\n    }\n    var docsTypes = [];\n    var fieldTypes = fields[key] = Array.isArray(structure[key]) ? structure[key].slice() : [structure[key]];\n    for (var i = 0; i < fieldTypes.length; i++) {\n      var fieldType = fieldTypes[i];\n      if (fieldType === String || fieldType === Boolean) {\n        docsTypes.push(fieldType.name);\n      } else if (fieldType === null) {\n        docsTypes.push('null');\n      } else if (typeof fieldType === 'string') {\n        docsTypes.push('<' + fieldType + '>');\n      } else if (Array.isArray(fieldType)) {\n        docsTypes.push('List'); // TODO: use type enum\n      } else {\n        throw new Error('Wrong value `' + fieldType + '` in `' + name + '.' + key + '` structure definition');\n      }\n    }\n    docs[key] = docsTypes.join(' | ');\n  }\n  return {\n    docs: docs,\n    check: createNodeStructureChecker(name, fields)\n  };\n}\nmodule.exports = {\n  getStructureFromConfig: function getStructureFromConfig(config) {\n    var structure = {};\n    if (config.node) {\n      for (var name in config.node) {\n        if (hasOwnProperty.call(config.node, name)) {\n          var nodeType = config.node[name];\n          if (nodeType.structure) {\n            structure[name] = processStructure(name, nodeType);\n          } else {\n            throw new Error('Missed `structure` field in `' + name + '` node type definition');\n          }\n        }\n      }\n    }\n    return structure;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}