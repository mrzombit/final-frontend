{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Base } from './base';\nimport { Browser } from './browser';\nimport { isVisible, matches } from './dom';\nimport { Property, NotifyPropertyChanges, Event } from './notify-property-change';\nimport { EventHandler } from './event-handler';\nimport { compareElementParent } from './util';\n/**\n * Droppable Module provides support to enable droppable functionality in Dom Elements.\n * ```html\n * <div id='drop'>Droppable</div>\n * <script>\n * let ele:HTMLElement = document.getElementById('drop');\n * var drag:Droppable = new Droppable(ele,{\n *     accept:'.drop',\n *     drop: function(e) {\n *      //drop handler code.\n *     }\n * });\n * </script>\n * ```\n */\nvar Droppable = /** @class */function (_super) {\n  __extends(Droppable, _super);\n  function Droppable(element, options) {\n    var _this = _super.call(this, options, element) || this;\n    _this.mouseOver = false;\n    _this.dragData = {};\n    _this.dragStopCalled = false;\n    _this.bind();\n    return _this;\n  }\n  Droppable.prototype.bind = function () {\n    this.wireEvents();\n  };\n  Droppable.prototype.wireEvents = function () {\n    EventHandler.add(this.element, Browser.touchEndEvent, this.intDrop, this);\n  };\n  // triggers when property changed\n  // eslint-disable-next-line\n  Droppable.prototype.onPropertyChanged = function (newProp, oldProp) {\n    //No Code to handle\n  };\n  Droppable.prototype.getModuleName = function () {\n    return 'droppable';\n  };\n  Droppable.prototype.intOver = function (event, element) {\n    if (!this.mouseOver) {\n      var drag = this.dragData[this.scope];\n      this.trigger('over', {\n        event: event,\n        target: element,\n        dragData: drag\n      });\n      this.mouseOver = true;\n    }\n  };\n  Droppable.prototype.intOut = function (event, element) {\n    if (this.mouseOver) {\n      this.trigger('out', {\n        evt: event,\n        target: element\n      });\n      this.mouseOver = false;\n    }\n  };\n  Droppable.prototype.intDrop = function (evt, element) {\n    if (!this.dragStopCalled) {\n      return;\n    } else {\n      this.dragStopCalled = false;\n    }\n    var accept = true;\n    var drag = this.dragData[this.scope];\n    var isDrag = drag ? drag.helper && isVisible(drag.helper) : false;\n    var area;\n    if (isDrag) {\n      area = this.isDropArea(evt, drag.helper, element);\n      if (this.accept) {\n        accept = matches(drag.helper, this.accept);\n      }\n    }\n    if (isDrag && this.drop && area.canDrop && accept) {\n      this.trigger('drop', {\n        event: evt,\n        target: area.target,\n        droppedElement: drag.helper,\n        dragData: drag\n      });\n    }\n    this.mouseOver = false;\n  };\n  Droppable.prototype.isDropArea = function (evt, helper, element) {\n    var area = {\n      canDrop: true,\n      target: element || evt.target\n    };\n    var isTouch = evt.type === 'touchend';\n    if (isTouch || area.target === helper) {\n      helper.style.display = 'none';\n      var coord = isTouch ? evt.changedTouches[0] : evt;\n      var ele = document.elementFromPoint(coord.clientX, coord.clientY);\n      area.canDrop = false;\n      area.canDrop = compareElementParent(ele, this.element);\n      if (area.canDrop) {\n        area.target = ele;\n      }\n      helper.style.display = '';\n    }\n    return area;\n  };\n  Droppable.prototype.destroy = function () {\n    EventHandler.remove(this.element, Browser.touchEndEvent, this.intDrop);\n    _super.prototype.destroy.call(this);\n  };\n  __decorate([Property()], Droppable.prototype, \"accept\", void 0);\n  __decorate([Property('default')], Droppable.prototype, \"scope\", void 0);\n  __decorate([Event()], Droppable.prototype, \"drop\", void 0);\n  __decorate([Event()], Droppable.prototype, \"over\", void 0);\n  __decorate([Event()], Droppable.prototype, \"out\", void 0);\n  Droppable = __decorate([NotifyPropertyChanges], Droppable);\n  return Droppable;\n}(Base);\nexport { Droppable };","map":null,"metadata":{},"sourceType":"module"}