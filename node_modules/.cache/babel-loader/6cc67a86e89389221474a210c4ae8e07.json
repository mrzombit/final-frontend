{"ast":null,"code":"var TYPE = require('../../tokenizer').TYPE;\nvar IDENT = TYPE.Ident;\nvar STRING = TYPE.String;\nvar COLON = TYPE.Colon;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar RIGHTSQUAREBRACKET = TYPE.RightSquareBracket;\nvar DOLLARSIGN = 0x0024; // U+0024 DOLLAR SIGN ($)\nvar ASTERISK = 0x002A; // U+002A ASTERISK (*)\nvar EQUALSSIGN = 0x003D; // U+003D EQUALS SIGN (=)\nvar CIRCUMFLEXACCENT = 0x005E; // U+005E (^)\nvar VERTICALLINE = 0x007C; // U+007C VERTICAL LINE (|)\nvar TILDE = 0x007E; // U+007E TILDE (~)\n\nfunction getAttributeName() {\n  if (this.scanner.eof) {\n    this.error('Unexpected end of input');\n  }\n  var start = this.scanner.tokenStart;\n  var expectIdent = false;\n  var checkColon = true;\n  if (this.scanner.isDelim(ASTERISK)) {\n    expectIdent = true;\n    checkColon = false;\n    this.scanner.next();\n  } else if (!this.scanner.isDelim(VERTICALLINE)) {\n    this.eat(IDENT);\n  }\n  if (this.scanner.isDelim(VERTICALLINE)) {\n    if (this.scanner.source.charCodeAt(this.scanner.tokenStart + 1) !== EQUALSSIGN) {\n      this.scanner.next();\n      this.eat(IDENT);\n    } else if (expectIdent) {\n      this.error('Identifier is expected', this.scanner.tokenEnd);\n    }\n  } else if (expectIdent) {\n    this.error('Vertical line is expected');\n  }\n  if (checkColon && this.scanner.tokenType === COLON) {\n    this.scanner.next();\n    this.eat(IDENT);\n  }\n  return {\n    type: 'Identifier',\n    loc: this.getLocation(start, this.scanner.tokenStart),\n    name: this.scanner.substrToCursor(start)\n  };\n}\nfunction getOperator() {\n  var start = this.scanner.tokenStart;\n  var code = this.scanner.source.charCodeAt(start);\n  if (code !== EQUALSSIGN &&\n  // =\n  code !== TILDE &&\n  // ~=\n  code !== CIRCUMFLEXACCENT &&\n  // ^=\n  code !== DOLLARSIGN &&\n  // $=\n  code !== ASTERISK &&\n  // *=\n  code !== VERTICALLINE // |=\n  ) {\n    this.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected');\n  }\n  this.scanner.next();\n  if (code !== EQUALSSIGN) {\n    if (!this.scanner.isDelim(EQUALSSIGN)) {\n      this.error('Equal sign is expected');\n    }\n    this.scanner.next();\n  }\n  return this.scanner.substrToCursor(start);\n}\n\n// '[' <wq-name> ']'\n// '[' <wq-name> <attr-matcher> [ <string-token> | <ident-token> ] <attr-modifier>? ']'\nmodule.exports = {\n  name: 'AttributeSelector',\n  structure: {\n    name: 'Identifier',\n    matcher: [String, null],\n    value: ['String', 'Identifier', null],\n    flags: [String, null]\n  },\n  parse: function parse() {\n    var start = this.scanner.tokenStart;\n    var name;\n    var matcher = null;\n    var value = null;\n    var flags = null;\n    this.eat(LEFTSQUAREBRACKET);\n    this.scanner.skipSC();\n    name = getAttributeName.call(this);\n    this.scanner.skipSC();\n    if (this.scanner.tokenType !== RIGHTSQUAREBRACKET) {\n      // avoid case `[name i]`\n      if (this.scanner.tokenType !== IDENT) {\n        matcher = getOperator.call(this);\n        this.scanner.skipSC();\n        value = this.scanner.tokenType === STRING ? this.String() : this.Identifier();\n        this.scanner.skipSC();\n      }\n\n      // attribute flags\n      if (this.scanner.tokenType === IDENT) {\n        flags = this.scanner.getTokenValue();\n        this.scanner.next();\n        this.scanner.skipSC();\n      }\n    }\n    this.eat(RIGHTSQUAREBRACKET);\n    return {\n      type: 'AttributeSelector',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      name: name,\n      matcher: matcher,\n      value: value,\n      flags: flags\n    };\n  },\n  generate: function generate(node) {\n    var flagsPrefix = ' ';\n    this.chunk('[');\n    this.node(node.name);\n    if (node.matcher !== null) {\n      this.chunk(node.matcher);\n      if (node.value !== null) {\n        this.node(node.value);\n\n        // space between string and flags is not required\n        if (node.value.type === 'String') {\n          flagsPrefix = '';\n        }\n      }\n    }\n    if (node.flags !== null) {\n      this.chunk(flagsPrefix);\n      this.chunk(node.flags);\n    }\n    this.chunk(']');\n  }\n};","map":null,"metadata":{},"sourceType":"script"}